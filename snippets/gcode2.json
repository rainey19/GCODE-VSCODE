{
   "G0":{
      "prefix":"G0",
      "body":"",
      "description":"G0 & G1: Move\n\n `G0`: Rapid Move\n\n `G1`: Linear Move\n\n\n\nUsage\n\n`G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn`\n\n`G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn`\n\n\n\nParameters\n\nNot all parameters need to be used, but at least one has to be used\n\n`Xnnn` The position to move to on the X axis\n\n`Ynnn` The position to move to on the Y axis\n\n`Znnn` The position to move to on the Z axis\n\n`Ennn` The amount to extrude between the starting point and ending point\n\n`Fnnn` The feedrate per minute of the move between the starting point and ending point (if supplied)\n\n`Hnnn` (RepRapFirmware) Flag to check if an endstop was hit (H1 to check, H0 to ignore, other Hnnn see note, default is H0)1\n\n`Rnnn` (RepRapFirmware) Restore point number 4\n\n`Snnn` Laser cutter/engraver power. In RepRapFirmware, when not in laser mode S in interpreted the same as H.\n\n\n\nExamples\n\nG0 X12              ; move to 12mm on the X axis\n\nG0 F1500            ; Set the feedrate to 1500mm/minute\n\nG1 X90.6 Y13.8 E22.4; Move to 90.6mm on the X axis and 13.8mm on the Y axis while extruding 22.4mm of material\n\nThe RepRap firmware spec treats G0 and G1 as the same command, since it's just as efficient as not doing so.2\n\nMost RepRap firmwares do subtle things with feedrates.\n\n\n\nG1 F1500          ; Set feedrate to 1500mm/m\n\nG1 X50 Y25.3 E22.4; Move and extrude\n\nIn the above example, we first set the feedrate to 1500mm/m, then move to 50mm on X and 25.3mm on Y while extruding 22.4mm of filament between the two points.\n\n\n\nG1 F1500                ; Feedrate 1500mm/m\n\nG1 X50 Y25.3 E22.4 F3000; Accelerate to 3000mm/m\n\nHowever, in the above example, we set a feedrate of 1500 mm/m, then do the same move, but accelerating to 3000 mm/m. Everything stays synchronized, so extrusion accelerates right along with X and Y movement.\n\nThe RepRap spec treats the feedrate as simply another variable (like X, Y, Z, and E) to be linearly interpolated. This gives complete control over the acceleration and deceleration of the printer head in a way that ensures everything moves smoothly together and the right volume of material is extruded at all points.3\n\nTo reverse the extruder by a given amount (for example to reduce its internal pressure while it does an in-air movement so that it doesn't dribble) simply use G0 or G1 to send an E value that is less than the currently extruded length.\n\n\n\nNotes1Some firmwares allow for the RepRap to enable or disable the \"sensing\" of endstops during a move. Please check with whatever firmware you are using to see if they support the H parameter in this way, as damage may occur if you assume incorrectly. In RepRapFirmware, using the H1 or H2 parameter on a delta printer causes the XYZ parameters to refer to the individual tower motor positions instead of the head position, and to enable endstop detection as well if the parameter is H1. H3 may be used to measure axis lengths and H4 can be used to stop when an endstop is hit while updating the position only (H4 is supported in 3.2-b4 and later).\n\n2In the RS274NGC Spec, G0 is Rapid Move, which was used to move between the current point in space and the new point as quickly and efficiently as possible, and G1 is Controlled Move, which was used to move between the current point in space and the new point as precise as possible. In RepRapFirmware, G1 is always a linear move but G0 may not be linear (e.g. on a SCARA machine); however a G0 move will never go below the lower of the initial and final Z height of the move.\n\n3Some firmwares may not support setting the feedrate inline with a move.\n\n4RepRapFirmware provides an additional 'R' parameter to tell the machine to add the coordinates of the specified restore point to all axis coordinates mentioned in the G0 or G1 command. Axes that are not mentioned in the G0 or G1 command are not moved. When a print is paused, the coordinates are saved in restore point #1. When a tool change is commenced, the coordinates are saved in restore point #2. Coordinates can also be saved in restore points explicity using the G60 command.\n\nSome older machines, CNC or otherwise, used to move faster if they did not move in a straight line. This is also true for some non-Cartesian printers, like delta or polar printers, which move easier and faster in a curve.\n\n"
   },
   "G1":{
      "prefix":"G1",
      "body":"",
      "description":"G0 & G1: Move\n\n `G0`: Rapid Move\n\n `G1`: Linear Move\n\n\n\nUsage\n\n`G0 Xnnn Ynnn Znnn Ennn Fnnn Snnn`\n\n`G1 Xnnn Ynnn Znnn Ennn Fnnn Snnn`\n\n\n\nParameters\n\nNot all parameters need to be used, but at least one has to be used\n\n`Xnnn` The position to move to on the X axis\n\n`Ynnn` The position to move to on the Y axis\n\n`Znnn` The position to move to on the Z axis\n\n`Ennn` The amount to extrude between the starting point and ending point\n\n`Fnnn` The feedrate per minute of the move between the starting point and ending point (if supplied)\n\n`Hnnn` (RepRapFirmware) Flag to check if an endstop was hit (H1 to check, H0 to ignore, other Hnnn see note, default is H0)1\n\n`Rnnn` (RepRapFirmware) Restore point number 4\n\n`Snnn` Laser cutter/engraver power. In RepRapFirmware, when not in laser mode S in interpreted the same as H.\n\n\n\nExamples\n\nG0 X12              ; move to 12mm on the X axis\n\nG0 F1500            ; Set the feedrate to 1500mm/minute\n\nG1 X90.6 Y13.8 E22.4; Move to 90.6mm on the X axis and 13.8mm on the Y axis while extruding 22.4mm of material\n\nThe RepRap firmware spec treats G0 and G1 as the same command, since it's just as efficient as not doing so.2\n\nMost RepRap firmwares do subtle things with feedrates.\n\n\n\nG1 F1500          ; Set feedrate to 1500mm/m\n\nG1 X50 Y25.3 E22.4; Move and extrude\n\nIn the above example, we first set the feedrate to 1500mm/m, then move to 50mm on X and 25.3mm on Y while extruding 22.4mm of filament between the two points.\n\n\n\nG1 F1500                ; Feedrate 1500mm/m\n\nG1 X50 Y25.3 E22.4 F3000; Accelerate to 3000mm/m\n\nHowever, in the above example, we set a feedrate of 1500 mm/m, then do the same move, but accelerating to 3000 mm/m. Everything stays synchronized, so extrusion accelerates right along with X and Y movement.\n\nThe RepRap spec treats the feedrate as simply another variable (like X, Y, Z, and E) to be linearly interpolated. This gives complete control over the acceleration and deceleration of the printer head in a way that ensures everything moves smoothly together and the right volume of material is extruded at all points.3\n\nTo reverse the extruder by a given amount (for example to reduce its internal pressure while it does an in-air movement so that it doesn't dribble) simply use G0 or G1 to send an E value that is less than the currently extruded length.\n\n\n\nNotes1Some firmwares allow for the RepRap to enable or disable the \"sensing\" of endstops during a move. Please check with whatever firmware you are using to see if they support the H parameter in this way, as damage may occur if you assume incorrectly. In RepRapFirmware, using the H1 or H2 parameter on a delta printer causes the XYZ parameters to refer to the individual tower motor positions instead of the head position, and to enable endstop detection as well if the parameter is H1. H3 may be used to measure axis lengths and H4 can be used to stop when an endstop is hit while updating the position only (H4 is supported in 3.2-b4 and later).\n\n2In the RS274NGC Spec, G0 is Rapid Move, which was used to move between the current point in space and the new point as quickly and efficiently as possible, and G1 is Controlled Move, which was used to move between the current point in space and the new point as precise as possible. In RepRapFirmware, G1 is always a linear move but G0 may not be linear (e.g. on a SCARA machine); however a G0 move will never go below the lower of the initial and final Z height of the move.\n\n3Some firmwares may not support setting the feedrate inline with a move.\n\n4RepRapFirmware provides an additional 'R' parameter to tell the machine to add the coordinates of the specified restore point to all axis coordinates mentioned in the G0 or G1 command. Axes that are not mentioned in the G0 or G1 command are not moved. When a print is paused, the coordinates are saved in restore point #1. When a tool change is commenced, the coordinates are saved in restore point #2. Coordinates can also be saved in restore points explicity using the G60 command.\n\nSome older machines, CNC or otherwise, used to move faster if they did not move in a straight line. This is also true for some non-Cartesian printers, like delta or polar printers, which move easier and faster in a curve.\n\n"
   },
   "G2":{
      "prefix":"G2",
      "body":"",
      "description":"G2 & G3: Controlled Arc Move\n\nUsage\n\n\n\n`G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn` (Clockwise Arc)\n\n`G3 Xnnn Ynnn Innn Jnnn Ennn Fnnn` (Counter-Clockwise Arc)\n\n\n\nParameters\n\n`Xnnn` The position to move to on the X axis\n\n`Ynnn` The position to move to on the Y axis\n\n`Innn` The point in X space from the current X position to maintain a constant distance from\n\n`Jnnn` The point in Y space from the current Y position to maintain a constant distance from\n\n`Ennn` The amount to extrude between the starting point and ending point\n\n`Fnnn` The feedrate per minute of the move between the starting point and ending point (if supplied)\n\n\n\nExamples\n\nG2 X90.6 Y13.8 I5 J10 E22.4\n\n(Move in a Clockwise arc from the current point to point (X=90.6,Y=13.8), with a center point at (X=current_X+5, Y=current_Y+10), extruding 22.4mm of material between starting and stopping)\n\n\n\nG3 X90.6 Y13.8 I5 J10 E22.4\n\n(Move in a Counter-Clockwise arc from the current point to point (X=90.6,Y=13.8), with a center point at (X=current_X+5, Y=current_Y+10), extruding 22.4mm of material between starting and stopping)\n\n\n\nNotes1In Marlin Firmware not implemented for DELTA printers.\n\n2Prusa Firmware implements arcs only in Cartesian XY.\n\n3On Klipper, a gcode_arcs section must be enabled in the configuration file.\n\n"
   },
   "G3":{
      "prefix":"G3",
      "body":"",
      "description":"G2 & G3: Controlled Arc Move\n\nUsage\n\n\n\n`G2 Xnnn Ynnn Innn Jnnn Ennn Fnnn` (Clockwise Arc)\n\n`G3 Xnnn Ynnn Innn Jnnn Ennn Fnnn` (Counter-Clockwise Arc)\n\n\n\nParameters\n\n`Xnnn` The position to move to on the X axis\n\n`Ynnn` The position to move to on the Y axis\n\n`Innn` The point in X space from the current X position to maintain a constant distance from\n\n`Jnnn` The point in Y space from the current Y position to maintain a constant distance from\n\n`Ennn` The amount to extrude between the starting point and ending point\n\n`Fnnn` The feedrate per minute of the move between the starting point and ending point (if supplied)\n\n\n\nExamples\n\nG2 X90.6 Y13.8 I5 J10 E22.4\n\n(Move in a Clockwise arc from the current point to point (X=90.6,Y=13.8), with a center point at (X=current_X+5, Y=current_Y+10), extruding 22.4mm of material between starting and stopping)\n\n\n\nG3 X90.6 Y13.8 I5 J10 E22.4\n\n(Move in a Counter-Clockwise arc from the current point to point (X=90.6,Y=13.8), with a center point at (X=current_X+5, Y=current_Y+10), extruding 22.4mm of material between starting and stopping)\n\n\n\nNotes1In Marlin Firmware not implemented for DELTA printers.\n\n2Prusa Firmware implements arcs only in Cartesian XY.\n\n3On Klipper, a gcode_arcs section must be enabled in the configuration file.\n\n"
   },
   "G4":{
      "prefix":"G4",
      "body":"",
      "description":"G4: DwellPause the machine for a period of time.\n\n\n\nParameters\n\n`Pnnn` Time to wait, in milliseconds (In Teacup, P0, wait until all previous moves are finished)\n\n`Snnn` Time to wait, in seconds (Only on Repetier, Marlin, Prusa, Smoothieware, and RepRapFirmware 1.16 and later)\n\n\n\nExample\n\nG4 P200\n\nIn this case sit still doing nothing for 200 milliseconds. During delays the state of the machine (for example the temperatures of its extruders) will still be preserved and controlled.\n\nOn Marlin, Smoothie and RepRapFirmware, the \"S\" parameter will wait for seconds, while the \"P\" parameter will wait for milliseconds. \"G4 S2\" and \"G4 P2000\" are equivalent.\n\n"
   },
   "G6":{
      "prefix":"G6",
      "body":"",
      "description":"G6: Direct Stepper MovePerform a direct, uninterpolated, and non-kinematic synchronized move of one or more steppers directly. Units may be linear (e.g., mm or inches on DELTA) or specified in degrees (SCARA). This command is useful for initialization, diagnostics, and calibration, and should be disabled on production equipment. This type of move can be potentially dangerous, especially for deltabots, so implementations should do their best to limit movement to prevent twerking and damaging the carriage assembly.\n\n\n\nParameters\n\n`Annn` Stepper A position or angle\n\n`Bnnn` Stepper B position or angle\n\n`Cnnn` Stepper C position or angle\n\n`R` Relative move flag\n\n\n\nSCARA Examples\n\nG6 A45    ; Move SCARA A stepper to the 45\u00b0 position\n\nG6 B20 R  ; Move SCARA B stepper 20\u00b0 counter-clockwise\n\n\n\nDELTA Example\n\nG6 C10 R  ; Move DELTA C carriage up by 10mm\n\n"
   },
   "G10":{
      "prefix":"G10",
      "body":"",
      "description":"G10: Retract\n\nParameters\n\n`Snnn` retract length (S1 = long retract, S0 = short retract = default) (Repetier only)\n\n\n\nExample\n\nG10\n\nRetracts filament according to settings of M207 (Marlin, RepRapFirmware) or according to the S value (Repetier).\n\nRepRapFirmware recognizes G10 as a command to set tool offsets and/or temperatures if the P parameter is present, and as a retraction command if it is absent.\n\n"
   },
   "G11":{
      "prefix":"G11",
      "body":"",
      "description":"G11: Unretract\n\nParameters\n\n`Snnn` retract length (S1 = long retract, S0 = short retract = default) (Repetier only)\n\n\n\nExample\n\nG11\n\nUnretracts/recovers filament according to settings of M208 (Marlin, RepRapFirmware) or according to the S value (Repetier).\n\n"
   },
   "G12":{
      "prefix":"G12",
      "body":"",
      "description":"G12: Clean Tool\n\nUsage\n\n[P<0|1>] [S<count>] [T<count>]\n\n`G12 Pnnn Snnn Tnnn `\n\n\n\nParameters\n\n`Pnnn`1 Pattern style selection\n\n`Snnn` Number of strokes (i.e. back-and-forth movements)\n\n`Tnnn` Number of repetitions\n\n`Ennn` 0=Never 1=Always apply software endstops (Marlin 2.0.6+)\n\n\n\nExamplesG12; stroke pattern (default)\n\nTo generate a three triangle zig-zag pattern which will be stroked three times time use the following command.\n\nG12 P1 S3 T2; zig-zag pattern with 2 triangles\n\n\n\nNotes1In Marlin firmware and Derivatives Mk4duo this is implemented by hard-coded firmware behaviours \n\nAs defined for variables NOZZLE_CLEAN_STROKES, NOZZLE_CLEAN_START_POINT, NOZZLE_CLEAN_END_POINT and NOZZLE_CLEAN_PARK.\n\nWith NOZZLE_CLEAN_PARK enabled, the nozzle will automatically return to the XYZ position after G12 is run.\n\nMore on this behaviour is documented inside of the code base.\n\nThe use of G12 for tool cleaning clashes with the established use of G12 for circular pocket milling on CNC machines. For this reason, RepRapFirmware does not support G12.\n\n"
   },
   "G17":{
      "prefix":"G17",
      "body":"",
      "description":"G17..19: Plane Selection (CNC specific)These codes set the current plane as follows:\n\n\n\n `G17`: XY (default)\n\n `G18`: ZX\n\n `G19`: YZ\n\nThis mode applies to G2/G3 arc moves. Normal arc moves are in the XY plane, and for most applications that's all you need. For CNC routing it can be useful to do small \"digging\" moves while making cuts, so to keep the G-code compact it uses G2/G3 arcs involving the Z plane.\n\nThese commands are supported in Marlin 1.1.4 and later with ARC_SUPPORT and CNC_WORKSPACE_PLANES enabled.\n\n"
   },
   "G18":{
      "prefix":"G18",
      "body":"",
      "description":"G17..19: Plane Selection (CNC specific)These codes set the current plane as follows:\n\n\n\n `G17`: XY (default)\n\n `G18`: ZX\n\n `G19`: YZ\n\nThis mode applies to G2/G3 arc moves. Normal arc moves are in the XY plane, and for most applications that's all you need. For CNC routing it can be useful to do small \"digging\" moves while making cuts, so to keep the G-code compact it uses G2/G3 arcs involving the Z plane.\n\nThese commands are supported in Marlin 1.1.4 and later with ARC_SUPPORT and CNC_WORKSPACE_PLANES enabled.\n\n"
   },
   "G19":{
      "prefix":"G19",
      "body":"",
      "description":"G17..19: Plane Selection (CNC specific)These codes set the current plane as follows:\n\n\n\n `G17`: XY (default)\n\n `G18`: ZX\n\n `G19`: YZ\n\nThis mode applies to G2/G3 arc moves. Normal arc moves are in the XY plane, and for most applications that's all you need. For CNC routing it can be useful to do small \"digging\" moves while making cuts, so to keep the G-code compact it uses G2/G3 arcs involving the Z plane.\n\nThese commands are supported in Marlin 1.1.4 and later with ARC_SUPPORT and CNC_WORKSPACE_PLANES enabled.\n\n"
   },
   "G20":{
      "prefix":"G20",
      "body":"",
      "description":"G20: Set Units to Inches\n\nExample\n\nG20\n\nUnits from now on are in inches. In RepRapFirmware, the inches/mm setting applies to regular printing and travel moves (G0, G1, G2 etc.) but not to configuration commands. Therefore configuration should be done in mm.\n\nWhen executing a macro file, RepRapFirmware remembers the initial inches/mm setting and restores it after execution of the macro has completed.\n\n"
   },
   "G21":{
      "prefix":"G21",
      "body":"",
      "description":"G21: Set Units to Millimeters\n\nExample\n\nG21\n\nUnits from now on are in millimeters. (This is the RepRap default.)\n\nIn RepRapFirmware, the inches/mm setting applies to regular printing and travel moves (G0, G1, G2 etc.) but not to configuration commands. Therefore configuration should be done in mm.\n\nWhen executing a macro file, RepRapFirmware remembers the initial inches/mm setting and restores it after execution of the macro has completed. So a macro file such as pause.g (executed when a pause command is received) can safely use G21 at the start to switch the units to mm without affecting the job after the macro completes, regardless of whether the job was using inches or mm.\n\n"
   },
   "G22":{
      "prefix":"G22",
      "body":"",
      "description":"G22: Firmware Retract\n\nUsage\n\n`G22; Do a retract move`Use this command (along with G23) to have the firmware to do retraction moves (in contrast to generating an E axis G1 move). The retract length and speed are set in the firmware.\n\n"
   },
   "G23":{
      "prefix":"G23",
      "body":"",
      "description":"G23: Firmware Recover\n\nUsage\n\n`G23; Do a recover move`Use this command (along with G22) to have the firmware to do a recover move. The recover length and speed are set in the firmware.\n\n"
   },
   "G26":{
      "prefix":"G26",
      "body":"",
      "description":"G26: Mesh Validation Pattern\n\nUsage\n\nG26 C P O2.25; Do a typical test sequence\n\nThe G26 Mesh Validation Pattern is designed to be used in conjunction with various Mesh Bed Leveling systems \u2013 those that adjust for an uneven \u2014rather than just tilted\u2014 bed. The G26 command prints a single layer pattern over the entire print bed, giving a clear indication of how accurately every mesh point is defined. G26 can be used to determine which areas of the mesh are less-than-perfect and how much to adjust each mesh point.\n\nG26 has large feature list, including a built-in test that extrudes material onto the bed. By default this is configured for PLA temperatures and a nozzle size of 0.4mm. (This will be adjustable in an upcoming version of Marlin.)\n\nSee the G26_Mesh_Validation_Tool.cpp file in the Marlin source code for full documentation of the G26 parameter list.\n\n"
   },
   "G27":{
      "prefix":"G27",
      "body":"",
      "description":"G27: Park toolheadPark the toolhead (i.e., nozzle) at a predefined XY position, with a Z raise value that applies over 0 or over the current position depending on the P parameter.\n\nIn Marlin this G-code is enabled by NOZZLE_PARK_FEATURE and the park position is defined by NOZZLE_PARK_POINT. See G27 Park Toolhead for details.\n\n\n\nUsage\n\nG27 P0; Park, raising Z by NOZZLE_PARK_Z_RAISE_MIN, using NOZZLE_PARK_POINT.z as a safe height over 0\n\nG27 P1; Park, raising Z to at least NOZZLE_PARK_POINT.z over 0\n\nG27 P2; Park, raising Z by NOZZLE_PARK_POINT.z over the current Z\n\n"
   },
   "G28":{
      "prefix":"G28",
      "body":"",
      "description":"G28: Move to Origin (Home)\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`X` Flag to go back to the X axis origin\n\n`Y` Flag to go back to the Y axis origin\n\n`Z` Flag to go back to the Z axis origin\n\n\n\nExamples\n\nG28    ; Home all axes (On Prusa i3 MK2/s,MK2.5/s,MK3/s it will also perform mesh bed leveling)2\n\nG28 X Z; Home the X and Z axes\n\nWhen the firmware receives this command, it quickly moves the specified axes (or all axes if none are given) to the endstops, backs away from each endstop by a short distance, and slowly bumps the endstop again to increase positional accuracy. This process, known as \"Homing\", is required to determine the position of the print carriage(s). Some firmware may even forbid movement away from endstops and other operations until the axes have been homed.\n\nThe X, Y, and Z parameters act only as flags. Any coordinates given are ignored. For example, G28Z10 results in the same behavior as G28Z. Delta printers cannot home individual axes, but must always home all three towers, so the X Y Z parameters are simply ignored on these machines.\n\nMarlin firmware (version 1.1.0 and later) provides an option called Z_SAFE_HOMING for printers that use a Z probe to home Z instead of an endstop. With this option, the XY axes are homed first, then the carriage moves to a position \u2013usually the middle of the bed\u2013 where it can safely probe downward to home Z.\n\nRepRapFirmware uses macro files to home either all axes or individual axes. If all axes are homed, the file homeall.g is processed. For individual axes the homex.g, homey.g, or homez.g file will be used. On Delta printers, G28 command will always home all three towers by processing the homedelta.g file, regardless of any X Y Z parameters.\n\nBecause the behavior of G28 is unspecified, it is recommended not to automatically include G28 in your ending G-code. On a Cartesian this will result in damaging the printed object. If you need to move the carriage at the completion of a print, use G0 or G1.\n\n\n\nNotes1 MK4duo has a B parameter that tells the printer to return to the coordinates it was at before homing.\n\n2 Original Prusa i3 MK2/s, MK2.5/s, MK3/s supports a W parameter to suppress mesh bed leveling.  If W is omitted, G28 will home only and NOT perform mesh bed leveling.\n\nOriginal Prusa i3 MK3/s (TMC2130 drivers) supports a C parameter to calibrate the X and Y home position.\n\n`W` Suppress mesh bed leveling (Prusa MK2/s, MK2.5/s and MK3/s only)2\n\n`C` Calibrate X and Y home position (Prusa MK3/s only)2"
   },
   "G29":{
      "prefix":"G29",
      "body":"",
      "description":"G29: Detailed Z-ProbeThis command uses a probe to measure the bed height at 3 or more points to determine its tilt and overall flatness. It then enables compensation so that the nozzle will remain parallel to the bed. The printer must be homed with G28 before using this command.\n\nEach firmware behaves differently and depends on the type of bed leveling that's been configured. For example, Marlin 1.0.2 provides 3 different types of automatic bed leveling (probe required) and a manual bed leveling option. See your firmware's documentation for the specific options available.\n\n\n\nUsage\n\n`G29`\n\n`G29 Snnn`\n\n\n\nParameters\n\n`Snnn` Firmware-dependent behavior\n\n`Pfile.csv` Optional file name for bed height map file (RepRapFirmware only)\n\n\n\nExamples\n\nG29   ; Probe the bed and enable compensation\n\nG29 S2; Special operation - see below\n\nG29 P1; UBL automated probe - see below\n\nG29 Auto Bed Leveling (Marlin - MK4duo)Marlin 1.0.2 and earlier provides three options for automatic bed leveling:\n\n\n\n The 3-point method probes the bed at three points to produce a matrix, adjusting for a flat but tilted bed.\n\n The planar grid method (non-Delta) probes a grid pattern to produce a matrix by the \"least-squares\" method, adjusting for a flat but tilted bed.\n\n The bilinear grid method (Delta only) probes a grid pattern to produce a mesh, using bilinear interpolation to adjust for an uneven bed.\n\nMarlin 1.1.0 and later allows the bilinear grid (i.e., \"mesh\") method to be used on all types of machines, not just deltas. This is the recommended leveling method going forward.\n\nAlso in Marlin 1.1.0 and later, the PROBE_MANUALLY option allows all forms of Auto Bed Leveling to be used without a probe. The procedure is similar to that of MESH_BED_LEVELING (see below). Begin the process with G29 to move the nozzle to the first point. Adjust the Z axis using G1 or your host software. Send G29 again to move to the next point and repeat until all points have been sampled.\n\n\n\nParameters\n\n`P` Set the size of the grid that will be probed (P x P points). Not supported by non-linear delta printer bed leveling. Example: `G29 P4`\n\n`S` Set the XY travel speed between probe points (in units/min)\n\n`D` Dry-Run mode. Just evaluate the bed Topology - Don't apply or clean the rotation Matrix. Useful to check the topology after a first run of G29.\n\n`V` Set the verbose level (0-4). Example: `G29 V3`\n\n`T` Generate a Bed Topology Report. Example: `G29 P5 T` for a detailed report. This is useful for manual bed leveling and finding flaws in the bed (to assist with part placement). Not supported by non-linear delta printer bed leveling.\n\n`F` Set the Front limit of the probing grid\n\n`B` Set the Back limit of the probing grid\n\n`L` Set the Left limit of the probing grid\n\n`R` Set the Right limit of the probing grid\n\nGlobal Parameters\n\n\n\n`E` By default `G29` will engage the Z probe, test the bed, then disengage. Include `E` or `E1` to engage/disengage the Z probe for each sample. (This has no effect for fixed probes.)G29 Unified Bed Leveling (Marlin - MK4duo)Marlin firmware (version 1.1.0 and later) includes the AUTO_BED_LEVELING_UBL option for Unified Bed Leveling. UBL combines mesh leveling, tilted plane adjustment, 3-point leveling, and manual editing tools all together in a single package. To accomplish so much, UBL overloads `G29` with several new parameters and provides an additional G26 Mesh Tuning feature.\n\nSee the MarlinFW website for a dedicated Unified Bed Leveling page and complete documentation on `G29` for UBL and `G26` Mesh Validation.\n\n\n\nG29 UBL Parameters (synopsis)\n\n\n\nA     Activate   Activate the Unified Bed Leveling system. (i.e., M420 S1)\n\nD     Disable    Disable the Unified Bed Leveling system. (i.e., M420 S0)\n\n\n\nB#    Business   Do Manual Probing in 'Business Card' mode.\n\nH#    Height     Height to raise the nozzle after each Manual Probe of the bed.\n\n\n\nC     Continue   Continue, Constant, or Current Location, depending on Phase.\n\nE     Every      Stow the probe after every sampled point.\n\nF#    Fade       Fade leveling compensation gradually, until it ceases at the given height.\n\nI#    Invalidate Invalidate a specified number of Mesh Points (X and Y).\n\nJ#    Grid       Do a grid (planar) leveling of the current Mesh using a grid with n points on a side.\n\nK#    Kompare    Compare (diff) current Mesh with stored Mesh #, replacing current Mesh with the result.\n\n\n\nL     Load       Load Mesh from the previously activated location in the EEPROM.\n\nL#    Load       Load Mesh from the specified location in the EEPROM.\n\nS     Store      Store the current Mesh in the Activated area of the EEPROM. Also save all settings.\n\nS #   Store      Store the current Mesh at the specified area in EEPROM, set as the Activated area.\n\nS -1  Store      Store the current Mesh as a print-out suitable to be fed back into the system.\n\n\n\nO     Map        Display the Mesh Map Topology.\n\n\n\nP0    Phase 0    Zero Mesh Data and turn off the Mesh Compensation System.\n\nP1    Phase 1    Invalidate the Mesh and do Automatic Probing to generate new Mesh data.\n\nP2    Phase 2    Probe unpopulated areas of the Mesh (those that couldn't be auto-probed).\n\nP3    Phase 3    Fill unpopulated Mesh points with a fixed value. No 'C' for \"smart fill\" extrapolation.\n\nP4    Phase 4    Fine tune the Mesh. ** Delta Mesh Compensation requires an LCD panel. **\n\nP5    Phase 5    Find Mean Mesh Height and Standard Deviation.\n\nP6    Phase 6    Shift Mesh height. All Mesh points are adjusted by the amount specified with 'C'.\n\n\n\nQ     Test       Load specified Test Pattern to help check system operation.\n\n\n\nR #   Repeat     Repeat the command the specified number of times. Default: grid points X * Y.\n\n\n\nT     3-Point    Perform a 3-Point Bed Leveling on the current Mesh.\n\n\n\nU     Unlevel    Perform a probe of the outer perimeter to assist in physically leveling the bed.\n\n\n\nW     What?      Print a report of Unified Bed Leveling stored data.\n\n\n\nX #              The X location for the command\n\nY #              The Y location for the command\n\n\n\nZ     Zero       Do a single probe to set the Z Height of the nozzle.\n\nZ #   Zero       Raise/lower the entire Mesh to conform with the specified difference (plus zprobe_zoffset).\n\nG29 Manual Bed Leveling (Marlin - MK4duo)Marlin firmware (version 1.0.2 and later) also provides a MESH_BED_LEVELING feature that can be used to perform bed leveling on machines lacking a probe. This form of bed leveling compensates for uneven Z height across the surface of the bed using a mesh and bilinear interpolation.\n\n\n\nManual Bed Leveling Usage\n\nG29 S1; Move to the first point and wait for a measurement\n\nG29 S2; Store the current Z, move to the next point\n\nG29 S3 Xn Yn Zn.nn; Modify the Z height of a single point\n\n\n\nOptions for the S parameter\n\n`S0` Produces a mesh report\n\n`S1` Start probing mesh points\n\n`S2` Probe the next mesh point\n\n`S3 Xn Yn Zn.nn` Manually modify a single point\n\n`S4 Zn.nn` Set z offset. Positive away from bed, negative closer to bed.G29 Auto Bed Leveling (Repetier-Firmware)Repetier firmware since v0.91 supports G29 with the optional Snnn parameter as described below. Useful to simply detect the Z bed angle so you can manually readjust your bed and get it as close to in plane as possible. If you wish to apply automatic software Z plane compensation on Repetier, use G32 instead with firmware 0.92.8 and above.\n\n`S0` Default value. Z bed heights are calculated at the measured points, relative to current Z position before issuing `G29`.\n\n`S1` Same as `S0`, except printer immediately moves to Z maximum position (Z max endstop required!), and calculates new Z maximum height. You must first issue `G28 Z` to home to Z maximum position before issuing `G29 Snnn` for this to work correctly, or the printer height will be invalid.\n\n`S2` Same as `S1`, except new calculated Z height is also stored to EEPROM.G29 Mesh Bed Compensation (RepRapFirmware)RepRapFirmware:\n\n`S0` (default if no `S` parameter) Probe the bed, save the height map in a file on the SD card, and activate the height map. The default folder for the height map file is `/sys` and the default file name is `heightmap.csv`.\n\n`S1` Load the height map from file and activate bed compensation. The default folder and filename as for `S0`.\n\n`S2` Clear the currently-loaded bed height mapTo define the grid, see M557.\n\nIn RepRapFirmware 3.2 and later, G29 runs macro file mesh.g if it exists, otherwise it behaves like G29 S0. The mesh.g file can perform other actions (e.g. homing or tool selection) and then use G29 S0 to do the probing.\n\n\n\nNotesIn Prusa Firmware G29 is not active by default, instead G81 is used.1\n\n"
   },
   "G30":{
      "prefix":"G30",
      "body":"",
      "description":"G30: Single Z-Probe\n\nUsage\n\n`G30 Pnnn Xnnn Ynnn Znnn Hnnn Snnn`\n\n\n\nParameters\n\n`Pnnn` Probe point number\n\n`Xnnn` X coordinate\n\n`Ynnn` Y coordinate\n\n`Znnn` Z coordinate\n\n`Hnnn` Height correction\n\n`Snnn` Set parameter\n\n\n\nExample\n\nG30\n\n\n\nExamples (RepRapFirmware)\n\nG30                         ; Probe the bed at the current XY position. When the probe is triggered, set the Z coordinate to the probe trigger height.\n\nG30 S-1                     ; Probe the bed at the current XY position. When the probe is triggered, do not adjust the Z coordinate.\n\nG30 P0 X20 Y50 Z-99999      ; Probe the bed at X20 Y50 and save the XY coordinates and the height error as point 0\n\nG30 P3 X180 Y180 Z-99999 S4 ; Probe the bed at X180 Y180, save the XY coordinates and the height error as point 3 and calculate 4-point compensation or calibration\n\nG30 P3 X180 Y180 Z-99999 S-1; As previous example but just report the height errors\n\nIn its simplest form probes bed at current XY location.\n\nRepRapFirmware supports additional behaviour: if a Pn field is specified the probed X, Y, and Z values are saved as point n on the bed for calculating the offset plane or for performing delta printer calibration. If X, Y, or Z values are specified (e.g. G30 P1 X20 Y50 Z0.3) then those values are used instead of the machine's current coordinates. A silly Z value (less than -9999.0) causes the machine to probe at the current point to get Z, rather than using the given value. If an S field is specified (e.g. G30 P1 Z0.3 S) the bed plane is computed for compensation and stored. The combination of these options allows for the machine to be moved to points using G1 commands, and then probe the bed, or for the user to position the nozzle interactively and use those coordinates. The user can also record those values and place them in a setup G-code file for automatic execution.\n\nRepRapFirmware uses the value of the S parameter to specify what computation to perform. If the value is -1 then the Z offsets of all the points probed are printed, but no calibration is done. If the value is zero or not present, then this specifies that the number of factors to be calibrated is the same as the number of points probed. Otherwise, the value indicates the number of factors to be calibrated, which must be no greater than the number of points probed. In version 1.09, the number of factors may be 3, 4 or 5 when doing auto bed compensation on a Cartesian or CoreXY printer, and 3, 4, 6 or 7 when doing auto calibration of a Delta printer.\n\nRepRapFirmware supports an optional H parameter, which is a height correction for that probe point. It allows for the Z probe having a trigger height that varies with XY position. The nominal trigger height of the Z probe (e.g. at bed centre) is declared in the Z parameter of the G31 command in the config.g file. When you probe using G30 and the probe triggers, the firmware will assume that the nozzle is at the nominal trigger height plus the value you have in the H parameter.\n\n1MK4duo Firmware support an optional parameter for Delta.\n\n\n\nUsage\n\n`G30 Xnnn Ynnn S Z P`\n\n\n\nParameters\n\n`Xnnn` X coordinate\n\n`Ynnn` Y coordinate\n\n`Sn`   Stows the probe if 1 (default=1)\n\n`Zn`   <bool> with a non-zero value will apply the result to current delta_height\n\n`Pn`   <bool> with a non-zero value will apply the result to current zprobe_zoffset\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.2\n\n"
   },
   "G31":{
      "prefix":"G31",
      "body":"",
      "description":"G31: Dock Z Probe sled\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G32":{
      "prefix":"G32",
      "body":"",
      "description":"G32: Undock Z Probe sled\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G33":{
      "prefix":"G33",
      "body":"",
      "description":"G33: Firmware dependentG33: Measure/List/Adjust Distortion Matrix (Repetier - Redeem)\n\nUsage\n\n`G33`\n\n`G33 Lnnn`\n\n`G33 Rnnn`\n\n`G33 Xnnn Ynnn Znnn`\n\n\n\nParameters\n\n`L0` List distortion matrix in a report\n\n`R0` Reset distortion matrix\n\n`X[pos] Y[pos] Z[zCorrection]` Set correction for nearest point\n\n\n\nExamples\n\nG33\n\nG33 R0\n\nWhen used with no parameters, G33 will measure a grid of points and store the distortion dips and valleys in the bed surface, and then enable software distortion correction for the first few or several layers. The values will be stored in EEPROM if enabled in firmware. You must previously have G28 homed, and your Z minimum/maximum height must be set correctly for this to work. Use the optional parameters to list, reset or modify the distortion settings. Distortion correction behavior can be later turned on or off by code M323.\n\nG33: Delta Auto Calibration (Marlin 1.1.x - MK4duo)End-stops and tower angle corrections are normalized (P0); \n\nPerforms a 1-4-7 point calibration of delta height (P1), end-stops, delta radius (P2) and tower angle corrections (P>=3) by a least squares iteration process based on the displacement method.\n\n\n\nUsage\n\n`G33`\n\n`G33 Pn T Cx.xx Fn Vn E`\n\n\n\nParameters\n\n`Pn` Number of probe points: n*n (n= 0-10), when P is omitted the default set in Configuration.h is used.\n\n`T` Do not calibrate tower angle corrections (if used with P>=3); do not use the probe points near the towers, but the probe points opposite to the towers (if used with P=2)\n\n`Cx.xx` Force the iterations to stop when a standard deviation from the zero plane less then x.xx mm is achieved; when C is omitted the iterations go on until the best possible standard deviation is reached.\n\n`Fn` Force to run at least n iterations (n=1-30) and take the best result\n\n`Vn` Verbose level: (n=0-3) 0 = dry run without calibration; 1(default) = settings at start and end; 2 = settings at all iterations; 3 = settings and probe results\n\n`E` Engage the probe for each point\n\n\n\nExamples\n\nG33: calibrates with the default settings.\n\nG33 Auto Calibrate\n\nChecking... AC\n\n.Height:297.77    Ex:+0.00  Ey:+0.00  Ez:+0.00    Radius:100.00\n\n.Tower angle:    Tx:+0.00  Ty:+0.00  Tz:+0.00\n\nIteration: 01                                    std dev:0.306\n\nIteration: 02                                    std dev:0.049\n\nIteration: 03                                    std dev:0.033\n\nIteration: 04                                    std dev:0.031\n\nCalibration OK                                    rolling back.\n\n.Height:297.69    Ex:-0.10  Ey:-0.12  Ez:+0.00    Radius:100.91\n\n.Tower angle:    Tx:-0.03  Ty:+0.25  Tz:+0.00\n\nSave with M500 and/or copy to Configuration.h\n\n\n\nG33 P6 V0: probes 36 points in dry run mode.\n\nG33 Auto Calibrate\n\nChecking... AC (DRY-RUN)\n\n.Height:297.77    Ex:+0.00  Ey:+0.00  Ez:+0.00    Radius:100.00\n\n.Tower angle:    Tx:+0.00  Ty:+0.00  Tz:+0.00\n\n.      c:+0.03     x:+0.32   y:+0.34   z:+0.41\n\n.                 yz:+0.37  zx:+0.32  xy:+0.17\n\nEnd DRY-RUN                                       std dev:0.306\n\n\n\nG33 P4 C0.05 T: probes 16 points and\n\n                 stops when a standard deviation of 0.05mm is reached;\n\n                 calibrates delta height, endstops and delta radius,\n\n                 leaves the tower angle corrections unaltered.\n\nG33 Auto Calibrate\n\nChecking... AC\n\n.Height:297.78    Ex:+0.00  Ey:+0.00  Ez:+0.00    Radius:100.00\n\nIteration: 01                                    std dev:0.317\n\nIteration: 02                                    std dev:0.059\n\nCalibration OK                                    std dev:0.042\n\n.Height:297.66    Ex:-0.17  Ey:-0.13  Ez:+0.00    Radius:100.91\n\nSave with M500 and/or copy to Configuration.h\n\n\n\nG33 P2: probes center and tower positions and\n\n         calibrates delta height, endstops and delta radius.\n\nG33 Auto Calibrate\n\nChecking... AC\n\n.Height:297.78    Ex:+0.00  Ey:+0.00  Ez:+0.00    Radius:100.00\n\nIteration: 01                                    std dev:0.374\n\nIteration: 02                                    std dev:0.054\n\nIteration: 03                                    std dev:0.007\n\nCalibration OK                                    rolling back.\n\n.Height:297.68    Ex:-0.14  Ey:-0.14  Ez:+0.00    Radius:101.23\n\nSave with M500 and/or copy to Configuration.h\n\n\n\nG33 P1: probes the center and calibrates the delta height only.\n\nG33 Auto Calibrate\n\nChecking... AC\n\n.Height:261.40                                Offset:+0.30\n\nCalibration OK                                std dev:0.000\n\n.Height:261.58                                Offset:+0.10\n\nSave with M500 and/or copy to Configuration.h\n\nnote: Height = delta height; Ex, Ey, Ez = end-stop corrections; Radius = delta radius; Tx, Ty, Tz = tower angular corrections; c, x, y, z, yz, zx, xy = probe results at center, towers and opposite to towers; std dev = standard deviation of the probe results towards the zero plane.\n\n"
   },
   "G34":{
      "prefix":"G34",
      "body":"",
      "description":"G34: Calculate Delta Height from toolhead position (DELTA)\n\nExample\n\nG34\n\nThe values specified are added to the calculated end stop position when the axes are referenced. The calculated value is derived from the distance of the toolhead from the current axis zero point.\n\nThe user would typically place the toolhead at the zero point of the axis and issue the G34 command.\n\nThis value can be saved to EEPROM using the M500 command.\n\n"
   },
   "G38.x":{
      "prefix":"G38.x",
      "body":"",
      "description":"G38.x Straight Probe (CNC specific)G38.2 probe toward workpiece, stop on contact, signal error if failureMonitors probe input while moving linearly towards the specified coordinates, stopping upon detecting contact or reaching specified coordinates.\n\n\n\nUsage\n\n`G38.2 Xnnn Ynnn Znnn Fnnn`\n\n\n\nParameters\n\n`Xnnn` target X coordinate\n\n`Ynnn` target Y coordinate\n\n`Znnn` target Z coordinate\n\n`Fnnn` Feedrate in mm/min\n\n\n\nExample\n\nG38.2 Z0\n\nG38.2 X50\n\nG38.2 Z10 Y10\n\nG38.3 probe toward workpiece, stop on contactG38.4 probe away from workpiece, stop on loss of contact, signal error if failureG38.5 probe away from workpiece, stop on loss of contact"
   },
   "G40":{
      "prefix":"G40",
      "body":"",
      "description":"G40: Compensation Off (CNC specific)G40 turns off cutter compensation. If tool compensation was on the next move must be a linear move and longer than the tool diameter. It is OK to turn compensation off when it is already off.\n\nhttp://www.linuxcnc.org/docs/2.5/html/gcode/tool_compensation.html\n\n"
   },
   "G42":{
      "prefix":"G42",
      "body":"",
      "description":"G42: Move to Grid PointG42 does a fast move in XY to any of the intersection points in the bed calibration grid. This is useful during calibration to align the nozzle or probe.\n\n\n\nParameters\n\n`Inn` Grid X index (zero-based). If omitted, the nearest latitude.\n\n`Jnn` Grid Y index (zero-based). If omitted, the nearest longitude.\n\n`P` Probe flag. Moves the probe to the grid point (instead of the nozzle).\n\n`Fnnn` Feedrate (mm/m)\n\n\n\nExample\n\nG42 I3 J4 P F3000; Move the probe to grid coordinate 3, 4\n\n"
   },
   "G53..59":{
      "prefix":"G53..59",
      "body":"",
      "description":"G53..59: Coordinate System Select (CNC specific)See linuxcnc.org for more help\n\nNot all builds of RepRapFirmware support these commands. For those that do (e.g. Duet WiFi/Ethernet and Duet 3), from firmware version 2.02 the workplace coordinate offsets are included in the data saved to config-override.g by the M500 command.\n\n"
   },
   "G60":{
      "prefix":"G60",
      "body":"",
      "description":"G60: save current position to slot\n\nUsage\n\n`G60 Snn`\n\n\n\nParameters\n\n`Snn` <nn> specifies memory slot # (0-based) to save into (default 0)Implementation in RepRapFirmware:\n\n\n\nSlots 0, 1 and 2 are available from RepRapFirmware 1.21, also slots 4 and 5 in RRF 2.02. When a print is paused the coordinates are saved to slot 1 automatically, and at the start of a tool change the coordinates are saved to slot 2 automatically. Use G0 or G1 with the R0, R1 or R2 parameter to move the current tool to a saved position.\n\n"
   },
   "G61":{
      "prefix":"G61",
      "body":"",
      "description":"G61: Apply/restore saved coordinates to the active extruder.\n\nUsage\n\n`G61 Xnnn Ynnn Znnn Ennn Fnnn Snn`\n\n\n\nParameters\n\n`Xnnn` X coordinate\n\n`Ynnn` Y coordinate\n\n`Znnn` Z coordinate\n\n`Ennn` E coordinate\n\n`Fnnn` F Set Feedrate\n\n`Snn`  S specifies memory slot # (0-based)"
   },
   "G75":{
      "prefix":"G75",
      "body":"",
      "description":"G75: Print temperature interpolationShow/print PINDA temperature interpolating.\n\n\n\nUsage\n\n`G75`"
   },
   "G76":{
      "prefix":"G76",
      "body":"",
      "description":"G76: PINDA probe temperature calibrationThis G-code is used to calibrate the temperature drift of the PINDA (inductive Sensor).\n\nThe PINDAv2 sensor has a built-in thermistor which has the advantage that the calibration can be done once for all materials.\n\nThe Original i3 Prusa MK2/s uses PINDAv1 and this calibration improves the temperature drift, but not as good as the PINDAv2.\n\n\n\n\n\nUsage\n\n`G76`\n\n`G76 B`1\n\n`G76 P`1\n\nParameters\n\n`B` Calibrate bed only 1\n\n`P` Calibrate probe only 1\n\nExample\n\nG76\n\n\n\necho PINDA probe calibration start\n\necho start temperature: 35.0\u00b0\n\necho ...\n\necho PINDA temperature -- Z shift (mm): 0.---\n\n\n\nNotes1Marlin requires PROBE_TEMP_COMPENSATION.\n\nThis process can take a very long time. The timeout is currently set to 15min to allow the parts to fully heat up and cool down.\n\nUse M500 to save the result to EEPROM.\n\nAt this moment it is only supported in Marlin bugfix-2.0.x branch.\n\n"
   },
   "G80":{
      "prefix":"G80",
      "body":"",
      "description":"G80: Mesh-based Z probeDefault 3x3 grid can be changed on MK2.5/s and MK3/s to 7x7 grid.\n\n\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`N` Number of mesh points on x axis. Default is 3. Valid values are 3 and 7.\n\n`R` Probe retries. Default 3 max. 10\n\n`V` Verbosity level 1=low, 10=mid, 20=high.It can be only used if firmware has been compiled with SUPPORT_VERBOSITY active.Using the following parameters enables additional \"manual\" bed leveling correction. Valid values are -100 microns to 100 microns.\n\n`L` Left Bed Level correct value in um.\n\n`R` Right Bed Level correct value in um.\n\n`F` Front Bed Level correct value in um.\n\n`B` Back Bed Level correct value in um."
   },
   "G81":{
      "prefix":"G81",
      "body":"",
      "description":"G81: Mesh bed leveling statusPrints mesh bed leveling status and bed profile if activated.\n\n\n\nUsage\n\n`G81`\n\nNotesEquivalent to M420 V in Marlin Firmware (and possibly G29 T depending on leveling system).\n\n"
   },
   "G82":{
      "prefix":"G82",
      "body":"",
      "description":"G82: Single Z probe at current locationWARNING! USE WITH CAUTION! If you'll try to probe where is no leveling pad, nasty things can happen!\n\n\n\nUsage\n\n`G82`\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G83":{
      "prefix":"G83",
      "body":"",
      "description":"G83: Babystep in Z and store to EEPROM\n\nUsage\n\n`G83`\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G84":{
      "prefix":"G84",
      "body":"",
      "description":"G84: UNDO Babystep Z (move Z axis back)\n\nUsage\n\n`G84`\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G85":{
      "prefix":"G85",
      "body":"",
      "description":"G85: Pick best babystep\n\nUsage\n\n`G85`\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "G86":{
      "prefix":"G86",
      "body":"",
      "description":"G86: Disable babystep correction after homeThis G-code will be performed at the start of a calibration script.\n\n\n\nUsage\n\n`G86`"
   },
   "G87":{
      "prefix":"G87",
      "body":"",
      "description":"G87: Enable babystep correction after homeThis G-code will be performed at the end of a calibration script.\n\n\n\nUsage\n\n`G87`"
   },
   "G88":{
      "prefix":"G88",
      "body":"",
      "description":"G88: Reserved\n\nUsage\n\n`G88`\n\nNotesThis G-code currently does not do anything.\n\n"
   },
   "G90":{
      "prefix":"G90",
      "body":"",
      "description":"G90: Set to Absolute Positioning\n\nExample\n\nG90\n\nAll coordinates from now on are absolute relative to the origin of the machine. (This is the RepRap default.)\n\n"
   },
   "G91":{
      "prefix":"G91",
      "body":"",
      "description":"G91: Set to Relative Positioning\n\nExample\n\nG91\n\nAll coordinates from now on are relative to the last position. Note: RepRapFirmware latest revision firmware uses M83 to set the extruder to relative mode: extrusion is NOT set to relative by ReprapFirmware on G91: only X,Y and Z are set to relative. By contrast, Marlin (for example) DOES also set extrusion to relative on a G91 command, as well as setting X, Y and Z.\n\n"
   },
   "G92":{
      "prefix":"G92",
      "body":"",
      "description":"G92: Set Position\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`Xnnn` new X axis position\n\n`Ynnn` new Y axis position\n\n`Znnn` new Z axis position\n\n`Ennn` new extruder position\n\n\n\nExample\n\nG92 X10 E90\n\nAllows programming of absolute zero point, by reseting the current position to the values specified. This would set the machine's X coordinate to 10, and the extrude coordinate to 90. No physical motion will occur.\n\nA G92 without coordinates will reset all axes to zero on some firmware. This does not apply to RepRapFirmware.\n\nG92.x: Reset Coordinate System Offsets (CNC specific)\n\nUsage\n\n`G92.1` - Reset axis offsets (and parameters 5211-5219) to zero. (`X Y Z A B C U V W`)\n\n`G92.2` - Reset axis offsets to zero"
   },
   "G93":{
      "prefix":"G93",
      "body":"",
      "description":"G93: Feed Rate Mode (Inverse Time Mode) (CNC specific)G93 is Inverse Time Mode. In inverse time feed rate mode, an F word means the move should be completed in (one divided by the F number) minutes.\n\nFor example, F2.0 means the move should be completed in a half a minute.\n\nWhen the inverse time feed rate mode is active, an F word must appear on every line which has a G1, G2, or G3 motion, and an F word on a line that does not have G1, G2, or G3 is ignored. Being in inverse time feed rate mode does not affect G0 (rapid move) motions.\n\n"
   },
   "G94":{
      "prefix":"G94",
      "body":"",
      "description":"G94: Feed Rate Mode (Units per Minute) (CNC specific)G94 is Units per Minute Mode. In units per minute feed mode, an F word is interpreted to mean the controlled point should move at a certain number of inches per minute, millimeters per minute, or degrees per minute, depending upon what length units are being used and which axis or axes are moving.\n\n"
   },
   "G98":{
      "prefix":"G98",
      "body":"",
      "description":"G98: Activate farm modeEnable Prusa-specific Farm functions and g-code.\n\n\n\nUsageG98\n\n\n\nNotesSet of internal Prusa commands\n\nPRUSA [ Ping | PRN | FAN | fn | thx | uvlo | fsensor_recover | MMURES | RESET | fv | M28 | SN | Fir | Rev | Lang | Lz | Beat | FR ]\n\n\n\n\n\nParameters\n\n`Ping`\n\n`PRN`                    Prints revision of the printer.\n\n`FAN`                    Prints fan details.\n\n`fn`                     Prints farm number.\n\n`thx`\n\n`uvlo`                   Resets UVLO aka Power Panic and continues SD print.\n\n`fsensor_recover`        Filament sensor recover - restore print and continue.\n\n`MMURES`                 Reset MMU.\n\n`Reset`                  Resets Printer.\n\n`fv`                    ??? get file version.???\n\n`M28`                    M28 write to SD.\n\n`SN`                     Get serial number from 32U2 processor. Typical format of S/N is:CZPX0917X003XC13518\n\n`Fir`                    Prints firmware version.\n\n`Rev`                    Prints filament size, elelectronics, nozzle type.\n\n`Lang`                   Reset the language.\n\n`Lz`                    ??? maybe resets Live Z values to 0???\n\n`Beat`                   Kick farm link timer.\n\n`FR`                     Full factory reset.\n\n`nozzle set 'diameter' ` Set nozzle diameter.\n\n`nozzle D'diameter'`     Check nozzle diameter.\n\n`nozzle`                 Print nozzle diameter"
   },
   "G99":{
      "prefix":"G99",
      "body":"",
      "description":"G99: Deactivate farm mode\n\nUsageG99\n\n"
   },
   "G100":{
      "prefix":"G100",
      "body":"",
      "description":"G100: Calibrate floor or rod radius\n\nParameters\n\n`X` Flag to set floor for X axis\n\n`Y` Flag to set floor for Y axis\n\n`Z` Flag to set floor for Z axis\n\n`Rnnn` Radius to add\n\n\n\nExamples\n\nG100 X Y Z; set floor for argument passed in. Number ignored and may be absent.\n\nG100 R5   ; Add 5 to radius. Adjust to be above floor if necessary\n\nG100 R0   ; Set radius based on current z measurement. Moves all axes to zero\n\n"
   },
   "G130":{
      "prefix":"G130",
      "body":"",
      "description":"G130: Set digital potentiometer value\n\nExample\n\nG130 X10 Y18 Z15 A20 B12\n\nSet the digital potentiometer value for the given axes. This is used to configure the current applied to each stepper axis. The value is specified as a value from 0-127; the mapping from current to potentimeter value is machine specific.\n\n"
   },
   "G131":{
      "prefix":"G131",
      "body":"",
      "description":"G131: Remove offset"
   },
   "G132":{
      "prefix":"G132",
      "body":"",
      "description":"G132: Calibrate endstop offsets"
   },
   "G133":{
      "prefix":"G133",
      "body":"",
      "description":"G133: Measure steps to top"
   },
   "G161":{
      "prefix":"G161",
      "body":"",
      "description":"G161: Home axes to minimum\n\nParameters\n\n`X` Flag to home the X axis to its minimum position\n\n`Y` Flag to home the Y axis to its minimum position\n\n`Z` Flag to home the Z axis to its minimum position\n\n`Fnnn` Desired feedrate for this command\n\n\n\nExample\n\nG161 X Y Z F1800\n\nInstruct the machine to home the specified axes to their minimum position. Similar to G28, which decides on its own in which direction to search endstops.\n\n"
   },
   "G162":{
      "prefix":"G162",
      "body":"",
      "description":"G162: Home axes to maximum\n\nParameters\n\n`X` Flag to home the X axis to its maximum position\n\n`Y` Flag to home the Y axis to its maximum position\n\n`Z` Flag to home the Z axis to its maximum position\n\n`Fnnn` Desired feedrate for this command\n\n\n\nExample\n\nG162 X Y Z F1800\n\nInstruct the machine to home the specified axes to their maximum position.\n\n"
   },
   "G425":{
      "prefix":"G425",
      "body":"",
      "description":"G425: Perform auto-calibration with calibration cubeThis performs an automatic calibration of backlash, positional errors and nozzle offset by\n\ntouching the nozzle on the sides of a bed mounted, electrically conductive cube, washer or bolt.\n\n\n\nParameters\n\n`B` Perform calibration of backlash only.\n\n`Tnnn` Perform calibration of toolhead only.\n\n`V` Probe cube and print position, error, backlash and hotend offset.\n\n`Unnn` Uncertainty, how far to start probe away from the cube (mm)\n\nExamples (Marlin)\n\nG425               ; Perform full calibration sequence\n\nT1                 ; Switch to second nozzle\n\nG425 V             ; Validate by showing report for T1\n\nT0                 ; Switch to second nozzle\n\nG425 V             ; Validate by showing report for T0\n\n"
   },
   "M0":{
      "prefix":"M0",
      "body":"",
      "description":"M0: Stop or Unconditional stop\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`Pnnn` Time to wait, in milliseconds1\n\n`Snnn` Time to wait, in seconds2\n\n\n\nExample\n\nM0\n\nThe RepRap machine finishes any moves left in its buffer, then shuts down. All motors and heaters are turned off. It can be started again by pressing the reset button on the master microcontroller, although this step is not mandatory on RepRapFirmware. See also M1, M112.\n\nThe Marlin Firmware does wait for user to press a button on the LCD, or a specific time. \"M0 P2000\" waits 2000 milliseconds, \"M0 S2\" waits 2 seconds.\n\nRepRapFirmware executes cancel.g if this file is present, if the print is paused and if the axes are homed. Otherwise stop.g is run and the drives are put into idle mode. Also the heaters are turned off if no 'H1' parameter is specified.\n\n\n\nNotes1Not available in RepRapFirmware, but as a work-around G4 can be run before M0.\n\n2Only available on Marlin and Prusa Firmware.\n\n3\"Wait for user ...\" is shown on LCD in Prusa Firmware.\n\n"
   },
   "M1":{
      "prefix":"M1",
      "body":"",
      "description":"M1: Sleep or Conditional stop\n\nExample\n\nM1\n\nThe RepRap machine finishes any moves left in its buffer, then shuts down. All motors and heaters are turned off. It can still be sent G and M codes, the first of which will wake it up again. See also M0, M112.\n\nThe Marlin and Prusa Firmware do the same as M0.\n\nIf Marlin is emulated in RepRapFirmware, this does the same as M25 if the code was read from a serial or Telnet connection, else the macro file sleep.g is run before all heaters and drives are turned off.\n\n"
   },
   "M2":{
      "prefix":"M2",
      "body":"",
      "description":"M2: Program End\n\nExample\n\nM2\n\nTeacup firmware does the same as M84.\n\n"
   },
   "M3":{
      "prefix":"M3",
      "body":"",
      "description":"M3: Spindle On, Clockwise  (CNC specific)\n\nParameters\n\n`Snnn` Spindle RPM\n\n\n\nExample\n\nM3 S4000\n\nThe spindle is turned on with a speed of 4000 RPM.\n\nTeacup firmware turn extruder on (same as M101).\n\nRepRapFirmware interprets this code only if in CNC mode (M453), in laser mode (M452) or if a Roland mill has been configured. You must always provide an S parameter with this command to specify the required spindle speed pr laser power. In RepRapFirmware 2.05RC2 and later, and RepRapFirmware 3.0beta13 and later, in laser mode (M452) the laser will only fire during G1/G2/G2 moves.\n\nIn Repetier-Firmware in laser mode you need S0..S255 to set laser intensity. Normally you use S255 to turn it on full power for moves. Laser will only fire during G1/G2/G3 moves and in laser mode (M452).\n\n"
   },
   "M4":{
      "prefix":"M4",
      "body":"",
      "description":"M4: Spindle On, Counter-Clockwise (CNC specific)\n\nExample\n\nM4 S4000\n\nThe spindle is turned on with a speed of 4000 RPM.\n\n"
   },
   "M5":{
      "prefix":"M5",
      "body":"",
      "description":"M5: Spindle Off (CNC specific)\n\nExample\n\nM5\n\nThe spindle is turned off.\n\nTeacup firmware turn extruder off (same as M103).\n\n"
   },
   "M6":{
      "prefix":"M6",
      "body":"",
      "description":"M6: Tool change\n\nExample\n\nM6\n\n"
   },
   "M7":{
      "prefix":"M7",
      "body":"",
      "description":"M7: Mist Coolant On (CNC specific)\n\nExample\n\nM7\n\nMist coolant is turned on (if available)\n\nTeacup firmware turn on the fan, and set fan speed (same as M106).\n\n"
   },
   "M8":{
      "prefix":"M8",
      "body":"",
      "description":"M8: Flood Coolant On (CNC specific)\n\nExample\n\nM8\n\nFlood coolant is turned on (if available)\n\n"
   },
   "M9":{
      "prefix":"M9",
      "body":"",
      "description":"M9: Coolant Off (CNC specific)\n\nExample\n\nM9\n\nAll coolant systems are turned off.\n\n"
   },
   "M10":{
      "prefix":"M10",
      "body":"",
      "description":"M10: Vacuum On (CNC specific)\n\nExample\n\nM10\n\nDust collection vacuum system turned on.\n\n"
   },
   "M11":{
      "prefix":"M11",
      "body":"",
      "description":"M11: Vacuum Off (CNC specific)\n\nExample\n\nM11\n\nDust collection vacuum system turned off.\n\n"
   },
   "M13":{
      "prefix":"M13",
      "body":"",
      "description":"M13: Spindle on (clockwise rotation) and coolant on (flood)This one M-code does the work of both M03 and M08. It is not unusual for specific machine models to have such combined commands, which make for shorter, more quickly written programs.\n\n\n\nExample\n\nM13\n\n"
   },
   "M16":{
      "prefix":"M16",
      "body":"",
      "description":"M16: Expected Printer CheckDo a case-sensitive comparison between the string argument and the configured MACHINE_NAME. If the machine name doesn't match, halt the printer so that a reset is required. This safety feature is meant to prevent G-code sliced for a specific machine from being used on any other machine. In Marlin this feature is enabled with EXPECTED_PRINTER_CHECK.\n\n\n\nExample\n\nM16 Cookie Monster\n\n"
   },
   "M17":{
      "prefix":"M17",
      "body":"",
      "description":"M17: Enable/Power all stepper motors\n\nParameters\n\nThis command can be used without any additional parameters.1\n\n`X` X axis\n\n`Y` Y axis\n\n`Z` Z axis\n\n`E` All extruders\n\nExample\n\nM17\n\nM17 X E0\n\n\n\nPowers on stepper motors.\n\n\n\nNotes1Ability to specify axes was added to Marlin 2.0 and may not be available on other firmware implementations.\n\n"
   },
   "M18":{
      "prefix":"M18",
      "body":"",
      "description":"M18: Disable all stepper motors\n\nParameters\n\nThis command can be used without any additional parameters.13\n\n`X` X axis\n\n`Y` Y axis\n\n`Z` Z axis\n\n`E` Extruder drive(s)2\n\n`S` Seconds3\n\n\n\nExamples\n\nM18\n\nM18 X E0\n\nDisables stepper motors and allows axes to move 'freely.'\n\nOn Marlin, M18 is a synonym of M84, so it can also be used to configure or disable the idle timeout.\n\n\n\nExamples\n\nM18 S10 ; Idle steppers after 10 seconds of inactivity\n\nM18 S0  ; Disable idle timeout\n\n\n\nNotes1Some firmware implementations do not support parameters to be passed, but at least Marlin and RepRapFirmware do.\n\n2RepRapFirmware allows stepper motors to be disabled selectively. For example, M18 X E0:2 will disable the X, extruder 0 and extruder 2 motors.\n\n3In Prusa Firmware this command can be used to set the stepper inactivity timeout (`S`) or to disable steppers (`X`,`Y`,`Z`,`E`)\n\n"
   },
   "M20":{
      "prefix":"M20",
      "body":"",
      "description":"M20: List SD card\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`Snnn` Output style1\n\n`Rnnn` File number to start at1\n\n`P\"ddd\"` Directory to list2\n\n`L` Reports long filenames instead of just short filenames. Requires host software parsing (Cap:EXTENDED_M20).4\n\n`T` Report timestamps as well. The value is one uint32_t encoded as hex. Requires host software parsing (Cap:EXTENDED_M20).4\n\nExamples\n\nM20\n\nM20 S2 P\"/gcodes/subdir\"\n\nM20 L 4\n\nM20 T 4\n\nThis code lists all files in the root folder or G-code directory of the SD card to the serial port. One name per line, like:\n\n\n\nSQUARE.G\n\nSQCOM.G\n\nZCARRI~2.GCO\n\nCARRIA~1.GCO\n\nPlease note that a file list response is usually encapsulated. Standard configurations of RepRapFirmware mimic this style in emulation mode:\n\n\n\nBegin file list:\n\nSQUARE.G\n\nZCARRI~2.GCO\n\nEnd file list\n\nok\n\nThe file size may be appended as an integer representing the size in bytes:\n\n\n\nBegin file list:\n\nSQUARE.G 1234\n\nZCARRI~2.GCO 234\n\nEnd file list \n\nok\n\nAt least OctoPrint also supports an additional format showing the file's long name (see also M33) after the size:\n\n\n\nBegin file list:\n\nSQUARE.G 1234 SQUARE.G\n\nZCARRI~2.GCO 234 ZCARRIAGE_V2.GCO\n\nEnd file list \n\nok\n\nIf RepRapFirmware emulates no firmware compatibility, a typical response looks like:\n\n\n\nG-code files:\n\n\"Traffic cone.g\",\"frog.gcode\",\"calibration piece.g\"\n\nNote that some firmwares list file names in upper case, but - when sent to the M23 command (below) they must be in lower case. Teacup and RepRapFirmware have no such trouble and accept both. RepRapFirmware always returns long filenames in the case in which they are stored.\n\n\n\nNotes1If the S2 parameter is used on RepRapFirmware, then the file list (or as much as can be fitted in the output buffer) is returned in JSON format as a single array called \"files\" with each name that corresponds to a subdirectory preceded by an asterisk, and the directory is returned in variable \"dir\". The optional R parameter is the file number to start at, default 0. The JSON response also returns value \"next\" which is the number of the first file that wasn't returned, or 0 if all files were returned. The caller can enumerate all files even if there are very many by making successive M20 S2 calls with each call using R from the \"next\" value in the previous response, util \"next\" is zero.\n\n\n\nExample\n\nM20 S2 P/gcodes\n\n{\"dir\":\"\\/gcodes\",\"first\":0,\"files\":[\"4-piece-1-2-3-4.gcode\",\"Hinged_Box.gcode\",\"Hollow_Dodecahedron_190.gcode\",\"*Calibration pieces\"],\"next\":0}\n\n\n\nExample for M20 L4\n\nBegin file list\n\nTEST1.GCO 1234 \"TEST1.GCO\"\n\nDIR_ENTER: /TESTFO~1/ \"test folder\"\n\nDIR_EXIT\n\nLFNFIL~1.GCO 56789 \"LFN file.gcode\"\n\nEnd file list\n\n\n\nExample for M20 L T4\n\nBegin file list\n\nTEST1.GCO 1234 0x52936b00 \"TEST1.GCO\"\n\nDIR_ENTER: /TESTFO~1/ \"test folder\"\n\nDIR_EXIT\n\nLFNFIL~1.GCO 56789 0x52936b08 \"LFN file.gcode\"\n\nEnd file list\n\n\n\n\n\nExample for M20 T4\n\nBegin file list\n\nTEST1.GCO 1234 0x52936b00\n\nDIR_ENTER: /TESTFO~1/ \"test folder\"\n\nDIR_EXIT\n\nLFNFIL~1.GCO 56789 0x52936b08\n\nEnd file list\n\n2This parameter is only supported by RepRapFirmware and defaults to the 0:/gcodes directory, which is the directory that printable gcode files are normally stored in.\n\n3On Klipper, a virtual SD card is required for this to work.\n\n4The timestamp is a combination of both the date and time into a single integer and printed as a hex.\n\n"
   },
   "M21":{
      "prefix":"M21",
      "body":"",
      "description":"M21: Initialize SD card\n\nParameters\n\n`Pnnn` SD card number (RepRapFirmware only, default 0)\n\n\n\nExamples\n\nM21\n\nM21 P1\n\nThe specified SD card is initialized. If an SD card is loaded when the machine is switched on, this will happen by default. SD card must be initialized for the other SD functions to work.\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M22":{
      "prefix":"M22",
      "body":"",
      "description":"M22: Release SD card\n\nParameters\n\n`Pnnn` SD card number (RepRapFirmware only, default 0)\n\n\n\nExamples\n\nM22\n\nM22 P1\n\nThe specified SD card is released, so further (accidental) attempts to read from it are guaranteed to fail. Helpful, but not mandatory before removing the card physically.\n\n"
   },
   "M23":{
      "prefix":"M23",
      "body":"",
      "description":"M23: Select SD file\n\nExample\n\nM23 filename.gco\n\nThe file specified as filename.gco (8.3 naming convention is supported) is selected ready for printing. RepRapFirmware supports long filenames as well as 8.3 format.\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M24":{
      "prefix":"M24",
      "body":"",
      "description":"M24: Start/resume SD print\n\nExample\n\nM24\n\nThe machine prints from the file selected with the M23 command. If the print was previously paused with M25, printing is resumed from that point. To restart a file from the beginning, use M23 to reset it, then M24.\n\nWhen this command is used to resume a print that was paused, RepRapFirmware runs macro file resume.g prior to resuming the print.\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M25":{
      "prefix":"M25",
      "body":"",
      "description":"M25: Pause SD print\n\nExample\n\nM25\n\nThe machine pauses printing at the current position within the file. To resume printing, use M24. Do not use this code within a GCode file to pause the print at that point, use M226 instead.\n\nPrior to pausing, RepRapFirmware runs macro file pause.g. This allows the head to be moved away from the print, filament to be retracted, etc.\n\nRepRapFirmware 1.20 and later also save the current state of the print to file /sys/resurrect.g. This is so that if the printer is turned off after pausing, the print can subsequently be resumed.\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M26":{
      "prefix":"M26",
      "body":"",
      "description":"M26: Set SD position\n\nParameters\n\n`Snnn` File position from start of file in bytes\n\n`Pnnn` (Optional, RepRapFirmware only) Proportion of the first move to be skipped, default 0.0, must be less than 1.0\n\n\n\nExample\n\nM26 S49315Set the file offset in bytes from the start of the SD card file selected by M23. The offset must correspond to the start of a G-code command.\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M27":{
      "prefix":"M27",
      "body":"",
      "description":"M27: Report SD print status\n\n Parameters\n\n C Report the open file's name and long name (Marlin 1.1.9 and up)\n\n Sn Set the auto-report interval (Marlin 1.1.9 and up)\n\nExample\n\nM27\n\nReport SD print status.\n\nMarlin and RepRapFirmware report the number of bytes processed in this format, which can be processed by Pronterface:\n\n\n\nSD printing byte 2134/235422\n\nIf no file is being printed, only this message is reported:\n\n\n\nNot SD printing.\n\nIn Marlin 1.1.9 and up M27 C reports the open file's DOS 8.3 name and long filename, if any.\n\n\n\nExample\n\nM27 C\n\n\n\nCurrent file: filena~1.gco Filenagotcha.gcode\n\nIn Marlin 1.1.9 and up M27 Sn sets the auto-report interval. This requires the AUTO_REPORT_SD_STATUS configuration option to be enabled. Marlin reports this capability in M115 as Cap: AUTO_REPORT_SD_STATUS 1 when this option is available.\n\n\n\nExample\n\nM27 S2; Report the SD card status every 2 seconds\n\n\n\nNotes1On Klipper, a virtual SD card is required for this to work.\n\n"
   },
   "M28":{
      "prefix":"M28",
      "body":"",
      "description":"M28: Begin write to SD card\n\nExample\n\nM28 filename.gco\n\nFile specified by filename.gco is created (or overwritten if it exists) on the SD card and all subsequent commands sent to the machine are written to that file.\n\n"
   },
   "M29":{
      "prefix":"M29",
      "body":"",
      "description":"M29: Stop writing to SD card\n\nExample\n\nM29 filename.gco\n\nFile opened by M28 command is closed, and all subsequent commands sent to the machine are executed as normal.\n\n"
   },
   "M30":{
      "prefix":"M30",
      "body":"",
      "description":"M30: Delete a file on the SD card\n\nExample\n\n> M30 filename.gco\n\n> filename.gco is deleted.\n\nM30:  Program Stop- For Yaskawa and in grbl  \n\n- Same as M2 in Yaskawa G-code\n\n\n\nExampleM30; Exchange pallet shuttles and end the program. Pressing cycle start will start the program at the beginning of the file.\n\n"
   },
   "M31":{
      "prefix":"M31",
      "body":"",
      "description":"M31: Output time since last M109 or SD card start to serial\n\nExample\n\nM31\n\nThe response looks like:\n\n\n\n echo:54 min, 38 sec\n\n"
   },
   "M32":{
      "prefix":"M32",
      "body":"",
      "description":"M32: Select file and start SD print\n\nExample\n\nM32 filename.gco\n\nIt can be used when printing from SD card and does the same as M23 and M24.\n\ntba   available in marlin(14/6/2014)\n\n"
   },
   "M33":{
      "prefix":"M33",
      "body":"",
      "description":"M33: Stop and Close File and save restart.gcodeStop the printing from SD and save all position in restart.gcode for restart printing in future\n\n"
   },
   "M34":{
      "prefix":"M34",
      "body":"",
      "description":"M34: Set SD file sorting optionsEnable and disable SD card file-sorting, and/or set the folder sorting order. Proposed by Marlin firmware, May 2015.\n\n"
   },
   "M35":{
      "prefix":"M35",
      "body":"",
      "description":"M35: Upload firmware NEXTION from SD"
   },
   "M36":{
      "prefix":"M36",
      "body":"",
      "description":"M36: Return file information\n\nExample\n\nM36 filename.gco\n\nReturns information for the specified SD card file in JSON format. A sample response is:\n\n{\"err\":0,\"size\":436831,\"lastModified\":\"2017-09-21T16:58:07\",\"height\":5.20,\"firstLayerHeight\":0.20,\"layerHeight\":0.20,\"printTime\":660,\"simulatedTime\":1586,\"filament\":[1280.7],\"generatedBy\":\"Simplify3D(R) Version 4.0.0\"}\n\nThe \"err\" field is zero if successful, nonzero if the file was not found or an error occurred while processing it. The \"size\" field should always be present if the operation was successful. The presence or absence of other fields depends on whether the corresponding values could be found by reading the file. The \"filament\" field is an array of the filament lengths required from each spool. The size is in bytes, the times are in seconds, all other values are in mm. 'printTime' is the printing time estimated by the slicer, 'simulationTime' is the time measured when the print was simulated by the firmware. The fields may appear in any order, and additional fields may be present.\n\nIf the file name parameter is not supplied and a file on the SD card is currently being printed, then information for that file is returned including additional field \"fileName\". This feature is used by the web interface and by PanelDue, so that if a connection is made when a file is already being printed, the name and other information about that file can be shown.\n\n"
   },
   "M37":{
      "prefix":"M37",
      "body":"",
      "description":"M37: Simulation mode\n\n Parameters\n\n S1 Enter simulation mode\n\n S0 Leave simulation mode\n\n P\"filename\" (optional) Simulate printing a file from SD card\n\n\n\n Examples\n\n M37 S1\n\n M37 P\"MyModel.g\"Used to switch between printing mode and simulation mode. Simulation mode allows the electronics to compute an accurate printing time, taking into account the maximum speeds, accelerations etc. that are configured.\n\nM37 S1 enters simulation mode. All G and M codes will not be acted on, but the time they would take to execute will be calculated.\n\nM37 S0 leaves simulation mode and prints the total time taken by simulated moves since entering simulation mode.\n\nM37 with no S parameter prints the time taken by the simulation, from the time it was first entered using M37 S1, up to the current point (if simulation mode is still active) or the point that the simulation was ended (if simulation mode is no longer active).\n\nM37 P\"filename\" enters simulation mode, prints the specified file, exits simulation mode, reports the print time, and appends it to the G-code file as a comment for later retrieval.\n\n"
   },
   "M38":{
      "prefix":"M38",
      "body":"",
      "description":"M38 Compute SHA1 hash of target fileUsed to compute a hash of a file on the SD card. Examples:\n\n\n\n> M38 gcodes/myfile.g\n\n> Cannot find file\n\n> M38 www/reprap.htm\n\n> 91199139dbfadac15a18cfb962dfd4853db83999\n\nReturns a hexadecimal string which is the SHA1 of the file. If the file cannot be found, then the string \"Cannot find file\" is returned instead.\n\n"
   },
   "M39":{
      "prefix":"M39",
      "body":"",
      "description":"M39 Report SD card information\n\nParameters\n\nPn SD slot number, default 0\n\nSn Response format. S0 returns a plain text response, S2 returns a response in JSON format.\n\n\n\nExamples\n\nM39  ; report information for SD card 0 in plain text format\n\nM39 P1 S2; report information for SD card 1 in JSON formatThis command returns information about the SD card in the specified slot in the requested format. At least the following is returned:\n\n\n\n Whether or not a usable card is present in the slot\n\n The capacity of the card in bytes (if a card is present)\n\n The amount of free space on the card in bytes (if a card is present)\n\nThe JSON response has the following format (more fields may be added in future):\n\n\n\n{\"SDinfo\":{\"slot\":0,\"present\":1,\"capacity\":4294967296,\"free\":2147485184,\"speed\":20971520,\"clsize\":32768}}\n\nThe capacity, free space and cluster size are in bytes, and the interface speed is in bytes/second.\n\n"
   },
   "M40":{
      "prefix":"M40",
      "body":"",
      "description":"M40: EjectIf your RepRap machine can eject the parts it has built off the bed, this command executes the eject cycle. This usually involves cooling the bed and then performing a sequence of movements that remove the printed parts from it. The X, Y and Z position of the machine at the end of this cycle are undefined (though they can be found out using the M114 command, q.v.).\n\nSee also M240 and M241 below.\n\n"
   },
   "M41":{
      "prefix":"M41",
      "body":"",
      "description":"M41: Loop\n\nExample\n\nM41\n\nIf the RepRap machine was building a file from its own memory such as a local SD card (as opposed to a file being transmitted to it from a host computer) this goes back to the beginning of the file and runs it again. So, for example, if your RepRap is capable of ejecting parts from its build bed then you can set it printing in a loop and it will run and run. Use with caution - the only things that will stop it are:\n\n When you press the reset button,\n\n When the build material runs out (if your RepRap is set up to detect this), and\n\n When there's an error (such as a heater failure)."
   },
   "M42":{
      "prefix":"M42",
      "body":"",
      "description":"M42: Switch I/O pin\n\nParameters\n\n`Pnnn` Pin number\n\n`Snnn` Pin value\n\n\n\nExample\n\nM42 P7 S255\n\nM42 switches a general purpose I/O pin. Use M42 Px Sy to set pin x to value y, when omitting Px the LEDPIN will be used.\n\nIn Teacup, general purpose devices are handled like a heater, see  M104.\n\nIn Marlin Firmware, pin numbers for 32-bit processors are in the form PORT * 100 + PIN. So pin P1_02 on LPC1768 can be set with M42 P102 S1.\n\nMarlin 1.x includes an I parameter to permit setting \"volatile\" pins that Marlin is using.\n\nMarlin 2.0.5.2 and up include the M parameter to set the pin mode: 0=INPUT, 1=OUTPUT, 2=INPUT_PULLUP, 3=INPUT_PULLDOWN.\n\nIn RepRapFirmware, the S field may be in the range 0..1 or 0..255. The pin reference is an internal firmware reference named \"digital pin\", see Duet pinout. It maps on different connector pins depending the hardware. On Duet 0.6 and 0.8.5 hardware using pre-1.16 firmware, the supported pin numbers and their names on the expansion connector are:\n\n\n\n Duet M42 P value to Expansion Port Pin Mapping\n\n\n\n\n\n P\n\n\n\n Name\n\n\n\n Expansion Port Pin\n\n\n\n\n\n16\n\nTXD1\n\n11\n\n\n\n\n\n17\n\nRXD1\n\n12\n\n\n\n\n\n18\n\nTXD0\n\n13\n\n\n\n\n\n19\n\nRXD0\n\n14\n\n\n\n\n\n20\n\nTWD1\n\n35\n\n\n\n\n\n21\n\nTWCK1\n\n36\n\n\n\n\n\n23\n\nPA14\n\n10\n\n\n\n\n\n36\n\nPC4\n\n18\n\n\n\n\n\n52\n\nAD14\n\n41\n\n\n\n\n\n67\n\nPB16\n\n32\n\nIn firmware 1.16, the pin numbering has changed.\n\n\n\n Duet 0.6 and 0.8.5 v1.16+ M42 P value to Expansion Port Pin Mapping\n\n\n\n\n\n P\n\n\n\n Name\n\n\n\n Expansion Port Pin\n\n\n\n\n\n60\n\nPA10/RXD0\n\n14\n\n\n\n\n\n61\n\nPA11/TXD0\n\n13\n\n\n\n\n\n62\n\nPA12/RXD1\n\n12\n\n\n\n\n\n63\n\nPA13/TXD1\n\n11\n\n\n\n\n\n64\n\nPA14/RTS1\n\n10\n\n\n\n\n\n65\n\nPB12/TWD1\n\n35\n\n\n\n\n\n66\n\nPB13/TWCK1\n\n36\n\n\n\n\n\n67\n\nPB16/DAC1*\n\n32\n\n\n\n\n\n68\n\nPB21/AD14\n\n41\n\n\n\n\n\n69\n\nPC4\n\n18\n\n\n\n Also used as CS signal on external SD card socket\n\n\n\n Duet WiFi v1.16+ M42 P value to Expansion Port Pin Mapping\n\n\n\n\n\n P\n\n\n\n Signal Name\n\n\n\n Expansion Connector Label\n\n\n\n Expansion Pin\n\n\n\n\n\n60\n\nCS5\n\nCS5\n\n50\n\n\n\n\n\n61\n\nCS6\n\nE3_STOP\n\n9\n\n\n\n\n\n62\n\nCS7\n\nE4_STOP\n\n14\n\n\n\n\n\n63\n\nCS8\n\nE5_STOP\n\n19\n\nSee Using servos and controlling unused I/O pins for all pin definitions.\n\nPre-1.16 example:\n\n\n\nM42 P20 S1;set the connector pin 35 to high.\n\nOn RADDS hardware running RepRapFirmware-dc42, the supported Arduino Due pin numbers and their names are:\n\n5 TIOA6,\n\n6 PWML7,\n\n39 PWMH2,\n\n58 AD3,\n\n59 AD2,\n\n66 DAC0,\n\n67 DAC1,\n\n68 CANRX0,\n\n69 CANTX0,\n\n70 SDA1,\n\n71 SCL1,\n\n72 RX LED,\n\n73 TX LED.\n\nSee also M583.\n\n"
   },
   "M43":{
      "prefix":"M43",
      "body":"",
      "description":"M43: Pin report and debug\n\nUsage\n\n`M43 En Pnnn Wn In`\n\n\n\nParameters\n\n`En`   Enable / disable background endstop monitoring\n\n`Pnnn` Pin to read or watch. If omitted, read/watch all pins\n\n`Wn`   bool watch pins -reporting changes- until reset, click, or `M108`\n\n`In`   bool Flag to ignore pin protection\n\n Note\n\n You must have `PINS_DEBUGGING` uncommented in your `Configuration_adv.h` file for M43 to work."
   },
   "M44":{
      "prefix":"M44",
      "body":"",
      "description":"M44: Reset the bed skew and offset calibrationResets the bed skew and offset calibration on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n"
   },
   "M45":{
      "prefix":"M45",
      "body":"",
      "description":"M45: Bed skew and offset with manual Z upRuns the xyz calibration on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n\n\nParameters\n\n`Vnn` Verbosity level 1, 10 and 20 (low, mid, high). Only when SUPPORT_VERBOSITY is defined. This parameter is optional. "
   },
   "M46":{
      "prefix":"M46",
      "body":"",
      "description":"M46: Show the assigned IP addressReports the assigned IP address of a Toshiba FlashAir on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\nAt this moment it is deactivated.\n\n"
   },
   "M47":{
      "prefix":"M47",
      "body":"",
      "description":"M47: Show end stops dialog on the displayShow end stops dialog on the display on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n"
   },
   "M48":{
      "prefix":"M48",
      "body":"",
      "description":"M48: Measure Z-Probe repeatability\n\nParameters\n\n`Pnnn` number of points\n\n`Xnnn` position on the X axis\n\n`Ynnn` position on the Y axis\n\n`Vnnn` verbosity\n\n`E` engage\n\n`Lnnn` legs of travel\n\n`S` schizoidAs with G29, the E flag causes the probe to stow after each probe.\n\nThe S flag will result is a random sized, 5 pointed star, being traced (X and Y axis) between each sample.  Usually a user will get worse repeat-ability numbers with S specified because the X axis and Y axis movements will add to the machine's positioning errors.\n\n\n\n\n\nPrusa specific 1This function assumes the bed has been homed. Specifically, that a G28 command as been issued prior to invoking the M48 Z-Probe repeatability measurement function. Any information generated by a prior G29 Bed leveling command will be lost and need to be regenerated.\n\nThe number of samples will default to 10 if not specified. You can use upper or lower case letters for any of the options EXCEPT n. n must be in lower case because Marlin uses a capital N for its communication protocol and will get horribly confused if you send it a capital N.\n\n\n\nUsageM48 nAA Xnnnn Ynnnn Vn Lnn\n\n\n\nParameters\n\n`nAA` number(AA) of samples, default=10 (valid values between 4 and 50)\n\n`Xnnn` X position for samples\n\n`Ynnn` Y position for samples\n\n`Vn` Verbosity level 1-4 (low to highest)\n\n`Lnn` Legs of travel 1-15"
   },
   "M49":{
      "prefix":"M49",
      "body":"",
      "description":"M49: Set G26 debug flag\n\nUsage\n\nM49 S1; Enable G26 verbose debug output"
   },
   "M70":{
      "prefix":"M70",
      "body":"",
      "description":"M70: Display message\n\nExample\n\nM70 P200 Message\n\nDisplay a message on the LCD. P is the time to display message for.\n\n"
   },
   "M72":{
      "prefix":"M72",
      "body":"",
      "description":"M72: Play a tone or song\n\nExample\n\nM72 P2\n\nInstruct the machine to play a preset song. Acceptable song IDs are machine specific. P is the ID of the song to play.\n\n"
   },
   "M73":{
      "prefix":"M73",
      "body":"",
      "description":"M73: Set/Get build percentage\n\nExample\n\nM73 P50\n\nTell the firmware the current build progress percentage. The machine is expected to display this on its display. If the percentage is exactly 0 a \"Build Start\" notification is sent to the host. If the percentage is exactly 100 a \"Build End\" notification is sent to the host.\n\nUse \"M73\" by itself to get a report of the current print progress.\n\n\n\nPrusa specific1Prusa firmware shows percent done, time remaining and time to change/pause/user interaction.\n\n\n\nUsageM73 P R Q S C1 D1\n\n\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`P` Percent in normal mode\n\n`R` Time remaining in normal mode (minutes)\n\n`Q` Percent in silent mode\n\n`S` Time remaining in silent mode (minutes)\n\n`C` Time to change/pause/user interaction in normal mode (minutes)1\n\n`D` Time to change/pause/user interaction in silent mode (minutes)1\n\n\n\nExamples\n\nM73\n\necho NORMAL MODE: Percent done: ---%; print time remaining in mins: -----\"\n\necho SILENT MODE: Percent done: ---%; print time remaining in mins: -----\"\n\n\n\nPrusa Firmware 3.10.0+1\n\necho NORMAL MODE: Percent done: ---%; print time remaining in mins: -----; Change in mins: -----\"1\n\necho SILENT MODE: Percent done: ---%; print time remaining in mins: -----; Change in mins: -----\"1\n\n"
   },
   "M75":{
      "prefix":"M75",
      "body":"",
      "description":"M75: Start the print job timer"
   },
   "M76":{
      "prefix":"M76",
      "body":"",
      "description":"M76: Pause the print job timer"
   },
   "M77":{
      "prefix":"M77",
      "body":"",
      "description":"M77: Stop the print job timer"
   },
   "M78":{
      "prefix":"M78",
      "body":"",
      "description":"M78: Show statistical information about the print jobs"
   },
   "M80":{
      "prefix":"M80",
      "body":"",
      "description":"M80: ATX Power On\n\nExamples\n\nM80   ; Turn on the power supply\n\nM80 S ; Report power supply state (Marlin 1.1.1)\n\nTurns on the ATX power supply from standby mode to fully operational mode. No-op on electronics without standby mode.\n\n\n\nNotes\n\n Marlin requires the `POWER_SUPPLY` configuration option to be set to a non-zero value to enable `M80`.\n\n Some firmwares (e.g.,  Teacup) handle power on/off automatically, so this is redundant there. Also, see RAMPS wiring for ATX on/off.\n\n Prusa requires `defined (PS_ON_PIN)` and `PS_ON_PIN` must be set.1\n\n"
   },
   "M81":{
      "prefix":"M81",
      "body":"",
      "description":"M81: ATX Power Off\n\nParameters\n\nP quit the daemon (redeem only)\n\nR restart the daemon (redeem only)\n\nSn n=0 turn power off immediately (default), n=1 turn power off when all thermostatic fans have turned off (RepRapFirmware 1.20 and later only)\n\n\n\nExamples\n\nM81   ; turn power off immediately\n\nM81 S1; turn power off when everything has cooled down (RepRapFirmware)Turns off the ATX power supply. Counterpart to M80.\n\n\n\nNotes\n\n Prusa requires `defined (PS_ON_PIN)` and `PS_ON_PIN` must be set to Power off.1\n\n"
   },
   "M82":{
      "prefix":"M82",
      "body":"",
      "description":"M82: Set extruder to absolute mode\n\nExample\n\nM82\n\nMakes the extruder interpret extrusion as absolute positions.\n\nThis is the default in repetier and for Yaskawa controllers.\n\n"
   },
   "M83":{
      "prefix":"M83",
      "body":"",
      "description":"M83: Set extruder to relative mode\n\nExample\n\nM83\n\nMakes the extruder interpret extrusion values as relative positions.\n\nNote that the Ultimaker 3 will revert back to absolute extrusion after each tool change.\n\n"
   },
   "M84":{
      "prefix":"M84",
      "body":"",
      "description":"M84: Stop idle hold\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`Innn` Reset flags1\n\n\n\nExample\n\nM84\n\nStop the idle hold on all axis and extruder. In some cases the idle hold causes annoying noises, which can be stopped by disabling the hold. Be aware that by disabling idle hold during printing, you will get quality issues. This is recommended only in between or after printjobs.\n\nOn Marlin, Repetier and RepRapFirmware, M84 can also be used to configure or disable the idle timeout. For example, \"M84 S10\" will idle the stepper motors after 10 seconds of inactivity. \"M84 S0\" will disable idle timeout; steppers will remain powered up regardless of activity.\n\nFor Yaskawa systems M84 is not applicable due to servo motors not producing the annoying noises.\n\n\n\nNotes1RepRapFirmware-dc42 and other firmware may not support this parameter.\n\n2Prusa firmware uses M84 similar to G-code#M18:_Disable_all_stepper_motors\n\n3On Klipper M84 is equivalent to G-code#M18:_Disable_all_stepper_motors\n\n\n\nPrusa Usage\n\n`M84 E S X Y Z`\n\nPrusa Parameters\n\nThis command can be used without any additional parameters.2\n\n`E` Extruder drive(s)2\n\n`S` Seconds\n\n`X` X axis\n\n`Y` Y axis\n\n`Z` Z axis"
   },
   "M85":{
      "prefix":"M85",
      "body":"",
      "description":"M85: Set Inactivity Shutdown Timer\n\nExample\n\nM85 S30\n\nSet Inactivity Shutdown Timer with parameter S<seconds>. \"M85 S0\" will disable the inactivity shutdown time (default)\n\n"
   },
   "M86":{
      "prefix":"M86",
      "body":"",
      "description":"M86: Set Safety Timer expiration time\n\nUsage\n\n`M86 Snnnn`\n\n\n\nParameters\n\n`S` SecondsSimilar to M85 but applies to the \"safety timer\" in Prusa Firmware.\n\nSets the safety timer expiration time in seconds. M86 S0 will disable safety timer.\n\nWhen safety timer expires, heatbed and nozzle target temperatures are set to zero.\n\n"
   },
   "M87":{
      "prefix":"M87",
      "body":"",
      "description":"M87: Cancel Safety Timer\n\nUsage\n\n`M87`Cancels the safety timer. Equivalent to M86 S0.\n\n"
   },
   "M92":{
      "prefix":"M92",
      "body":"",
      "description":"M92: Set axis_steps_per_unit\n\nParameters\n\n`Xnnn` Steps per unit for the X drive\n\n`Ynnn` Steps per unit for the Y drive\n\n`Znnn` Steps per unit for the Z drive\n\n`Ennn` Steps per unit for the extruder drive(s)\n\n`Snnn` Defines in which microstepping the above steps per unit are given. If omitted it will use the microstepping currently set by M350.1\n\n\n\nExamples\n\nM92 X87.489 Y87.489 Z87.489\n\nM92 E420:420\n\nAllows programming of steps per unit (usually mm) for motor drives. These values are reset to firmware defaults on power on, unless saved to EEPROM if available (M500 in Marlin) or in the configuration file (config.g in RepRapFirmware). Very useful for calibration.\n\nRepRapFirmware will report the current steps/mm if you send M92 without any parameters.\n\nFor Yaskawa systems M92/M93 is not applicable due to use of servo motors.\n\n\n\nNotes1 Only available in RepRapFirmware >=2.03\n\n"
   },
   "M93":{
      "prefix":"M93",
      "body":"",
      "description":"M93: Send axis_steps_per_unit"
   },
   "M98":{
      "prefix":"M98",
      "body":"",
      "description":"M98: Call Macro/Subprogram\n\nParameters\n\n`Pnnn` Macro filename. In RepRapFirmware 3 this must be enclosed in double-quote characters. In RepRapFirmware 2 the double-quote characters are optional.\n\n\n\nExample\n\nM98 Pmymacro.g\n\nM98 P\"mymacro.g\"\n\nRuns the macro in the file mymacro.g. In conventional G Codes for CNC machines the P parameter normally refers to a line number in the program itself (P2000 would run the Macro starting at line O2000, say). For RepRap, which almost always has some sort of mass storage device inbuilt, it simply refers to the name of a G-code file that is executed by the G98 call. That G-code file does not need to end with an M99 (return) as the end-of-file automatically causes a return. RepRapFirmware supports nested macro calls up to a depth of 5.\n\nCertain machine parameters are saved at the start of the macro call and restored at the end. For RepRapFirmware these are: axis movement relative/absolute mode, extruder movement absolute/relative mode, feed rate, inches/mm setting, and whether or not volumetric extrusion is selected. This allows the macro to change these settings without affecting the subsequent behaviour of the calling file.\n\nRepRapFirmware also allows the filename to include a path to a subdirectory. For relative paths, the default folder is /sys, but some implementations may check the /macros directory too. Absolute file paths are supported by RepRapFirmware too.\n\n"
   },
   "M99":{
      "prefix":"M99",
      "body":"",
      "description":"M99: Return from Macro/Subprogram\n\nExample\n\nM99\n\nReturns from an M98 call.\n\nRepRapFirmware closes the currently active macro file. If a nested macro is being run, RepRapFirmware goes up one stack level.\n\n"
   },
   "M101":{
      "prefix":"M101",
      "body":"",
      "description":"M101: Turn extruder 1 on (Forward), Undo RetractionIn Teacup firmware:\n\nIf a DC extruder is present, turn that on. Else, undo filament retraction, which means, make the extruder ready for extrusion. Complement to M103.\n\nIn BFB/RapMan:\n\nTurn extruder on (forward/filament in).\n\nIn RepRapFirmware: undo filament retraction. The length and speed are set by the M207 command. RepRapFirmware supports this command for compatibility with Simplify3D.\n\nIn other firmwares:\n\nDeprecated. Regarding filament retraction, see G10, G11, M207, M208, M227, M228, M229.\n\n"
   },
   "M102":{
      "prefix":"M102",
      "body":"",
      "description":"M102: Turn extruder 1 on (Reverse)In BFB/RapMan firmware:\n\nTurn extruder on Reverse (Still to add)\n\nIn other firmwares:\n\nDeprecated.\n\n"
   },
   "M103":{
      "prefix":"M103",
      "body":"",
      "description":"M103: Turn all extruders off, Extruder RetractionIn Teacup firmware:\n\nIf a DC extruder is present, turn that off. Else, retract the filament in the hope to prevent nozzle drooling. Complement to M101.\n\nIn BFB/RapMan firmware:\n\nTurn extruder off.\n\nIn RepRapFirmware: retract filament. The length and speed are set by the M207 command. RepRapFirmware supports this command for compatibility with Simplify3D.\n\nIn other firmwares: Deprecated. Regarding filament retraction, see G10, G11, M207, M208, M227, M228, M229.\n\n"
   },
   "M104":{
      "prefix":"M104",
      "body":"",
      "description":"M104: Set Extruder Temperature\n\nParameters\n\n`Dnnn` Display temperature (Only Prusa)\n\n`Snnn` Target temperature\n\n`Rnnn` Idle temperature (Only MK4duo)\n\nExample\n\nM104 S190\n\nM104 S190 R170\n\nSet the temperature of the current extruder to 190oC and return control to the host immediately (i.e. before that temperature has been reached by the extruder). See also M109.\n\nSee also using G10. Deprecation of M104 is  subject to discussion. --Traumflug 11:33, 19 July 2012 (UTC)\n\nM104 in Marlin FirmwareSee Marlin Wiki. In Marlin Firmware, using M104 with no parameters will turn off the heater for the current extruder. This is also the case for M104 S without a number after the S parameter.\n\nM104 in Teacup FirmwareIn Teacup Firmware, M104 can be additionally used to handle all devices using a temperature sensor. It supports the additional P parameter, which is a zero-based index into the list of sensors in config.h. For devices without a temp sensor, see  M106.\n\n\n\nExample\n\nM104 P1 S100\n\nSet the temperature of the device attached to the second temperature sensor to 100\u00b0C.\n\nM104 in RepRapFirmware and KlipperRepRapFirmware and some other firmwares support the optional T parameter (as generated by slic3r) to specify which tool the command applies to.\n\n"
   },
   "M105":{
      "prefix":"M105",
      "body":"",
      "description":"M105: Get Extruder Temperature\n\nParameters\n\nThis command can be used without any additional parameters.\n\n\n\nExamples\n\nM105\n\nRequest the temperature of the current extruder, the build base and the build chamber in degrees Celsius. The temperatures are returned to the host computer. For example, the line sent to the host in response to this command can look like:\n\n\n\nok T:201 B:117\n\nok T:201 /202 B:117 /120\n\nok T:201 /202 B:117 /120 C:49.3 /50\n\nok T:201 /202 T0:110 /110 T1:23 /0 B:117 /120 C:49.3 /50\n\nok T0:110 /110 T1:23 /0 B:117 /120\n\nok T:20.2 /0.0 B:19.1 /0.0 T0:20.2 /0.0 @:0 [emailprotected]:0 P:19.8 A:26.4\n\nThe parameters mean the following:\n\n\n\n T, T0, ..., Tn - extruder temperature. In a single extruder setup, only T will be reported. Some firmware variants will report no T0 in multi extruder setups - in that case T is to be considered the temperature of the first tool. Otherwise, T should be considered the temperature of the currently selected tool (which will be repeated in one of the Tn entries)\n\n B - bed temperature\n\n C - chamber temperature\n\n @ - Hotend power\n\n [emailprotected] - Bed power\n\n P - PINDAv2 actual (Prusa MK2.5/s MK3/s only)1\n\n A - Ambient actual (Prusa MK3/s only)1\n\nA temperature report will usually include actual and target temperature for all available heaters, with the format being \"actual/target\" or - for some firmware variants - \"actual /target\". During a blocking heatup some firmware variants only report the temperature tuple for the heater that is currently in blocking heatup state.\n\nNote that temperatures can be reported as integers or floats. There sadly are a lot of interpretations of how an M105 response should look like across firmware variants, making parsing them potentially tricky.\n\nExpansion/generalization of M105 to be considered using S1 parameter as noted in Pronterface I/O Monitor\n\nIn Repetier and MK4duo you can add X0 (X1 MK4duo) to get raw values as well:\n\n\n\nM105 X0\n\n==> 11:05:48.910: T:23.61 /0 @:0 T0:23.61 /0 @0:0 RAW0:3922 T1:23.89 /0 @1:0 RAW1:3920\n\nRecent versions of RepRapFirmware also report the current and target temperatures of all active heaters.\n\n"
   },
   "M106":{
      "prefix":"M106",
      "body":"",
      "description":"M106: Fan On\n\nParameters\n\n`Pnnn` Fan number (optional, defaults to 0)2\n\n`Snnn` Fan speed (0 to 255; RepRapFirmware also accepts 0.0 to 1.0))\n\n\n\nExtra Parameters\n\n`Innn` Invert signal, or disable fan1 3\n\n`Fnnn` Set fan PWM frequency, in Hz1 3\n\n`Lnnn` Set minimum fan speed (0 to 255 or 0.0 to 1.0)1 3\n\n`Xnnn` Set maximum fan speed (0 to 255 or 0.0 to 1.0)1 3\n\n`Bnnn` Blip time - fan will be run at full PWM for this number of seconds when started from standstill1\n\n`Hnn:nn:nn...` Select heaters monitored when in thermostatic mode1 3\n\n`Rnnn` Restore fan speed to the value it has when the print was paused1\n\n`Tnnn` Set thermostatic mode trigger temperature\n\n`Cnnn` Set custom name (RRF > 2.01 only)1\n\n\n\nExample\n\nM106 S127\n\n\n\nExamples (RepRapFirmware)\n\nM106 P1 I1 S87\n\nM106 P1 T45 H1:2\n\nM106 P2 B0.1 L0.05\n\nThe first example turns on the default cooling fan at half speed. The second one inverts the cooling fan signal of the second fan and sets its value to 1/3 of its maximum. The third one sets the second fan to a thermostatic fan for heaters 1 and 2 (e.g. the extruder heaters in a dual-nozzle machine) such that the fan will be on when either hot end is at or above 45C.\n\nMandatory parameter 'S' declares the PWM value (0-255). M106 S0 turns the fan off. In some implementations like RepRapFirmware the PWM value may alternatively be specified as a real fraction: M106 S0.7.\n\n\n\nNotes1These parameters are only available in RepRapFirmware.\n\n2Marlin 1.0 to 1.1.6 only supports a single fan. Marlin 1.1.7 and up supports up to 3 fans.\n\n3These parameters are only available in MK4duo.\n\nM106 in RepRapFirmwareIf an S parameter is provided but no other parameter is present, then the speeds of the print cooling fans associated with the current tool will be set (see the F parameter in the M563 command). If no tool is active then the speed of Fan 0 will be set. Either way, the speed is remembered so that it can be recalled using the R2 parameter (see below).\n\nIf no S parameter is given but the R1 parameter is used, the fan speed when the print was last paused will be set. If the R2 parameter is used, then the speeds of the print cooling fans associated with the current tool will be set to the remembered value (see above).\n\nThe T and H parameters allow a fan to be configured to operate in thermostatic mode, for example to use one of the fan channels to control the hot end fan. In this mode the fan will be fully on when the temperature of any of the heaters listed in the H parameter is at or above the trigger temperature set by the T parameter, and off otherwise. Thermostatic mode can be disabled using parameter H-1.\n\nThe B parameter sets the time for which the fan will be operated at full PWM when started from cold, to allow low fan speeds t be used. A value of 0.1 seconds is usually sufficient.\n\nThe L parameter defines the minimum PWM value that is usable with this fan. If a lower value is commanded that is not zero, it will be rounded up to this value.\n\nThe X parameter defines the maximum PWM value that is allowed for this fan. If a higher value is commanded, it will be rounded down to this value.\n\nThe I parameter causes the fan output signal to be inverted if its value is greater than zero. This makes the cooling fan output suitable for feeding the PWM input of a 4-wire fan via a diode. If the parameter is present and zero, the output is not inverted. If the I parameter is negative then in RRF 1.16 and later the fan is disabled, which frees up the pin for use as a general purpose I/O pin that can be controlled using M42.\n\nM106 in Teacup FirmwareAdditionally to the above, Teacup Firmware uses M106 to control general devices. It supports the additional P parameter, which is an zero-based index into the list of heaters/devices in config.h.\n\n\n\nExample\n\nM106 P2 S255\n\nTurn on device #3 at full speed/wattage.\n\nNote: When turning on a temperature sensor equipped heater with M106 and M104 at the same time, temperature control will override the value given in M106 quickly.\n\nNote well: The ambiguous text in the note above needs to be reworded by someone who knows the actual functioning. Below is my interpretation based on language use, not practical experience or code inspection.\n\nNote: If M104 is (or becomes) active on a heater (or other device) with a feedback sensor it will correct any M106 initiated control output value change in the time it takes for the PID (of other feedback) loop to adjust it back to minimum error. It may not be easy to observe a change in the temperature (process value) due to this brief change in the control value\n\n"
   },
   "M107":{
      "prefix":"M107",
      "body":"",
      "description":"M107: Fan OffDeprecated in Teacup firmware and in RepRapFirmware. Use M106 S0 instead.\n\n"
   },
   "M108":{
      "prefix":"M108",
      "body":"",
      "description":"M108: Set Extruder Speed (BFB)Sets speed of extruder motor.\n\n(Deprecated in FiveD firmware, see M113)\n\n"
   },
   "M109":{
      "prefix":"M109",
      "body":"",
      "description":"M109: Set Extruder Temperature and Wait\n\nParameters\n\n`Snnn` minimum target temperature, waits until heating\n\n`Rnnn` maximum target temperature, waits until cooling (Sprinter)\n\n`Rnnn` accurate target temperature, waits until heating and cooling (Marlin and MK4duo)\n\n`Tn` tool number (RepRapFirmware and Klipper), optional\n\n\n\nExample\n\nM109 S215\n\nM109 in TeacupNot needed. To mimic Marlin behaviour, use  M104 followed by  M116.\n\nM109 in Marlin, MK4duo, Sprinter (ATmega port), RepRapFirmware, PrusaSet extruder heater temperature in degrees celsius and wait for this temperature to be achieved.\n\n\n\nExample\n\nM109 S185\n\nRepRapFirmware also supports the optional T parameter (as generated by slic3r) to specify which tool the command refers to (see below).\n\nM109 in Sprinter (4pi port)Parameters:  S (optional), set target temperature value. If not specified, waits for the temperature set by  M104. R (optional), sets target temperature range maximum value.\n\n\n\nExample\n\nM109 S185 R240; set extruder temperature to 185 and wait for the temperature to be between 185 - 240.\n\nIf you have multiple extruders, use T or P parameter to specify which extruder you want to set/wait.\n\nAnother way to do this is to use  G10.\n\nM109 in MakerBot\n\nExample\n\nM109 S70 T0\n\nSets the target temperature for the current build platform. S is the temperature to set the platform to, in degrees Celsius. T is the platform to heat.\n\nM109 in KlipperAccording to the documentation, Klipper will wait for the specified temperature to settle, i.e. it will wait until it goes back down in case it overshoots. Klipper also supports the optional T parameter to specify which tool the command refers to (see above).\n\n"
   },
   "M110":{
      "prefix":"M110",
      "body":"",
      "description":"M110: Set Current Line Number\n\nParameters\n\n`Nnnn` Line number\n\n\n\nExample\n\nM110 N123\n\nThis example sets the current line number to 123. Thus the expected next line after this command will be 124.\n\n\n\n"
   },
   "M111":{
      "prefix":"M111",
      "body":"",
      "description":"M111: Set Debug Level\n\nParameters\n\n`Pnnn` Debug module1\n\n`Snnn` Debug on/off\n\n\n\nExamples\n\nM111 S6\n\nM111 P1 S1\n\nEnable or disable debugging features in the firmware. The implementation may look different per firmware.\n\n\n\nNotes1This parameter is only available in RepRapFirmware.\n\n2Prusa fimrware use D-codes/commands for debugging.\n\nM111 in RepRapFirmwareRepRapFirmware allows debugging to be set for each module. If the optional 'P' parameter is not specified, debugging will be enabled for all modules. For a list of modules, send M111 S1 P15.\n\nM111 in RepetierSet the level of debugging information transmitted back to the host to level 6. The level is the OR of three bits:\n\n\n\n#define DEBUG_ECHO (1<<0)\n\n#define DEBUG_INFO (1<<1)\n\n#define DEBUG_ERRORS (1<<2)\n\n#define DEBUG_DRYRUN (1<<3) // repetier-firmware\n\n#define DEBUG_COMMUNICATION (1<<4) // repetier-firmware\n\nThus 6 means send information and errors, but don't echo commands. (This is the RepRap default.)\n\nFor firmware that supports ethernet and web interfaces M111 S9 will turn web debug information on without changing any other debug settings, and M111 S8 will turn it off. Web debugging usually means that HTTP requests will be echoed to the USB interface, as will the responses.\n\n"
   },
   "M112":{
      "prefix":"M112",
      "body":"",
      "description":"M112: Full (Emergency) Stop\n\nExample\n\nM112\n\nAny moves in progress are immediately terminated, then RepRap shuts down. All motors and heaters are turned off. It can be started again by pressing the reset button on the master microcontroller. See also M0 and M1.\n\nPlease note while many systems termed this an Emergency Stop, this terminology is regulated in many regions with specific requirements behind its use. Marlin 2.0.x has renamed this to Full Stop. RepRapFirmware has indicated an intention to make a similar change as well. This stop function is NOT implemented in a Category 0 or 1 stop fashion or with fail-safe hardware compliying with PLd or better. The function as implemented is a category 2 software stop with no redundancies.\n\n"
   },
   "M113":{
      "prefix":"M113",
      "body":"",
      "description":"M113: Host KeepaliveDuring some lengthy processes, such as G29, Marlin may appear to the host to have \u201cgone away.\u201d The \u201chost keepalive\u201d feature will send messages to the host when Marlin is busy or waiting for user response so the host won\u2019t try to reconnect.\n\n\n\nUsage\n\n`M113 Snnn`\n\n\n\nParameters\n\n`Snnn` keepalive interval to set\n\n\n\nExamples\n\nM113 S2\n\n"
   },
   "M114":{
      "prefix":"M114",
      "body":"",
      "description":"M114: Get Current Position\n\nExample\n\nM114\n\nThis causes the RepRap machine to report its current X, Y, Z and E coordinates to the host.\n\nFor example, the machine returns a string such as:\n\nok C: X:0.00 Y:0.00 Z:0.00 E:0.00\n\nIn Marlin first 3 numbers is the position for the planner. The other positions are the positions from the stepper function. This helps for debugging a previous stepper function bug.\n\nX:0.00 Y:0.00 RZ:0.00 LZ:0.00 Count X:0.00 Y:0.00 RZ:41.02 LZ:41.02\n\n"
   },
   "M115":{
      "prefix":"M115",
      "body":"",
      "description":"M115: Get Firmware Version and Capabilities\n\nParameters\n\nThis command can be used without any additional parameters.\n\n`Bnnn` (RepRapFirmware 3 only) Expansion board number (typically the CAN address) for which the firmware version is requested, default 0 (i.e. main board)\n\n`Pnnn` Electronics type1\n\n`V` Report the Prusa version number2\n\n`Unnnnnn` Check the firmware version provided2\n\n\n\nExamples\n\nM115\n\nM115 P2\n\nRequest the Firmware Version and Capabilities of the current microcontroller\n\nThe details are returned to the host computer as key:value pairs separated by spaces and terminated with a linefeed.\n\nsample data from firmware:\n\n\n\nok PROTOCOL_VERSION:0.1 FIRMWARE_NAME:FiveD FIRMWARE_URL:http%3A//reprap.org MACHINE_TYPE:Mendel EXTRUDER_COUNT:1\n\nThis M115 code is inconsistently implemented, and should not be relied upon to exist, or output correctly in all cases. An initial implementation was committed to svn for the FiveD Reprap firmware on 11 Oct 2010. Work to more formally define protocol versions is currently (October 2010) being discussed. See M115_Keywords for one draft set of keywords and their meanings. See the M408 command for a more comprehensive report on machine capabilities supported by RepRapFirmware.\n\n\n\nNotes1This parameter is supported only in RepRapFirmware and can be used tell the firmware about the hardware on which it is running. If the P parameter is present then the integer argument specifies the hardware being used. The following are currently supported:\n\n\n\nM115 P0   Automatic board type selection if supported, or default if not\n\nM115 P1   Duet 0.6\n\nM115 P2   Duet 0.7\n\nM115 P3   Duet 0.85\n\n2These parameters are only supported in Prusa Firmware. Parameter Unnnnnn will check the firmware version provided. If the firmware version provided by the U code is higher than the currently running firmware, it will pause the print for 30s and ask the user to upgrade the firmware.\n\nsample data M115:\n\n\n\nFIRMWARE_NAME:Prusa-Firmware 3.8.1 based on Marlin FIRMWARE_URL:https://github.com/prusa3d/Prusa-Firmware PROTOCOL_VERSION:1.0 MACHINE_TYPE:Prusa i3 MK3S EXTRUDER_COUNT:1 UUID:00000000-0000-0000-0000-000000000000\n\nsample data M115 V\n\n\n\n3.8.1\n\nsample data on display for 30s or user interactionM115 U3.8.2-RC1\n\n\n\nNew firmware version availible:\n\n3.8.2-RC1\n\nPlease upgrade.\n\n"
   },
   "M116":{
      "prefix":"M116",
      "body":"",
      "description":"M116: Wait\n\nParameters\n\nThis command can be used without any additional parameters.1\n\n`Pnnn` Tool number\n\n`Hnnn` Heater number\n\n`Cnnn` Chamber number\n\n\n\nExamples\n\nM116\n\nM116 P1\n\nWait for all temperatures and other slowly-changing variables to arrive at their set values if no parameters are specified. See also M109.\n\n\n\nNotes1Most implementations don't support any parameters, but RepRapFirmware version 1.04 and later supports an optional 'P' parameter that is used to specify a tool number. If this parameter is present, then the system only waits for temperatures associated with that tool to arrive at their set values. This is useful during tool changes, to wait for the new tool to heat up without necessarily waiting for the old one to cool down fully.\n\nRecent versions of RepRapFirmware also allow a list of the heaters to be specified using the 'H' parameter, and if the 'C' parameter is present, this will indicate that the chamber heater should be waited for.\n\n"
   },
   "M117":{
      "prefix":"M117",
      "body":"",
      "description":"M117: Display Message\n\nExample\n\nM117 Hello World\n\nThis causes the given message to be shown in the status line on an attached LCD. The above command will display Hello World. If RepRapFirmware is used and no LCD is attached, this message will be reported on the web interface.\n\n\n\nNotesIn Prusa Firmware it is also used to display internal messages on LCD.1\n\n"
   },
   "M118":{
      "prefix":"M118",
      "body":"",
      "description":"M118: Negotiate Features\n\nExample\n\nM118 P42\n\nThis M-code is for future proofing. NO firmware or hostware supports this at the moment. It is used in conjunction with M115's FEATURES keyword.\n\nSee Protocol_Feature_Negotiation for more info.\n\n"
   },
   "M119":{
      "prefix":"M119",
      "body":"",
      "description":"M119: Get Endstop Status\n\nExample\n\nM119\n\nReturns the current state of the configured X, Y, Z endstops. Takes into account any 'inverted endstop' settings, so one can confirm that the machine is interpreting the endstops correctly.\n\nIn redeem, M119 can also be used to invert end stops.\n\n\n\nExample\n\nM119 X1 1\n\nThis will invert end stop X1 (Inverted means switch is connected in Normally Open state (NO))\n\n"
   },
   "M120":{
      "prefix":"M120",
      "body":"",
      "description":"M120: Enable endstop detection"
   },
   "M121":{
      "prefix":"M121",
      "body":"",
      "description":"M121: Disable endstop detection"
   },
   "M122":{
      "prefix":"M122",
      "body":"",
      "description":"M122: Firmware dependentM122: Diagnose (RepRapFirmware)\n\nParameters\n\nBmmm Expansion board number for which diagnostics are requested, default 0 which means main board\n\nPnnn Optional parameter to specify what diagnostics are required. Caution: some values of P will crash the firmware deliberately to test error handling! See the Duet3D wiki for more details.\n\n\"DSF\" Immediate DSF diagnostics (RRF3/Duet3 only with attached SBC)\n\nExample\n\nM122Sending an M122 causes the RepRap to transmit diagnostic information, for example via a USB serial link.\n\nIf RepRapFirmware is used and debugging is enabled for the Network module, this will also print LWIP stats to the host via USB.\n\nM122: Set Software Endstop (MK4duo)Disabled or Enabled Software Endstop\n\nM122 S<0/1>\n\nM122: Debug L6470 drivers (Marlin)Get diagnostic info about all L6470 stepper drivers.\n\n\n\nExample\n\nM122\n\n"
   },
   "M123":{
      "prefix":"M123",
      "body":"",
      "description":"M123: Firmware dependentM123: Tachometer value (RepRap & Prusa)Sending an M123 causes the RepRap to transmit filament tachometer values from all extruders.\n\nSending a M123 is used in Prusa firmware to report fan speeds and fan pwm values.1\n\n\n\nUsage\n\nM123\n\n\n\nPrusa firmware output1\n\n\n\n`E0:     - Hotend fan speed in RPM`\n\n`PRN1:   - Part cooling fans speed in RPM`\n\n`[emailprotected]:    - Hotend fan PWM value`\n\n`[emailprotected]:  -Part cooling fan PWM value`\n\n\n\nExamples1\n\necho E0:3240 RPM PRN1:4560 RPM [emailprotected]:255 [emailprotected]:255\n\nM123: Endstop Logic (MK4duo)\n\nParameters\n\n`Xn` X Logic\n\n`Yn` Y Logic\n\n`Zn` Z Logic\n\n`In` X2 Logic\n\n`Jn` Y2 Logic\n\n`Kn` Z2 Logic\n\n`Pn` Probe Logic\n\n`Dn` Door Logic\n\nExamples\n\nM123; Print Status\n\nM123 X1 Y1 Z0 P0\n\n"
   },
   "M124":{
      "prefix":"M124",
      "body":"",
      "description":"M124: Firmware dependentM124: Immediate motor stopImmediately stops all motors.\n\nM124: Set Endstop Pullup\n\nParameters\n\n`Xn` X     Pullup on/off\n\n`Yn` Y     Pullup on/off\n\n`Zn` Z     Pullup on/off\n\n`In` X2    Pullup on/off\n\n`Jn` Y2    Pullup on/off\n\n`Kn` Z2    Pullup on/off\n\n`Pn` Probe Pullup on/off\n\n`Dn` Door  Pullup on/off\n\nExamples\n\nM124; Print Status\n\nM124 X1 Y1 Z0 P0\n\n"
   },
   "M126":{
      "prefix":"M126",
      "body":"",
      "description":"M126: Open Valve\n\nExample\n\nM126 P500\n\nOpen the extruder's valve (if it has one) and wait 500 milliseconds for it to do so.\n\nM126 in MakerBot\n\nExample\n\nM126 T0\n\nEnables an extra output attached to a specific toolhead (e.g. fan)\n\n"
   },
   "M127":{
      "prefix":"M127",
      "body":"",
      "description":"M127: Close Valve\n\nExample\n\nM127 P400\n\nClose the extruder's valve (if it has one) and wait 400 milliseconds for it to do so.\n\nM127 in MakerBot\n\nExample\n\nM127 T0\n\nDisables an extra output attached to a specific toolhead (e.g. fan)\n\n"
   },
   "M128":{
      "prefix":"M128",
      "body":"",
      "description":"M128: Extruder Pressure PWM\n\nExample\n\nM128 S255\n\nPWM value to control internal extruder pressure. S255 is full pressure.\n\n"
   },
   "M129":{
      "prefix":"M129",
      "body":"",
      "description":"M129: Extruder pressure off\n\nExample\n\nM129 P100\n\nIn addition to setting Extruder pressure to 0, you can turn the pressure off entirely. P400 will wait 100ms to do so.\n\n"
   },
   "M130":{
      "prefix":"M130",
      "body":"",
      "description":"M130: Set PID P value\n\nParameters\n\n`Pnnn` heater number\n\n`Snnn` proportional (Kp)\n\n\n\nExample\n\nM130 P0 S8.0 ; Sets heater 0 P factor to 8.0\n\nTeacup can control multiple heaters with independent PID controls. For the default shown at https://github.com/Traumflug/Teacup_Firmware/blob/master/config.default.h, heater 0 is the extruder (P0), and heater 1 is the bed (P1).\n\nTeacup's PID proportional units are in pwm/255 counts per quarter C, so to convert from counts/C, you would divide by 4. Conversely, to convert from count/qC to count/C, multiply by 4. In the above example, S=8 represents a Kp=8*4=32 counts/C.\n\n"
   },
   "M131":{
      "prefix":"M131",
      "body":"",
      "description":"M131: Set PID I value\n\nParameters\n\n`Pnnn` heater number\n\n`Snnn` integral (Ki)\n\n\n\nExample\n\nM131 P1 S0.5 ; Sets heater 1 I factor to 0.5\n\nTeacup's PID integral units are in pwm/255 counts per (quarter C*quarter second), so to convert from counts/qCqs, you would divide by 16. Conversely, to convert from count/qCqs to count/Cs, multiply by 16. In the above example, S=0.5 represents a Ki=0.5*16=8 counts/Cs.\n\n"
   },
   "M132":{
      "prefix":"M132",
      "body":"",
      "description":"M132: Set PID D value\n\nParameters\n\n`Pnnn` heater number\n\n`Snnn` derivative (Kd)\n\n\n\nExample\n\nM132 P0 S24 ; Sets heater 0 D factor to 24.0\n\nTeacup's PID derivative units are in pwm/255 counts per (quarter degree per 2 seconds), so to convert from counts/C, you would divide by 4. Conversely, to convert from count/qC to count/C, multiply by 8. In the above example, S=24 represents a Kd=24*8=194 counts/(C/s).\n\nM132 in MakerBot\n\nExample\n\nM132 X Y Z A B\n\nLoads the axis offset of the current home position from the EEPROM and waits for the buffer to empty.\n\n"
   },
   "M133":{
      "prefix":"M133",
      "body":"",
      "description":"M133: Set PID I limit value\n\nParameters\n\n`Pnnn` heater number\n\n`Snnn` integral limit (Ki)\n\n\n\nExample\n\nM133 P1 S264 ; Sets heater 1 I limit value to 264\n\nTeacup's PID integral limit units are in quarter-C*quarter-seconds, so to convert from C-s, you would multiply by 16. Conversely, to convert from qC*qs to C*s, divide by 16. In the above example, S=264 represents an integral limit of 16.5 C*s.\n\nM133 in MakerBotWait for the toolhead to reach its target temperature.\n\n\n\nParameters\n\n`Tnn`: Extruder to wait for\n\n`Pnn`: Time limit, in seconds\n\nExample\n\nM133 T0 P500; Wait for Tool 0 to reach target. Fail after 8:20.\n\n"
   },
   "M134":{
      "prefix":"M134",
      "body":"",
      "description":"M134: Write PID values to EEPROM\n\nExample\n\nM134\n\nM134 in MakerBot\n\nExample\n\nM134 T0 P500\n\nInstruct the machine to wait for the platform to reach its target temperature. T is the platform to wait for. P if present, sets the time limit.\n\n"
   },
   "M135":{
      "prefix":"M135",
      "body":"",
      "description":"M135: Set PID sample interval\n\nParameters\n\n`Snnn` Heat sample time in seconds\n\n\n\nExample\n\nM135 S300\n\nSet the PID to measure temperatures and calculate the power to send to the heaters every 300ms.\n\nM135 in MakerBot\n\nExample\n\nM135 T0\n\nInstructs the machine to change its toolhead. Also updates the State Machine's current tool_index. T is the toolhead for the machine to switch to and the new tool_index for the state machine to use.\n\n"
   },
   "M136":{
      "prefix":"M136",
      "body":"",
      "description":"M136: Print PID settings to host\n\nExample\n\nM136 P1 ; print heater 0 PID parameters to host\n\n"
   },
   "M140":{
      "prefix":"M140",
      "body":"",
      "description":"M140: Set Bed Temperature (Fast)\n\nParameters\n\n`Pnnn` Bed heater index1\n\n`Hnnn` Heater number1\n\n`Tnnn` Tool number2\n\n`Snnn` Active/Target temperature\n\n`Rnnn` Standby temperature1 2\n\n\n\nExample\n\nM140 S55\n\nSet the temperature of the build bed to 55oC and return control to the host immediately (i.e. before that temperature has been reached by the bed).\n\n\n\n Notes1 These parameters are only supported in RepRapFirmware. RepRapFirmware allows the bed heater to be switched off if the absolute negative temperature (-273.15) is passed as target temperature. In this case the current bed temperature is not affected:\n\n\n\nM140 S-273.15\n\n2 These parameters are only supported in MK4duo for Idle temperature\n\n\n\nM140 S60 R30\n\nM140 T1 S60 R30\n\nThere is an optional R field that sets the bed standby temperature:\n\nM140 S65 R40.\n\nRecent versions of RepRapFirmware also provide an optional 'H' parameter to set the hot bed heater number. If no heated bed is present, a negative value may be specified to disable it.\n\n"
   },
   "M141":{
      "prefix":"M141",
      "body":"",
      "description":"M141: Set Chamber Temperature (Fast)\n\nParameters\n\n`Pnnn` Chamber index1\n\n`Hnnn` Heater number1\n\n`Tnnn` Tool number2\n\n`Snnn` Active/Target temperature\n\n`Rnnn` Standby temperature1 2\n\n\n\nExamples\n\nM141 S30\n\nM141 H0\n\nSet the temperature of the chamber to 30oC and return control to the host immediately (i.e. before that temperature has been reached by the chamber).\n\n\n\n Notes1 These parameters are only supported in RepRapFirmware and work just like in M140.\n\n2 These parameters are only supported in MK4duo and work just like in M140.\n\n"
   },
   "M142":{
      "prefix":"M142",
      "body":"",
      "description":"M142: Firmware dependentM142: Holding Pressure\n\nExample\n\nM142 S1\n\nSet the holding pressure of the bed to 1 bar.\n\nThe holding pressure is in bar. For hardware which only has on/off holding, when the holding pressure is zero, turn off holding, when the holding pressure is greater than zero, turn on holding.\n\nM142: Set Cooler Temperature (Fast)\n\nParameters\n\n`Tnnn` Tool number\n\n`Snnn` Active/Target temperature\n\n`Rnnn` Standby temperature\n\n\n\nExamples\n\nM142 S60\n\nM142 S60 R30\n\nM141 T1 S60 R30\n\nSet the temperature of the cooler\n\n"
   },
   "M143":{
      "prefix":"M143",
      "body":"",
      "description":"M143: Maximum heater temperature\n\nParameters\n\n`H` Heater number (RepRapFirmware 1.17 and later, default 1 which is normally the first hot end)\n\n`S` Maximum temperature\n\n\n\nExamples\n\nM143 S275     ; set the maximum temperature of the hot-end to 275\u00b0C\n\nM143 H0 S125  ; set the maximum bed temperature to 125C\n\nThe default maximum temperature for all heaters was 300\u00b0C prior to RepRapFirmware version 1.13, and 262\u00b0C from 1.13 onwards. From RepRapFirmware 1.17 onwards, the default maximum temperatures are 262C for extruders and 125C for the bed.\n\nWhen the temperature of the heater exceeds this value, countermeasures will be taken.\n\n"
   },
   "M144":{
      "prefix":"M144",
      "body":"",
      "description":"M144: Bed Standby\n\nParameters\n\nPnn Bed heater number, default 0\n\nSn 0 = set bed heater to standby (default), 1 = set bad heater active\n\n\n\nExample\n\nM144\n\nSwitch the bed heater to its standby temperature. M140 S1 turns it back to its active temperature.\n\n"
   },
   "M146":{
      "prefix":"M146",
      "body":"",
      "description":"M146: Set Chamber Humidity\n\nParameters\n\n`Rnnn` Relative humidity in percent\n\n\n\nExample\n\nM146 R60\n\nSet the relative humidity of the chamber to 60% and return control to the host immediately (i.e. before that humidity has been reached by the chamber).\n\n"
   },
   "M149":{
      "prefix":"M149",
      "body":"",
      "description":"M149: Set temperature units\n\nParameters\n\n`C` Flag to treat temperature as degrees Celsius\n\n`K` Flag to treat temperature as Kelvin\n\n\n\nExample\n\nM149 K\n\nIt affects the S or R values in the codes M104, M109, M140, M141, M143, M190 and G10. The default is M149 C.\n\n"
   },
   "M150":{
      "prefix":"M150",
      "body":"",
      "description":"M150: Set LED color\n\nParameters\n\n`Rnnn` Red component\n\n`Unnn` Green component\n\n`Bnnn` Blue component\n\n`Wnnn` White component (Marlin)\n\n`Pnnn` Brightness (0-255) (Marlin, also RepRapFirmware 2.03 and later)\n\n`P` Set full brightness (Marlin)\n\n`Snnn` (RepRapFirmware) Number of individual LEDs to set to these colours\n\n`Fn` (RepRapFirmware) Following command action. F0 (default) means this is the last command for the LED strip, so the next M150 command starts at the beginning of the strip. F1 means further M150 commands for the remainder of the strip follow this one.\n\n`Xn` (RepRapFirmware) LED type: X0 (default) = DotStar, X1 = NeoPixel. This parameter is remembered from one call to the next, so it only needs to be given once.\n\n`Ynn` (RepRapFirmware) Brightness, 0-31 (alternative to P 0-255)\n\n`Qnnn` (RepRapFirmware) Use specified SPI frequency (in Hz) instead of default frequency. This parameter is only processed if X parameter also present. When using NeoPixels, only frequencies between about 2.5MHz and 4MHz will work.\n\n\n\nExample\n\nM150 R255 U128 B192\n\n\n\nExample (RepRapFirmware)\n\nM150 X1 F3000000        ; set LED type to NeoPixel and set SPI frequency to 3MHz\n\nM150 R255 P128 S20 F1   ; set first 20 LEDs to red, half brightness, more commands for the strip follow\n\nM150 U255 B255 P255 S20 ; set next 20 LEDs to cyan, full brightness, finished programming LED strip\n\nSet BlinkM, Neopixel, and/or other LED light color and intensity with RGBW component values from 0 to 255. Some LCD controllers use this interface for a backlight. Firmware may override the set color to indicate the current printer status.\n\nRepRapFirmware uses this command to control DotStar or NeoPixel LED strips on controllers that provide a connector for this purpose. When using NeoPixel strips there is a firmware-dependent maximum number of LEDs in the strip supported determined by the size of the DMA buffer.\n\n\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "M155":{
      "prefix":"M155",
      "body":"",
      "description":"M155: Automatically send temperatures\n\nParameters\n\n`Snnn` enable sending temperatures = 1, disable = 0\n\n`Snnn` Interval in seconds between auto-reports. S0 to disable. (Marlin) Prusa has a Maximum: 2551\n\n`Cnn` Activate auto-report function (bit mask). Default is temperature.1\n\nC bitmap1\n\n`bit 0 = Auto-report temperatures`\n\n`bit 1 = Auto-report fans`\n\n`bit 2 = Auto-report position`\n\n`bit 3 = free`\n\n`bit 4 = free`\n\n`bit 5 = free`\n\n`bit 6 = free`\n\n`bit 7 = free`\n\n\n\nExamples\n\nM155 S1; Enable temperature report (Marlin: every 1 second)\n\nM155 S0; Stop reporting temperatures\n\nM155 S4; Report temperatures every 4 seconds (Marlin)\n\nM155 S4 C7; Reports temperatures, fans and position every 4 seconds (Prusa)1\n\nHosts normally monitor printer temperatures by sending M105 every couple of seconds. This not only adds serial traffic but it will fail whenever the command queue is full. M155 addresses these problems by telling the firmware to automatically report temperatures at regular intervals. This behavior is disabled by default for best compatibility with existing hosts. If the firmware supports M155 the output of M115 will report the AUTOREPORT_TEMP capability:\n\n\n\nCap:AUTOREPORT_TEMP:1\n\nPrusa Firmware 3.10.0+ also adds capabilities:\n\n\n\nCap:AUTOREPORT_FANS:1\n\nCap:AUTOREPORT_POSITION:1\n\nCap:EXTENDED_M20:1\n\n"
   },
   "M160":{
      "prefix":"M160",
      "body":"",
      "description":"M160: Number of mixed materials\n\nExample\n\nM160 S4\n\nThis command has been superseded by the tool definition command M563 (see below).\n\nSet the number of materials, N, that the current extruder can handle to the number specified. The default is 1.\n\nWhen N >= 2, then the E field that controls extrusion requires N values separated by colons \":\" after it like this:\n\n\n\nM160 S4\n\nG1 X90.6 Y13.8 E2.24:2.24:2.24:15.89\n\nG1 X70.6 E0:0:0:42.4\n\nG1 E42.4:0:0:0\n\nThe second line moves straight to the point (90.6, 13.8) extruding a total of 22.4mm of filament. The mix ratio for the move is 0.1:0.1:0.1:0.7.\n\nThe third line moves back 20mm in X extruding 42.4mm of filament.\n\nThe fourth line has no physical effect.\n\n"
   },
   "M163":{
      "prefix":"M163",
      "body":"",
      "description":"M163: Set weight of mixed material\n\nParameters\n\n`Snnn` extruder number\n\n`Pnnn` weightSet weight for this mixing extruder drive.\n\nSee Repetier Color Mixing for more informations.\n\n"
   },
   "M164":{
      "prefix":"M164",
      "body":"",
      "description":"M164: Store weights\n\nParameters\n\n`Snnn` virtual extruder number\n\n`Pnnn` store to eeprom (P0 = no, P1 = yes)Store weights as virtual extruder S.\n\n"
   },
   "M165":{
      "prefix":"M165",
      "body":"",
      "description":"M165: Set multiple mix weights\n\nParameters A B C D H I\n\n`A[factor]` Mix factor for extruder stepper 1\n\n`B[factor]` Mix factor for extruder stepper 2\n\n`C[factor]` Mix factor for extruder stepper 3\n\n`D[factor]` Mix factor for extruder stepper 4\n\n`H[factor]` Mix factor for extruder stepper 5\n\n`I[factor]` Mix factor for extruder stepper 6\n\n Set multiple mix factors for a mixing extruder.\n\n Factors that are left out will be set to 0.\n\n All factors together must add up to 1.0.\n\n"
   },
   "M190":{
      "prefix":"M190",
      "body":"",
      "description":"M190: Wait for bed temperature to reach target temp\n\nParameters\n\n`Snnn` minimum target temperature, waits until heating\n\n`Rnnn` accurate target temperature, waits until heating and cooling (Marlin and Prusa)\n\n\n\nExample\n\nM190 S60\n\nWait for the bed temperature to reach 60 degrees, printing out the temperatures once per second.\n\n"
   },
   "M191":{
      "prefix":"M191",
      "body":"",
      "description":"M191: Wait for chamber temperature to reach target temp\n\nExample\n\nM191 S60\n\nSet the temperature of the build chamber to 60 \u00b0C and wait for the temperature to be reached.\n\n\n\nParameters\n\n`Snnn` minimum target temperature, waits until heating\n\n`Rnnn` accurate target temperature, waits until heating and cooling (Marlin)"
   },
   "M192":{
      "prefix":"M192",
      "body":"",
      "description":"M192: Wait for Probe TemperatureUse M192 to dwell until the probe is at or above a given temperature.\n\n"
   },
   "M200":{
      "prefix":"M200",
      "body":"",
      "description":"M200: Set filament diameterVolumetric Extrusion is a firmware mode (and an option you can set in some slicers) wherein all extrusion amounts are specified as a volume \u2014using cubic millimeters or inches (i.e., mm3 or in3)\u2014 instead of a linear distance. This makes it possible to use the same G-code with any filament diameter.\n\nM200 tells the firmware what the filament diameter is, and (if non-zero) to enable Volumetric Extrusion.\n\nSend M200 without parameters to get the current Volumetric Extrusion state and filament diameters.\n\nNote that slicer-commanded retraction amounts must also be specified in mm3 since the E axis is interpreted as a volume. However, when using Firmware Retraction (G10 / G11) the retractions specified by M207 are still set in linear units.\n\n\n\nParameters (Marlin)\n\n`D[linear]` Set the filament diameter in current units. If non-zero, enable Volumetric Extrusion.\n\n`T[index]` Select the target extruder. If omitted, the active extruder.\n\n`S[bool]` Enable or Disable Volumetric Extrusion (without modifying the filament diameter).\n\n`L[limit]` Set the Maximum Extrusion Volume in mm3 per second. (Ignores units set by `G20`.) Use `L0` for no limit.\n\n\n\nExamples (Marlin)\n\nM200 D0      ; Disable Volumetric Extrusion on all extruders\n\nM200 D1.75   ; Set filament diameter for the current extruder to 1.75mm\n\nM200 T1 D2.85; Set filament diameter for E2 to 1.75mm\n\nM200 T1 L12  ; Set Maximum Extrusion Volume for E2 to 12mm3\n\nM200 S1      ; Enable Volumetric Extrusion using the last-set diameters\n\n\n\nParameters (RepRapFirmware)\n\n`Daaa:bbb:ccc...` Set filament diameter to aaa for extruder 1, bbb for extruder 2, etc. If any of aaa, bbb etc. are zero then Volumetric Extrusion is disabled for that extruder.\n\n`Daaa` Set filament diameter (or disable Volumetric Extrusion) for all extruders.\n\n\n\nExamples (RepRapFirmware)\n\nM200 D0              ; Disable Volumetric Extrusion on all extruders\n\nM200 D1.75           ; Set all extruder filament diameters to 1.75mm\n\nM200 D1.75:3.0:1.75  ; Set extruder 0 to 1.75mm, E1 to 3.0mm and the rest to 1.75mm\n\n"
   },
   "M201":{
      "prefix":"M201",
      "body":"",
      "description":"M201: Set max acceleration\n\nParameters\n\n`Xnnn` Acceleration for X axis in units/s2\n\n`Ynnn` Acceleration for Y axis in units/s2\n\n`Znnn` Acceleration for Z axis in units/s2\n\n`Ennn` Acceleration for the active or specified extruder in units/s2\n\n\n\nExample\n\nM201 X1000 Y1000 Z100 E2000\n\nSet the acceleration that axes can do in units/s2 for print moves.\n\nThe M201 command is intended to define the machine's physical limits. Slicers should use the M204 command to define accelerations for a job and leave M201 settings to the user.\n\n"
   },
   "M202":{
      "prefix":"M202",
      "body":"",
      "description":"M202: Set max travel accelerationSet max travel acceleration in units/s^2 for travel moves (M202 X1000 Y1000). Unused in Marlin!!\n\n"
   },
   "M203":{
      "prefix":"M203",
      "body":"",
      "description":"M203: Firmware dependentM203: Set maximum feedrate\n\nParameters\n\n`Xnnn` Maximum feedrate for X axis\n\n`Ynnn` Maximum feedrate for Y axis\n\n`Znnn` Maximum feedrate for Z axis\n\n`Ennn` Maximum feedrate for extruder drives\n\n`Innn` (RepRapFirmware) Minimum feed rate (optional) \n\n\n\nExample\n\nM203 X6000 Y6000 Z300 E10000\n\nSets the maximum feedrates that your machine can do in mm/min. (Marlin uses mm/sec).\n\nThis command is intended to define the machine limits. Slicers should not generate M203 commands, instead they should use the F parameter on G0, G1 etc. command to specify the requested speeds. \n\nM203 (Repetier): Set temperature monitorSet temperature monitor to Sx. Repetier Firmware only.\n\n"
   },
   "M204":{
      "prefix":"M204",
      "body":"",
      "description":"M204: Firmware dependentM204: Set default acceleration\n\nParameters (RepRapFimware)\n\n`Pnnn` Acceleration for printing moves\n\n`Tnnn` Acceleration for travel moves\n\n\n\nExample\n\nM204 P500 T2000\n\nAccelerations set with M204 apply to the move as a whole based on the type of move. Use M201 to set limits for each axis individually. Both of these limits will be applied during printing.\n\n\n\nParameters (MK4duo)\n\n`Pnnn` Acceleration for printing moves\n\n`Vnnn` Acceleration for travel moves\n\n`Rnnn` Acceleration for Retraction for Tools with T code\n\n\n\nExample\n\nM204 P500 V2000 T0 R5000\n\nOther firmwares:\n\n`S[accel]` Set Acceleration for normal moves in units/s2\n\n`T[accel]` Set Acceleration for retract/recover moves in units/s2\n\n`B[ms]` Set Minimum Segment Time to prevent planner starvation.Marlin notes: Since version 1.0.2-1 the M204 options are:\n\n`P[accel]` Set Acceleration for Printing moves. (i.e., Any XYZ motion plus E.)\n\n`R[accel]` Set Acceleration for Retract moves. (i.e., E-axis only moves.)\n\n`T[accel]` Set Acceleration for Travel moves. (i.e., without E movement)\n\nExampleSet the acceleration for printing movements to 800mm/s^2, for travels to 3000mm/s^2 and for retracts to 9000mm/s^2.\n\n\n\nM204 P800 T3000 R9000\n\nM204 (Repetier): Set PID values\n\nUsage\n\nM204 X[Kp] Y[Ki] Z[Kd]\n\nSet one or more PID parameters. Values are 100 * real value.\n\n"
   },
   "M205":{
      "prefix":"M205",
      "body":"",
      "description":"M205: Firmware dependentM205: Advanced settings\n\nSprinter / Marlin\n\n\n\nMinimum travel speed = `S[printing]` `T[travel]`\n\n`B[min segment time] X[max XY jerk] Z[max Z jerk] E[max E jerk]`\n\nSprinter / Marlin Example\n\n\n\nM205 X30 Z5; Set X/Y Jerk to 30mm/s, Z jerk to 5mm/s\n\nSmoothieware uses a different algorithm: [1]\n\nX[xy junction deviation] Z[z junction deviation] S[minimum planner speed].\n\nZ junction deviation only applies to z only moves\n\n0 disables junction deviation for Z\n\n-1 uses global junction deviation\n\nSmoothie example\n\n\n\nM205 X0.05 ; set X/Y Junction Deviation\n\nM205 (Repetier): EEPROM ReportOutput EEPROM settings. Repetier Firmware only.\n\n"
   },
   "M206":{
      "prefix":"M206",
      "body":"",
      "description":"M206: Firmware dependentM206: Offset axes\n\nParameters\n\n`Xnnn` X axis offset\n\n`Ynnn` Y axis offset\n\n`Znnn` Z axis offset\n\n\n\nExample\n\nM206 X10.0 Y10.0 Z-0.4\n\nThe values specified are added to the endstop position when the axes are referenced. The same can be achieved with a G92 right after homing (G28, G161).\n\nWith Marlin firmware, this value can be saved to EEPROM using the M500 command.\n\nA similar command is G10, aligning these two is  subject to discussion.\n\nWith Marlin 1.0.0 RC2 a negative value for z lifts(!) your printhead.\n\nIn builds of RepRapFirmware that support CNC workplace coordinates, using this command is equivalent to using G10 L2 P1 to set the coordinate offsets for workplace 1.\n\nM206 (Repetier): Set EEPROM valueSet a Repetier Firmware EEPROM value.\n\n\n\nParameters\n\n`T[type]` Value type\n\n`P[pos]` Value position\n\n`[S(long)]` An integer value\n\n`[X(float)]` A float value\n\nExample\n\nM206 T3 P39 X19.9; Set Jerk to 19.9\n\n"
   },
   "M207":{
      "prefix":"M207",
      "body":"",
      "description":"M207: Firmware dependentM207: Set retract length\n\nParameters\n\n`Snnn` positive length to retract, in mm\n\n`Rnnn` positive or negative additional length to un-retract, in mm (RepRapFirmware only)\n\n`Fnnn` retraction feedrate, in mm/min\n\n`Tnnn` feedrate for un-retraction if different from retraction, mm/min (RepRapFirmware 1.16 and later only)\n\n`Znnn` additional zlift/hop\n\n\n\nExample\n\nM207 S4.0 F2400 Z0.075\n\nSet the retract length used by the G10 and G11 commands. Units are in mm regardless of M200 setting.\n\nMachinekit uses different parameters and speed units for M207. Use P to set retract length in mm. Use Q to set retract velocity in mm/s. For firmware retraction Machinekit uses G22 and G23 in place of G10 and G11.\n\nM207 (RepRapFirmware): Calibrate Z axis with Z max endstop\n\nExample\n\nM207\n\nAfter placing the tip of the nozzle in the position you expect to be considered Z=0, issue this command to calibrate the Z axis. It will perform a z axis homing routine and calculate the distance traveled in this process. The result is stored in EEPROM as z_max_length. For using this calibration method the machine must be using a Z MAX endstop.\n\nThis procedure is usually more reliable than mechanical adjustments of a Z MIN endstop.\n\nM207 (Repetier): Set jerk without saving to EEPROMRepetier Firmware only. Change the maximum instantaneous speed change (\"jerk\") values, but don't store the change in EEPROM.\n\nSince Repetier 0.91 December 2013 [2] (if not earlier)\n\n\n\nParameters\n\n`Xnnn` Temporarily set XY jerk in mm/s\n\n`Znnn` Temporarily set Z jerk in mm/s\n\n`Ennn` Temporarily set Extruder jerk in mm/s\n\nExample\n\nM207 X10 ; Change the X/Y Jerk to 10mm/s\n\n"
   },
   "M208":{
      "prefix":"M208",
      "body":"",
      "description":"M208: Firmware dependentM208: Set unretract length\n\nParameters\n\n`Snnn` positive length surplus to the `M207 Snnn`, in mm\n\n`Fnnn` feedrate, in mm/secSets the \"recover\" (aka \"unretract\") length.\n\nM208 (RepRapFirmware): Set axis max travel\n\nParameters\n\n`Snnn` 0 = set axis maximum (default), 1 = set axis minimum\n\n`Xnnn` X axis limit\n\n`Ynnn` Y axis limit\n\n`Znnn` Z axis limit\n\n\n\nExample\n\nM208 X200 Y200 Z90; set axis maxima\n\nM208 X-5 Y0 Z0 S1; set axis minimaThe values specified set the software limits for axis travel in the specified direction. The axis limits you set are also the positions assumed when an endstop is triggered.\n\n"
   },
   "M209":{
      "prefix":"M209",
      "body":"",
      "description":"M209: Enable automatic retractWith automatic retract detection, G-code generated by slicers without G10/G11 support can take advantage of Firmware Retraction. The firmware converts E-only moves into retract/recover moves, using the firmware's tuned lengths and feedrates in place of the original E moves.\n\n\n\nExample\n\nM209 S1\n\nThe S parameter turns Automatic Retract Detection on (1) or off (0).\n\n"
   },
   "M210":{
      "prefix":"M210",
      "body":"",
      "description":"M210: Set homing feedrates\n\nExample\n\nM210 X1000 Y1500\n\nSet the feedrates used for homing to the values specified in mm per minute.\n\n"
   },
   "M211":{
      "prefix":"M211",
      "body":"",
      "description":"M211: Disable/Enable software endstopsThe boolean value S 1=enable or 0=disable controls state of software endstop.\n\nThe boolean value X, Y or Z 1=max endstop or 0=min endstop selects which endstop is controlled.\n\n\n\nExample\n\nM211 X1 Y1 Z1 S0\n\nDisables X,Y,Z max endstops\n\n\n\nExample\n\nM211 X0 S1\n\nEnables X min endstop\n\n\n\nExample\n\nM211\n\nPrints current state of software endstops.\n\n"
   },
   "M212":{
      "prefix":"M212",
      "body":"",
      "description":"M212: Set Bed Level Sensor OffsetThis G-Code command is known to be available in the newer versions of PrintrBot's branch of Marlin. It may not be available in other firmware.\n\n\n\nExample\n\nM212 Z-0.2\n\nSet the Z home to 0.2 mm lower than where the sensor says Z home is. This is extremely useful when working with printers with hard-to-move sensors, like the PrintrBot Metal Plus.\n\nPrintrBot suggests that the user make minor (0.1-0.2) adjustments between attempts and immediately executes M500 & M501 after setting this.\n\n"
   },
   "M217":{
      "prefix":"M217",
      "body":"",
      "description":"M217: Toolchange ParametersIf arguments are given, sets tool-change retract and prime length (mm), prime feedrate (mm/m), retract feedrate (mm/m), and park position/raise (mm) or Z raise (mm): S<length> P<prime_speed> R<retract_speed> X<xpos> Y<ypos> Z<zraise>. XY arguments require SINGLENOZZLE_SWAP_PARK. If no arguments are given, reports current values. Currently used to set the SINGLENOZZLE tool-change options in Marlin 2.0 and up. May be extended for other tool-changing systems in the future.\n\n"
   },
   "M218":{
      "prefix":"M218",
      "body":"",
      "description":"M218: Set Hotend OffsetSets hotend offset (in mm): T<extruder_number> X<offset_on_X> Y<offset_on_Y>.\n\n\n\nExample\n\nM218 T1 X50 Y0.5\n\n\n\nNotesIn Prusa Firmware this G-code is only active if EXTRUDERS is higher then 1 in the source code. On Original i3 Prusa MK2/s MK2.5/s MK3/s it is not active.1\n\n"
   },
   "M220":{
      "prefix":"M220",
      "body":"",
      "description":"M220: Turn off AUX V1.0.5"
   },
   "M221":{
      "prefix":"M221",
      "body":"",
      "description":"M221: Turn on AUX V1.0.5"
   },
   "M222":{
      "prefix":"M222",
      "body":"",
      "description":"M222: Set speed of fast XY moves"
   },
   "M223":{
      "prefix":"M223",
      "body":"",
      "description":"M223: Set speed of fast Z moves"
   },
   "M224":{
      "prefix":"M224",
      "body":"",
      "description":"M224: Enable extruder during fast moves"
   },
   "M225":{
      "prefix":"M225",
      "body":"",
      "description":"M225: Disable on extruder during fast moves"
   },
   "M226":{
      "prefix":"M226",
      "body":"",
      "description":"M226: Wait for pin state\n\nParameters\n\n`Pnnn` pin number\n\n`Snnn` pin state\n\n\n\nExample\n\nM226 P2 S1\n\nWait for a pin to be in some state.\n\n"
   },
   "M227":{
      "prefix":"M227",
      "body":"",
      "description":"M227: Enable Automatic Reverse and Prime\n\nExample\n\nM227 P1600 S1600\n\nP and S are steps.\n\n\"Reverse and Prime\" means, the extruder filament is retracted some distance when not in use and pushed forward the same amount before going into use again. This shall help to prevent drooling of the extruder nozzle. Teacup firmware implements this with M101/M103.\n\n"
   },
   "M228":{
      "prefix":"M228",
      "body":"",
      "description":"M228: Disable Automatic Reverse and Prime\n\nExample\n\nM228\n\nSee also M227.\n\n"
   },
   "M229":{
      "prefix":"M229",
      "body":"",
      "description":"M229: Enable Automatic Reverse and Prime\n\nExample\n\nM229 P1.0 S1.0\n\nP and S are extruder screw rotations. See also M227.\n\n"
   },
   "M230":{
      "prefix":"M230",
      "body":"",
      "description":"M230: Disable / Enable Wait for Temperature Change\n\nExample\n\nM230 S1\n\nS1 Disable wait for temperature change\n\nS0 Enable wait for temperature change\n\n"
   },
   "M231":{
      "prefix":"M231",
      "body":"",
      "description":"M231: Set OPS parameter\n\nM231 S[OPS_MODE] X[Min_Distance] Y[Retract] Z[Backslash] F[RetractMove]\n\n"
   },
   "M232":{
      "prefix":"M232",
      "body":"",
      "description":"M232: Read and reset max. advance values"
   },
   "M240":{
      "prefix":"M240",
      "body":"",
      "description":"M240: Start conveyor belt motor / Echo off\n\nExample\n\nM240\n\nThe conveyor belt allows to start mass production of a part with a reprap.\n\nEchoing may be controlled in some firmwares with M111.\n\n"
   },
   "M241":{
      "prefix":"M241",
      "body":"",
      "description":"M241: Stop conveyor belt motor / echo on\n\nExample\n\nM241\n\nEchoing may be controlled in some firmwares with M111.\n\n"
   },
   "M245":{
      "prefix":"M245",
      "body":"",
      "description":"M245: Start cooler\n\nExample\n\nM245\n\nused to cool parts/heated-bed down after printing for easy remove of the parts after print\n\n"
   },
   "M246":{
      "prefix":"M246",
      "body":"",
      "description":"M246: Stop cooler\n\nExample\n\nM246\n\n"
   },
   "M250":{
      "prefix":"M250",
      "body":"",
      "description":"M250: Set LCD contrast\n\nExample\n\nM250 C20\n\nSets LCD contrast C<contrast value> (value 0..63), if available.\n\n"
   },
   "M251":{
      "prefix":"M251",
      "body":"",
      "description":"M251: Measure Z steps from homing stop (Delta printers)\n\nExamples\n\nM251 S0; Reset\n\nM251 S1; Print\n\nM251 S2; Store to Z length (also EEPROM if enabled)\n\n(This is a Repetier-Firmware only feature.)\n\n"
   },
   "M260":{
      "prefix":"M260",
      "body":"",
      "description":"M260: i2c Send DataBuffer and send data over the i2c bus. Use A to set the address from 0-127. Add up to 32 bytes to the buffer with each B. Send and reset the buffer with S.\n\n\n\nParameters (Marlin, MK4duo)\n\nAnn I2C address\n\nBnn Byte to buffer or send\n\nS If present, sends the bytes that have been buffered\n\n\n\nExamples\n\nM260 A5 B65 S; Send 'A' to Address 5 now\n\nM260 A0      ; Set address to 0 (broadcast)\n\nM260 B77 ; M\n\nM260 B97 ; a\n\nM260 B114; r\n\nM260 B108; l\n\nM260 B105; i\n\nM260 B110; n\n\nM260 S1  ; Send the current buffer\n\n\n\nParameters (RepRapFirmware)\n\nAnn I2C address\n\nBnn:nn:nn... Bytes to send\n\nSnn Number of bytes to receive (optional, RepRapFirmware 2.02 and later)\n\n\n\nExamples\n\nM260 A5 B65                   ; Send 'A' to address 5\n\nM260 A\"0x7F\" B65              ; Send 'A' to address 7F (hex)\n\nM260 A0 B82:101:112:82:97:112 ; Send 'RepRap' to address 0\n\nRepRapFirmware does not use the S parameter, instead the address and all the bytes to send are specified in a single command.\n\n"
   },
   "M261":{
      "prefix":"M261",
      "body":"",
      "description":"M261: i2c Request DataRequest data from an i2c slave device. This command simply relays the received data to the host.\n\n\n\nParameters\n\nAnn I2C address\n\nBnn How many bytes to request\n\n\n\nExample\n\nM261 A99 B5; Request 5 bytes from Address 99\n\nBoth M260 and M261 are commands demonstrating use of the i2c bus (TWIBus class) in Marlin Firmware. Developers and vendors can make Marlin an i2c master device by enabling EXPERIMENTAL_I2CBUS, and Marlin can act as a slave device by setting I2C_SLAVE_ADDRESS from 8-127. This class can be used to divide up processing responsibilities between multiple instances of Marlin running on multiple boards. For example, one board might control a Z axis with 4 independent steppers to create a self-leveling system, or a second board could drive the graphical display while the first board handles printing.\n\n"
   },
   "M280":{
      "prefix":"M280",
      "body":"",
      "description":"M280: Set servo positionSet servo position absolute.\n\n\n\nParameters\n\n`Pnnn` Servo index\n\n`Snnn` Angle or microseconds\n\n`I1` Invert polarity (RepRapFirmware only)\n\n\n\nExample\n\nM280 P1 S50\n\nMarlin and RepRapFirmware treat S values below 200 as angles, and 200 or greater as the pulse width in microseconds.\n\nIn RepRapFirmware, the servo index is the same as the pin number for the M42 command. See https://duet3d.com/wiki/Using_servos_and_controlling_unused_I/O_pins for details.\n\nRepRapFirmware supports the optional I1 parameter, which if present causes the polarity of the servo pulses to be inverted compared to normal for that output pin. The I parameter is not remembered between M280 commands (unlike the I parameter in M106 commands), so if you need inverted polarity then you must include I1 in every M280 command you send.\n\n\n\n Duet 0.8.5 M280 P value to Expansion Port Pin Mapping\n\n\n\n\n\n P\n\n\n\n Name\n\n\n\n Expansion Port Pin\n\n\n\n\n\n Use M307 H# A-1 C-1 D-1 before using these pins\n\n\n\n\n\n3\n\nPC23_PWML6\n\n21\n\n\n\n\n\n4\n\nPC22_PWML5\n\n22\n\n\n\n\n\n5\n\nPC21_PWML4\n\n23\n\nOn the Duet 0.6, pin 18 is controlled by heater 2. On the 0.8.5, pin 18 is controlled by heater 6, but is also shared with fan1. In order to use this pin, the fan must be disabled (M106 P1 I-1). See Using servos and controlling unused I/O pins\n\n\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "M290":{
      "prefix":"M290",
      "body":"",
      "description":"M290: Babystepping\n\nParameters (RepRapFirmware)\n\n`Snnn` Amount to baby step Z in mm. Positive values raise the head, negative values lower it.\n\n`Xnnn, Ynnn, ...` Amount to baby step other axes in mm (optional, supported in later RepRapFirmware versions)\n\n`Znnn` Synonym for S (RepRapFirmware 1.21 and later)\n\n`Rn` (Optional, RepRapFirmware 1.21 and later) R1 = relative (add to any existing babystep amount, the default), R0 = absolute (set babystepping offset to the specified amount)\n\n\n\nExamples\n\nM290 S0.05 ; babystep the head up 0.05mm\n\nM290 R0 S0 ; clear babystepping (RepRapFirmware 1.21 and later only)\n\n\n\nParameters (Repetier)\n\n`Znnn` Amount to baby step in mm. Positive values raise the head, negative values lower it.\n\n\n\nExamples\n\nM290 S0.05 ; babystep the head up 0.05mm\n\n\n\nAdditional Parameters (Marlin 1.1.7 and later)\n\n`Xnnn` Amount to babystep X in current units. (Requires `BABYSTEP_XY`)\n\n`Ynnn` Amount to babystep Y in current units. (Requires `BABYSTEP_XY`)\n\n`Znnn` Amount to babystep Z in current units. Synonym for '`S`' parameter.\n\n\n\nExample\n\nM290 X0.2 Z0.05; Babystep X by 0.2mm, Z by 0.05mm\n\nThis command tells the printer to move the axis (or axes) transparently to the motion system. This is like physically moving the axes by force, but much nicer to the machine.\n\nIn RepRapFirmware M290 with no parameters reports the accumulated baby stepping offset. Marlin doesn't track accumulated babysteps.\n\nIn RepRapFirmware 1.19 and earlier, the babystepping offset is reset to zero when the printer is homed or the bed is probed. In RepRapFirmware 1.21 and later, homing and bed probing don't reset babystepping, but you can reset it explicitly using M290 R0 S0.\n\nNote: If the BABYSTEP_ZPROBE_OFFSET option is used in Marlin, this command also affects the Z probe offset (as set by M851) and that offset will be saved to EEPROM.\n\n"
   },
   "M291":{
      "prefix":"M291",
      "body":"",
      "description":"M291: Display message and optionally wait for response\n\nParameters\n\n`P\"message\"` The message to display, which must be enclosed in double quotation marks. If the message itself contains a double quotation mark, use two double quotation marks to represent it.\n\n`R\"message\"` Optional title for the message box. Must be enclosed in double quotation marks too.\n\n`Sn` Message box mode (defaults to 1)\n\n`Tn` Timeout in seconds, only legal for S=0 and S=1. The message will be cancelled after this amount of time, if the user does not cancel it before then. A zero or negative value means that the message does not time out (it may still be cancelled by the user if it has a Close button). In RepRapFirmware, the default timeout for messages that do not require acknowledgement is 10 seconds.\n\n`Zn` 0 = no special action, 1 = display Z jog buttons alongside the message to allow the user to adjust the height of the print head\n\n\n\nExamples\n\nM291 P\"Please do something and press OK when done\" S2\n\nM291 P\"This message will be closed after 10 seconds\" T10\n\nThis command provides a more flexible alternative to M117, in particular messages that time out, messages that suspend execution until the user acknowledges them, and messages that allow the user to adjust the height of the print head before acknowledging them.\n\nAllowed message box modes include:\n\n\n\n0. No buttons are displayed (non-blocking)\n\n1. Only \"Close\" is displayed (non-blocking)\n\n2. Only \"OK\" is displayed (blocking, send M292 to resume the execution)\n\n3. \"OK\" and \"Cancel\" are displayed  (blocking, send M292 to resume the execution or M292 P1 to cancel the operation in progress)\n\nThe combination S0 T0 is not permitted, because that would generate a message box with no close button and that never times out, which would  lock up the user interface.\n\nDuet Web Control 2.0.3 and later supports HTML in the message body.\n\n"
   },
   "M292":{
      "prefix":"M292",
      "body":"",
      "description":"M292: Acknowledge message\n\n Parameters\n\n `Pn` Whether the current operation shall be cancelled. Only legal if M291 was called with S=3 (optional)This command is sent by the user interface when the user acknowledges a message that was displayed because of a M291 command with parameter S=2 or S=3.\n\n"
   },
   "M300":{
      "prefix":"M300",
      "body":"",
      "description":"M300: Play beep sound\n\nParameters\n\n`Snnn` frequency in Hz\n\n`Pnnn` duration in milliseconds\n\n\n\nExample\n\nM300 S300 P1000\n\nPlay beep sound, use to notify important events like the end of printing. See working example on R2C2 electronics.\n\nIf an LCD device is attached to RepRapFirmware, a sound is played via the add-on touch screen control panel. Else the web interface will play a beep sound.\n\n\n\nNotes1In Prusa Firmware the defaults are 100Hz and 1000ms, so that M300 without parameters will beep for a second.\n\n2Klipper does not support M300 by default, however it can be easily added as a G-code macro\n\n"
   },
   "M301":{
      "prefix":"M301",
      "body":"",
      "description":"M301: Set PID parameters\n\nParameters\n\n`Hnnn` heater number (Smoothie uses 'S', Redeem uses 'E')\n\n`Pnnn` proportional (Kp)\n\n`Innn` integral (Ki)\n\n`Dnnn` derivative (Kd)\n\n\n\nExamples\n\nM301 H1 P1 I2 D3; Marlin, RepRapFirmware\n\nM301 S0 P30 I10 D10; Smoothie\n\nM301 E0 P30 I10 D10; Redeem (E = Extruder, -1=Bed, 0=E, 1=H, 2=A, 3=B, 4=C, default = 0)\n\nSets Proportional (P), Integral (I) and Derivative (D) values for hot end. See also PID Tuning.\n\nMK4duoH[heaters] H = 0-5 Hotend, H = -1 BED, H = -2 CHAMBER, H = -3 COOLER\n\nMarlinHot end only; see M304 for bed PID. H is the heater number, default 1 (i.e. first extruder heater).\n\nRepRapFirmware 1.15 onwardsIn RepRapFirmware 1.15 and later the M301 is supported as described above, but it is not normally used. Instead the heater model is defined by M307 or found by auto tuning, and the firmware calculates the PID parameters from the model. An M301 command can be used in config.g after the M307 command for that heater to override the firmware-computed PID parameters.\n\nRepRapFirmware 1.09 to 1.14 inclusive\n\n `H` Is the heater number, and is compulsory. H0 is the bed, H1 is the first hot end, H2 the second etc.\n\n `P` Interprets a negative P term as indicating that bang-bang control should be used instead of PID (not recommended for the hot end, but OK for the bed heater).\n\n `I` Integral value\n\n `D` Derivative value\n\n `T` Is the approximate additional PWM (on a scale of 0 to 255) needed to maintain temperature, per degree C above room temperature. Used to preset the I-accumulator when switching from heater fully on/off to PID.\n\n `S` PWM scaling factor, to allow for variation in heater power and supply voltage. Is designed to allow a correction to be made for a change in heater power and/or power supply voltage without having to change all the other parameters. For example, an S factor of 0.8 means that the final output of the PID controller should be scaled to 0.8 times the standard value, which would compensate for a heater that is 25% more powerful than the standard one or a supply voltage that is 12.5% higher than standard.\n\n `W` Wind-up. Sets the maximum value of I-term, must be high enough to reach 245C for ABS printing.\n\n `B` PID Band. Errors larger than this cause heater to be on or off.\n\nAn example using all of these would be:\n\n\n\nM301 H1 P20 I0.5 D100 T0.4 S1 W180 B30\n\nSmoothieS0 is 0 for the hotend, and 1 for the bed, other numbers may apply to your configuration, depending on the order in which you declare temperature control modules.\n\nOther implementationsW: Wind-up. Sets the maximum value of I-term, so it does not overwhelm other PID values, and the heater stays on. (Check firmware support - Sprinter, Marlin?)\n\n\n\nExample\n\nM301 W125\n\nTeacupSee M130, M131, M132, M133 for Teacup's codes for setting the PID parameters.\n\n"
   },
   "M302":{
      "prefix":"M302",
      "body":"",
      "description":"M302: Allow cold extrudes\n\nParameters\n\n`Snnn` Cold extrude minimum temperature (also in RepRapFirmware 2.02 and later)\n\n`Pnnn` Cold extrude allow state (RepRapFirmware)\n\n`Rnnn` Cold retraction minimum temperature (RepRapFirmware 2.02 and later)\n\nExamples (RepRapFirmwre)\n\nM302      ; Report current state\n\nM302 P1   ; Allow cold extrusion\n\nM302 S120 R110; Allow extrusion starting from 120\u00b0C and retractions already from 110\u00b0C\n\n\n\nExamples (Others)\n\nM302 S0   ; Allow extrusion at any temperature\n\nM302 S170 ; Allow extrusion above 170\n\nThis tells the printer to allow movement of the extruder motor above a certain temperature, or if disabled, to allow extruder movement when the hotend is below a safe printing temperature.\n\n\n\nNotes1RepRapFirmware uses the P[0|1] parameter instead of S[temperature], and for M302 with no parameters it will report the current cold extrusion state.\n\n"
   },
   "M303":{
      "prefix":"M303",
      "body":"",
      "description":"M303: Run PID tuningPID Tuning refers to a control algorithm used in some repraps to tune heating behavior for hot ends and heated beds. This command generates Proportional (Kp), Integral (Ki), and Derivative (Kd) values for the hotend or bed (E-1). Send the appropriate code and wait for the output to update the firmware.\n\nHot end usage:\n\n\n\nM303 S<temperature> C<cycles>\n\nBed usage (repetier, not sure whether cycles work here):\n\n\n\nM303 P1 S<temperature>\n\nBed usage (others):\n\n\n\nM303 E-1 C<cycles> S<temperature>\n\n\n\nExample\n\nM303 C8 S175\n\nSmoothie's syntax, where E0 is the first temperature control module (usually the hot end) and E1 is the second temperature control module (usually the bed):\n\n\n\nM303 E0 S190\n\nIn RepRapFirmware, this command computes the process model parameters (see M307), which are in turn used to calculate the PID constants. H is the heater number, P is the PWM to use (default 0.5), and S is the maximum allowable temperature (default 225). Tuning is performed asynchronously. Run M303 with no parameters to see the current tuning state or the last tuning result.\n\n\n\nExample\n\nM303 H1 P0.4 S240; tune heater 1 using 40% PWM, quit if temperature exceeds 240C\n\n\n\nNotesIn Marlin Firmware you can add the U1 parameter to apply the PID results to current settings upon completion.\n\n"
   },
   "M304":{
      "prefix":"M304",
      "body":"",
      "description":"M304: Set PID parameters - Bed\n\nParameters\n\n`Pnnn` proportional (Kp)\n\n`Innn` integral (Ki)\n\n`Dnnn` derivative (Kd)\n\n\n\nExamples\n\nM304 P1 I2 D3; set kP=3, kI=2, kD=3\n\nM304 P1 I2 D3 T0.7 B20 W127; RepRapFirmware\n\nM304         ; Report parameters\n\nSets Proportional, Integral and Derivative values for bed. RepRapFirmware interprets a negative P term as indicating that bang-bang control should be used instead of PID. In RepRapFirmware, this command is identical to M301 except that the H parameter (heater number) defaults to zero.\n\nSee also PID Tuning.\n\nM304 in RepRapPro version of Marlin: Set thermistor valuesIn the RepRapPro version of Marlin ( https://github.com/reprappro/Marlin ) M304 is used to set thermistor values (as M305 is in later firmwares). RRP Marlin calculates temperatures on the fly, rather than using a temperature table. M304 Sets the parameters for temperature measurement.\n\n\n\nExample\n\nM304 H1 B4200 R4800 T100000\n\nThis tells the firmware that for heater 1 (H parameter: 0 = heated bed, H = first extruder), the thermistor beta (B parameter) is 4200, the thermistor series resistance (R parameter) is 4.8Kohms, the thermistor 25C resistance (T parameter) is 100Kohms. All parameters other than H are optional. If only the H parameter is given, the currently-used values are displayed. They are also displayed within the response to M503.\n\n"
   },
   "M305":{
      "prefix":"M305",
      "body":"",
      "description":"M305: Set thermistor and ADC parameters\n\nParameters\n\n`Pnnn` Heater number, or virtual heater number\n\n`S\"name\"` Heater name (optional, RepRapFirmware only)\n\n`Tnnn` (for thermistor sensors) Thermistor resistance at 25oC\n\n`T\"c\"` (for MAX31856-based thermocouple sensors) The thermistor type letter, default K\n\n`Bnnn` Beta value, or the reciprocal of the Steinhart-Hart thermistor model B coefficient\n\n`Cnnn` Steinhart-Hart C coefficient (MK4duo and RepRapFirmware 1.17 and later), default 0\n\n`Rnnn` Series resistor value\n\n`Lnnn` ADC low offset correction, default 0\n\n`Hnnn` ADC high offset correction, default 0\n\n`Xnnn` Heater ADC channel, or thermocouple or PT100 or current loop adapter channel, defaults to the same value as the `P` parameter\n\n`Fnn ` (where nn is 50 or 60) If the sensor interface uses a MAX31856 thermocouple chip or MAX31865 PT100 chip, this is the local mains frequency. Readings will be timed to optimise rejection of interference at this frequency.\n\n\n\nExample\n\nM305 P1 T100000 R1000 B4200\n\nSets the parameters for temperature measurement. The example above tells the firmware that for heater 1 (P parameter: 0 = heated bed, 1 = first extruder) the thermistor 25C resistance (T parameter) is 100Kohms, the thermistor series resistance (R parameter) is 1Kohms, the thermistor beta (B parameter) is 4200. All parameters other than P are optional. If only the P parameter is given, the existing values are displayed.\n\n\n\nExample\n\nM305 P1 T100000 R1000 B4200 H14 L-11 X2\n\nThe H correction affects the reading at high ADC input voltages, so it has the greatest effect at low temperatures. The L correction affects the reading at low input voltages, which correspond to high temperatures.\n\nThe X parameter tells the firmware to use the thermistor input corresponding to a different heating channel. RepRapFirmware also allow an external SPI thermocouple interface (such as the MAX31855) or PT100 interface (MAX31865) to be configured. MAX31855 thermocouple channels are numbered from 100, MAX31856 thermocouple channels are numbered from 150, PT100 channels from 200 and current loop channels from 300. Channel 1000 is the CPU temperature indication, 1001 is the temperature of the hottest stepper motor driver on the main board, and 1001 is the temperature of the hottest drivers on the expansion board.\n\nIn the above example, the ADC high end correction (H parameter) is 14, the ADC low end correction (L parameter) is -11, and thermistor input #2 is used to measure the temperature of heater #1.\n\n"
   },
   "M306":{
      "prefix":"M306",
      "body":"",
      "description":"M306: Set home offset calculated from toolhead position\n\nExample\n\nM306 Z0\n\nThe values specified are added to the calculated end stop position when the axes are referenced. The calculated value is derived from the distance of the toolhead from the current axis zero point.\n\nThe user would typically place the toolhead at the zero point of the axis and issue the M306 command.\n\nThis value can be saved to EEPROM using the M500 command (as M206 value).\n\nImplemented in Smoothieware\n\n"
   },
   "M307":{
      "prefix":"M307",
      "body":"",
      "description":"M307: Set or report heating process parameters\n\nParameters\n\n`Hn` Heater number (0 is usually the bed heater)\n\n`Annn` gAin, expressed as ultimate temperature rise obtained in degC divided by the PWM fraction. For example, if G=180 then at 50% PWM the ultimate temperature rise would be 90C.\n\n`Cnnn` dominant time Constant of the heating process in seconds\n\n`Dnnn` Dead time in seconds\n\n\n\nFour optional additional parameters help control the heating process\n\n\n\n`Fnnn` PWM frequency to use (not supported in RepRapFirmware 3, use M950 instead).\n\n`Bn`   selects Bang-bang control instead of PID if non-zero. Default at power-up is 0 for extruder heaters, 1 for bed and chamber heaters.\n\n`Snnn` maximum PWM to be used used with this heater on a scale of 0 to 1. Default 1.0.\n\n`Vnnn` VIN supply voltage at which the A parameter was calibrated (RepRapFirmware 1.20 and later). This allows the PID controller to compensate for changes in supply voltage. A value of zero (the default) disables compensation for changes in supply voltage.\n\n\n\nExamples\n\nM307 H0; report the process parameters for heater 0\n\nM307 H1 A346.2 C140 D5.3 B0 S0.8 V23.8; set process parameters for heater 1, use PID, and limit heater 1 PWM to 80%\n\nEach heater and its corresponding load may be approximated as a first order process with dead time, which is characterised by the gain, time constant and dead time parameters. The model can used to calculate optimum PID parameters, using different values for the heating or cooling phase and the steady state phase. It is also used to better detect heater faults. In future it may be used to calculate feed-forward terms to better respond to changes in the load. Normally these model parameters are found by auto tuning - see M303.\n\nRepRapFirmware 1.16 and later allow the PID controller for a heater to be disabled by setting the A, C, and D parameters to -1. This frees up the corresponding heater control pin for use as a general purpose I/O pin to use with the M42 or M280 command. In RepRapFirmware 3, M950 should be used to free up the pin instead.\n\n"
   },
   "M308":{
      "prefix":"M308",
      "body":"",
      "description":"M308: Set or report sensor parameters\n\nCommon Parameters\n\n`Sn` Sensor number\n\n`P\"pin_name\"` The name of the control board pin that this sensor uses. For thermistors it is the thermistor input pin name. For sensors connected to the SPI bus it is the name of the output pin used as the chip select.\n\n`Y\"sensor_type\"` The sensor and interface type, e.g. \"thermistor\", \"pt1000\", \"rtdmax31865\", \"max31855\", \"max31856\", \"linear-analog\", \"dht22-temp\", \"dht22-humidity\", \"current-loop-pyro\"\n\n`A\"name\"` Sensor name (optional), displayed in the web interface\n\n\n\nAdditional parameters for thermistors\n\n`Tnnn` (for thermistor sensors) Thermistor resistance at 25oC\n\n`Bnnn` Beta value, or the reciprocal of the Steinhart-Hart thermistor model B coefficient\n\n`Cnnn` Steinhart-Hart C coefficient, default 0\n\n`Rnnn` Series resistor value\n\n`Lnnn` ADC low offset correction, default 0 (ignored if the hardware supports automatic ADC gain and offset calibration)\n\n`Hnnn` ADC high offset correction, default 0 (ignored if the hardware supports automatic ADC gain and offset calibration)\n\n\n\nAdditional parameters for PT1000 sensors\n\n`Rnnn` Series resistor value\n\n`Lnnn` ADC low offset correction, default 0 (ignored if the hardware supports automatic ADC gain and offset calibration)\n\n`Hnnn` ADC high offset correction, default 0 (ignored if the hardware supports automatic ADC gain and offset calibration)\n\n\n\nAdditional parameters for MAX31856-based thermocouple sensors\n\n`T\"c\"` The thermistor type letter, default K\n\n`Fnn ` (where nn is 50 or 60) The local mains frequency. Readings will be timed to optimise rejection of interference at this frequency.\n\n\n\nAdditional parameters for MAX31865-based PT100 sensors\n\n`Rnnn` Series resistor value\n\n`Fnn ` (where nn is 50 or 60) The local mains frequency. Readings will be timed to optimise rejection of interference at this frequency.\n\n\n\nAdditional parameters for linear analog sensors\n\n`Fn` F0 = unfiltered (fast response), F1 = filtered (slower response, but noise reduced and ADC oversampling used to increase resolution)\n\n`Lnnn` The temperature or other value when the ADC output is zero\n\n`Hnnn` The temperature or other value when the ADC output is full scaleThis code replaces M305 in RepRapFirmware 3. In earlier versions of RepRapFirmware, sensors only existed in combination with heaters, which necessitated the concept of a \"virtual heater\" to represent a sensor with no associated heater (e.g. MCU temperature sensor). RepRapFirmware 3 allows sensors to be defined independently of heaters. The association between heaters and sensors is defined using M950.\n\nM308 can be used in the following ways:\n\n\n\nM308 Snn Y\"type\" P\"pin\" [other parameters]; delete sensor nn if it exists, create a new one with default settings, and configure it using the other parameters\n\nM308 Snn; report the settings of sensor nn\n\nM308 A\"name\"; report the settings of the first sensor named \"name\"\n\nM308 Snn [any other parameters except Y]; amend the settings of sensor nn\n\nSensor type names obey the same rules as pin names, i.e. case is not significant, neither are hyphen and underscore characters.\n\n"
   },
   "M320":{
      "prefix":"M320",
      "body":"",
      "description":"M320: Activate autolevel (Repetier)\n\nUsage\n\n`M320`\n\n`M320 S1`\n\n\n\nParameters\n\n`Snnn` if greater than 0, activate and store persistently in EEPROM\n\n\n\nExamples\n\nM320   ; temporarily activate auto leveling\n\nM320 S1; permanently activate auto leveling\n\nParameter Snnn is optional.\n\n(Repetier only)\n\n"
   },
   "M321":{
      "prefix":"M321",
      "body":"",
      "description":"M321: Deactivate autolevel (Repetier)\n\nUsage\n\n`M321`\n\n`M321 S1`\n\n\n\nParameters\n\n`Snnn` if greater than 0, deactivate and store persistently in EEPROM\n\n\n\nExamples\n\nM321   ; temporarily deactivate auto leveling\n\nM321 S1; permanently deactivate auto leveling\n\nParameter Snnn is optional.\n\n(Repetier only)\n\n"
   },
   "M322":{
      "prefix":"M322",
      "body":"",
      "description":"M322: Reset autolevel matrix (Repetier)\n\nUsage\n\n`M322`\n\n`M322 S1`\n\n\n\nParameters\n\n`Snnn` if greater than 0, also reset the matrix values saved EEPROM\n\n\n\nExamples\n\nM322   ; temporarily reset auto level matrix\n\nM322 S1; permanently reset auto level matrix\n\nParameter Snnn is optional.\n\n(Repetier only)\n\n"
   },
   "M323":{
      "prefix":"M323",
      "body":"",
      "description":"M323: Distortion correction on/off (Repetier)\n\nUsage\n\n`M323`\n\n`M323 Snnn`\n\n`M323 Snnn Pnnn`\n\n\n\nParameters\n\n`Snnn` 0 (disable correction) or 1 (enable correction)\n\n`Pnnn` 1 (store correction state persistently in EEPROM)\n\n\n\nExamples\n\nM323      ; Show if distortion correction is enabled\n\nM323 S0   ; Disable distortion correction temporarily\n\nM323 S1 P1; Enable distortion correction permanently\n\n(Repetier only)\n\nControls distortion correction feature after having set it up using G33.\n\n"
   },
   "M340":{
      "prefix":"M340",
      "body":"",
      "description":"M340: Control the servos(Repetier only ,Marlin see M280)\n\nM340 P<servoId> S<pulseInUS>   / ServoID = 0..3  pulseInUs = 500..2500\n\nServos are controlled by a pulse width normally between 500 and 2500 with 1500ms in center position. 0 turns servo off.\n\n"
   },
   "M350":{
      "prefix":"M350",
      "body":"",
      "description":"M350: Set microstepping modeSets microstepping mode.\n\nWarning: Steps per unit remains unchanged; except that in RepRapFirmware the steps/mm will be adjusted automatically.\n\n\n\nUsage\n\n`M350 Snn Xnn Ynn Znn Enn Bnn`\n\n\n\nParameters\n\nNot all parameters need to be used, but at least one should be used. As with other commands, RepRapFirmware reports the current settings if no parameters are used.\n\n`Snn` Set stepping mode for all drivers (not supported by RepRapFirmware)\n\n`Xnn` Set stepping mode for the X axis\n\n`Ynn` Set stepping mode for the Y axis\n\n`Znn` Set stepping mode for the Z axis\n\n`Enn` Set stepping mode for Extruder 0 (for RepRapFirmware use `Enn:nn:nn` etc. for multiple extruders)\n\n`Bnn` Set stepping mode for Extruder 1 (not supported by RepRapFirmware, see above)\n\n`Inn` Enable (nn=1) or disable (nn=0) microstep interpolation mode for the specified drivers, if they support it (RepRapFirmware only)\n\n\n\nModes (nn)\n\n1 = full step\n\n2 = half step\n\n4 = quarter step\n\n8 = 1/8 step\n\n16 = 1/16 step\n\n64 = 1/64 step\n\n128 = 1/128 step\n\n256 = 1/256 step\n\n\n\nExamples\n\nM350 S16   ; reset all drivers to the default 1/16 micro-stepping - not supported by RepRapFirmware\n\nM350 Z1    ; set the Z-axis' driver to use full steps\n\nM350 E4 B4 ; set both extruders to use quarter steps - Marlin/Repetier\n\nM350 E4:4:4; set extruders 0-2 to use quarter steps - RepRapFirmware\n\n"
   },
   "M351":{
      "prefix":"M351",
      "body":"",
      "description":"M351: Toggle MS1 MS2 pins directly\n\nExample\n\nM351\n\n"
   },
   "M355":{
      "prefix":"M355",
      "body":"",
      "description":"M355: Turn case lights on/off\n\nExamples\n\nM355 S1; Enable lights\n\nM355 S0; Disable lights\n\nM355   ; Report status\n\nEvery call or change over LCD menu sends a state change for connected hosting software like:\n\n\n\nCase lights on\n\nCase lights off\n\nNo case lights\n\n"
   },
   "M360":{
      "prefix":"M360",
      "body":"",
      "description":"M360: Move to Theta 0 degree positionThe arms move into a position where the Theta steering arm is parallel to the top platform edge. The user then calibrates the position by moving the arms with the jog buttons in software like pronterface until it is perfectly parallel. Using M114 will then display the calibration offset that can then be programmed into the unit using M206 (Home offset) X represents Theta.\n\nSmoothieware: M360 P0 will take the current position as parallel to the platform edge, and store the offset in the homing trim offset (M666)  No further user interaction is needed.\n\n"
   },
   "M361":{
      "prefix":"M361",
      "body":"",
      "description":"M361: Move to Theta 90 degree positionTheta move to 90 degrees with platform edge. User calibrates by using jog arms to place exactly 90 degrees. Steps per degree can then be read out by using M114, and programmed using M92. X represents Theta. Program Y (Psi) to the same value initially. Remember to repeat M360 after adjusting steps per degree.\n\nSmoothieware: M360 P0 will accept the current position as 90deg to platform edge. New steps per angle is calculated and entered into memory (M92)  No further user interaction is required, except to redo M360.\n\n"
   },
   "M362":{
      "prefix":"M362",
      "body":"",
      "description":"M362: Move to Psi 0 degree positionArms move to Psi 0 degree. Check only after other Theta calibrations\n\n"
   },
   "M363":{
      "prefix":"M363",
      "body":"",
      "description":"M363: Move to Psi 90 degree positionArms move to Psi 90 degree. Check only after other Theta calibrations\n\n"
   },
   "M364":{
      "prefix":"M364",
      "body":"",
      "description":"M364: Move to Psi + Theta 90 degree positionMove arms to form a 90 degree angle between the inner and outer Psi arms. Calibrate by moving until angle is exactly 90 degree. Read out with M114, and calibrate value into Home offset M206. Psi is represented by Y.\n\nSmoothieware: M364 P0 will accept the current position as 90deg between arms. The offset is stored as a trim offset (M666) and no further user interaction is required except to save all changes via M500.\n\n"
   },
   "M365":{
      "prefix":"M365",
      "body":"",
      "description":"M365: SCARA scaling factorAdjust X Y and Z scaling by entering the factor. 100% scaling (default) is represented by 1\n\n"
   },
   "M366":{
      "prefix":"M366",
      "body":"",
      "description":"M366: SCARA convert trimExecuting this command translates the calculated trim values of the SCARA calibration to real home offsets. This prevents the home and trim movement after calibration.\n\n"
   },
   "M370":{
      "prefix":"M370",
      "body":"",
      "description":"M370: Morgan manual bed level - clear mapClear the map and prepare for calibration\n\n\n\nUsage\n\n`M370`\n\n`M370 X[divisions] Y[divisions]`Without parameters is defaults to X5 Y5 (25 calibration points)\n\nWhen specifying parameters, uneven numbers are recommended.\n\n"
   },
   "M371":{
      "prefix":"M371",
      "body":"",
      "description":"M371: Move to next calibration positionMove to the next position for calibration. User moves the bed towards the hotend until it just touches\n\n"
   },
   "M372":{
      "prefix":"M372",
      "body":"",
      "description":"M372: Record calibration value, and move to next positionThe position of the bed is recorded and the machine moves to the next position. Repeat until all positions programmed\n\n"
   },
   "M373":{
      "prefix":"M373",
      "body":"",
      "description":"M373: End bed level calibration modeEnd calibration mode and enable z correction matrix. Does not save current matrix\n\n"
   },
   "M374":{
      "prefix":"M374",
      "body":"",
      "description":"M374: Save calibration gridSaves the calibration grid.\n\n\n\nParameters\n\n`extension` (Smoothieware only) Extension of the grid file\n\n`P\"filename\"` (RepRapFirmware only) Name of the file to save to\n\n`Z` (Smoothieware only) Also save the `M206` Z homing offset into the grid file\n\n\n\nUsage (Smoothieware)\n\nM374\n\nM374 <file extension> Z\n\n\n\nUsage (RepRapFirmware)\n\nM374\n\nM374 P\"MyAlternateHeightMap.csv\"\n\nIn Smoothieware, without parameters this saves the grid into the default grid file that gets loaded at boot. The optional parameter specifies the extension of the grid file - useful for special grid files such as for a special print surface like a removable print plate. Addition of Z will additionally save the M206 Z homing offset into the grid file.\n\nIn RepRapFirmware, this saves the grid parameters and height map into the specified file, or the default file heightmap.csv if no filename was specified. To load the height map automatically at startup, use command M375 in the config.g file.\n\n"
   },
   "M375":{
      "prefix":"M375",
      "body":"",
      "description":"M375: Display matrix / Load MatrixDisplays the bed level calibration matrix (Marlin), or loads the grid matrix file (Smoothieware and RepRapFirmware)\n\n\n\nParameters\n\n`extension` (Smoothieware only)\n\n`P\"filename\"` (RepRapFirmware only)\n\n\n\nUsage\n\nM375\n\nM375 [file extension]; (Smoothieware only)\n\nM375 P\"MyAlternateHeightMap.csv\"; (RepRapFirmware only)\n\nWithout parameters loads default grid, and with specified extension or specified filename attempts to load the specified grid. If not available will not modify the current grid.\n\nIn Smoothieware, if Z was saved with the grid file, it will load the saved Z with the grid.\n\n"
   },
   "M376":{
      "prefix":"M376",
      "body":"",
      "description":"M376: Set bed compensation taper\n\nParameters\n\n`Hnnn` Height (mm) over which to taper off the bed compensation\n\n\n\nExample\n\nM376 H10\n\nThis command specifies that bed compensation should be tapered off over the specified height, so that no bed compensation is applied at and above that height. If H is zero or negative then no tapering is applied, so compensation is performed throughout the entire print.\n\nIf the firmware does not adjust the extrusion amount to compensate for the changing layer height while tapering is being applied, you will get under- or over-extrusion. Using a large taper height will reduce this effect. For example, if the taper height is 50 times the largest bed height error, then under- or over-extrusion will be limited to 2%.\n\n"
   },
   "M380":{
      "prefix":"M380",
      "body":"",
      "description":"M380: Activate solenoid\n\nExample\n\nM380\n\nActivates solenoid on active extruder.\n\n"
   },
   "M381":{
      "prefix":"M381",
      "body":"",
      "description":"M381: Disable all solenoids\n\nExample\n\nM381\n\n"
   },
   "M400":{
      "prefix":"M400",
      "body":"",
      "description":"M400: Wait for current moves to finish\n\nExample\n\nM400\n\nFinishes all current moves and and thus clears the buffer. That's identical to G4 P0 for Teacup printers.\n\n"
   },
   "M401":{
      "prefix":"M401",
      "body":"",
      "description":"M401: Lower z-probe\n\nParameters\n\n P (RepRapFirmware only) Probe number, default 0 \n\n\n\nExample\n\nM401\n\nM401 P1\n\nLower z-probe if present. In RepRapFirmware this runs macro file sys/deployprobe#.g (where # is the probe number) if it exists, otherwise sys/deployprobe.g if it exists.\n\n"
   },
   "M402":{
      "prefix":"M402",
      "body":"",
      "description":"M402: Raise z-probe\n\nParameters\n\n P (RepRapFirmware only) Probe number, default 0 \n\n\n\nExample\n\nM402\n\nM402 P1\n\nRaise z-probe if present. In RepRapFirmware this runs macro file sys/retractprobe#.g (where # is the probe number) if it exists, otherwise sys/retractprobe.g if it exists.\n\n"
   },
   "M403":{
      "prefix":"M403",
      "body":"",
      "description":"M403: Set filament type (material) for particular extruder and notify the MMU\n\nParameters\n\n`E` Extruder number\n\n`F` Filament typeCurrently three different materials are needed (default, flex and PVA).\n\nAnd storing this information for different load/unload profiles etc. in the future firmware does not have to wait for \"ok\" from MMU.\n\n"
   },
   "M404":{
      "prefix":"M404",
      "body":"",
      "description":"M404: Filament width and nozzle diameter\n\nParameters\n\n`Nnnn` Filament width (in mm)\n\n`Dnnn` Nozzle diameter (in mm)1\n\n\n\nExamples\n\nM404 N1.75\n\nM404 N3.0 D1.0\n\nEnter the nominal filament width (3mm, 1.75mm) or will display nominal filament width without parameters.\n\n\n\nNotes1While Marlin only accepts the 'N' parameter, RepRapFirmware further allows to specify the nozzle diameter (in mm) via the 'D 'parameter. This value is used to properly detect the first layer height when files are parsed or a new print is being started.\n\n"
   },
   "M405":{
      "prefix":"M405",
      "body":"",
      "description":"M405: Filament Sensor on\n\nExample\n\nM405\n\nTurn on Filament Sensor extrusion control. Optional D<delay in cm> to set delay in centimeters between sensor and extruder.\n\n"
   },
   "M406":{
      "prefix":"M406",
      "body":"",
      "description":"M406: Filament Sensor off\n\nExample\n\nM406\n\nTurn off Filament Sensor extrusion control.\n\n"
   },
   "M407":{
      "prefix":"M407",
      "body":"",
      "description":"M407: Display filament diameter\n\nExample\n\nM407\n\nDisplays measured filament diameter. In RepRapFirmware, M407 does the same as M404.\n\n"
   },
   "M408":{
      "prefix":"M408",
      "body":"",
      "description":"M408: Report JSON-style response\n\nParameters\n\n`Snnn` Response type\n\n`Rnnn` Response sequence number\n\n\n\nExample\n\nM408 S0\n\nReport a JSON-style response by specifying the desired type using the 'S' parameter. The following response types are supported:\n\n\n\n Type 0 is a short-form response, similar to the response used by older versions of the web interface.\n\n Type 1 is like type 0 except that static values are also included.\n\n Type 2 is similar to the response provided by the web server for Duet Web Control.\n\n Type 3 is an extended version of type 2 which includes some additional parameters that aren't expected to change very frequently.\n\n Type 4 is an extended version of type 2 which may be used to poll for current printer statistics.\n\n Type 5 reports the current machine configuration.\n\nHere is an example of a typical type 0 response:\n\n\n\n{\"status\":\"I\",\"heaters\":[25.0,29.0,28.3],\"active\":[-273.1,0.0,0.0],\"standby\":[-273.1,0.0,0.0],\"hstat\":[0,2,1],\"pos\":[-11.00,0.00,0.00],\"extr\":[0.0,0.0],\n\n \"sfactor\":100.00, \"efactor\":[100.00,100.00],\"tool\":1,\"probe\":\"535\",\"fanPercent\":[75.0,0.0],\"fanRPM\":0,\"homed\":[0,0,0],\"fraction_printed\":0.572}\n\nThe response is set as a single line with a newline character at the end. The meaning of the fields is:\n\n\n\nstatus:  I=idle, P=printing from SD card, S=stopped (i.e. needs a reset), C=running config file (i.e starting up), A=paused, D=pausing, R=resuming from a pause, B=busy (e.g. running a macro), F=performing firmware update\n\nheaters: current heater temperatures, numbered as per the machine (typically, heater 0 is the bed)\n\nactive:  active temperatures of the heaters\n\nstandby: standby temperatures of the heaters\n\nhstat:   status of the heaters, 0=off, 1=standby, 2=active, 3=heater fault. Heater 0 is normally the bed heater, heaters 1, 2.. are the extruder heaters.\n\npos:     the X, Y and Z (and U, V, W if present) axis positions of the current tool (if a tool is selected), or of the print head reference point if no tool is selected\n\nextr:    the positions of the extruders\n\nsfactor: the current speed factor (see M220 command)\n\nefactor: the current extrusion factors (see M221 command), one value per extruder\n\ntool:    the selected tool number. A negative number typically means no tool selected.\n\nprobe:   the Z-probe reading\n\nfanPercent: the speeds of the controllable fans, in percent of maximum\n\nfanRPM:  the print cooling fan RPM\n\nhomed:   the homed status of the X, Y and Z axes (and U, V, W if they exist), or towers on a delta. 0=axis has not been homed so position is not reliable, 1=axis has been homed so position is reliable.\n\nfraction_printed: the fraction of the file currently being printed that has been read and at least partially processed.\n\nmessage: the message to be displayed on the screen (only present if there is a message to display)\n\ntimesLeft: an array of the estimated remaining print times (in seconds) calculated by different methods. These are currently based on the proportion of the file read,\n\n           the proportion of the total filament consumed, and the proportion of the total layers already printed. Only present if a print from SD card is in progress.\n\nseq:     the sequence number of the most recent non-trivial G-code response or error message. Only present if the R parameter was provided and the current sequence number is greater than that.\n\nresp:    the most recent non-trivial G-code response or error message. Only present if the R parameter was provided and the current sequence number is greater.\n\nThe type 1 response comprises these fields plus some additional ones that do not generally change and therefore do not need to be fetched as often. The extra fields include:\n\n\n\nmyName:  the name of the printer\n\nfirmwareName: the name of the firmware, e.g. \"RepRapFirmware\", \"Smoothieware\" or \"Repetier\"\n\ngeometry: one of \"cartesian\", \"delta\", \"corexy, \"corexz\" etc.\n\naxes:    the number of axes\n\nvolumes: the number of SD card slots available\n\nnumTools:   the number of available tools numbered contiguously starting from 0\n\nThe fields may be in any order in the response. Other implementations may omit fields and/or add additional fields.\n\nFor a more detailed comparison of type 2 - 5, see RepRap_Firmware_Status_responses.\n\nPanelDue currently uses only M408 S0 and M408 S1.\n\n"
   },
   "M409":{
      "prefix":"M409",
      "body":"",
      "description":"M409: Query object model\n\nParameters\n\n`K\"key\"` Key string, default empty\n\n`F\"flags\"` Flags string, default empty\n\n\n\nExamples\n\nM409 K\"move.axes\" F\"f\"    ; report all frequently-changing properties of all axes\n\nM409 K\"move.axes[0] F\"v\"  ; report all properties of the first axis, including values not normally reported\n\nM409 K\"move.axes[].homed\" ; for all axes, report whether it is homed\n\nM409 K\"#move.axes\"        ; report the number of axes\n\nM408 F\"f\"                 ; report all values that are likely to have changed recently\n\nM409 F\"v\"                 ; report the entire object model (caution, this may be very large!)\n\nThe key string is just the path to the Object Model (OM) variables wanted, with the following extensions:\n\n\n\n An element that is an array may be followed by either [number] to select just one element, or by [] to select all elements and report the results as an array\n\n The path may be preceded by # in which case the path must refer to an array and just the number of array elements is returned\n\nAn empty key string selects the entire object model.\n\nThe flags string may include one or more of the following:\n\n\n\nd#: (depth) return the OM to depth d# where # is a sequence of digits. The default depth is 1 if the key is empty or not provided (because the returned object would be very large, perhaps too large to send), otherwise a large value (larger than the maximum depth of anything in the OM).\n\nf: (frequent) return only those values in the object model that typically change frequently during a job. User interfaces can use M409 with this flag to stay up to date.\n\nn: (null) include fields with null values (null fields are normally omitted, but null array elements are never omitted) \n\nv: (verbose) include values that are rarely needed and not normally returned (e.g. controller electronics and firmware limits)\n\nThe response is a JSON object of the following form:\n\n{\"key\":\"key\",\"flag'\":\"flags\",\"result\":object-value}\n\nThe key and flags fields are as provided in the M409 command. If the key string is malformed or refers to a property that does not exist in the object model, the result field is null.\n\nRepRapFirmware on network-enabled electronics also provides the same functionality via the rr_model call to the HTTP API.\n\n"
   },
   "M410":{
      "prefix":"M410",
      "body":"",
      "description":"M410: Quick-StopThis command does a quick stop of all stepper motors and aborts all moves in the planner. This command is only intended for emergency situations, and due to the instant stop the actual stepper positions may be shifted. Note that if `EMERGENCY_PARSER` is disabled, the response may be delayed while the command buffer is being queued. If a print job is in progress, it will continue, so it is important to suspend the print job before using this command.\n\n"
   },
   "M412":{
      "prefix":"M412",
      "body":"",
      "description":"M412: Disable Filament Runout DetectionEnable or disable filament runout detection. When filament sensors are enabled, the firmware responds to a filament runout by running the configured G-code (usually M600 Filament Change). When filament runout detection is disabled, no action will be taken on filament runout.\n\nUsage: M412 S[on|off]\n\nIf no 'S' parameter if given, this command reports the current state of filament runout detection.\n\n\n\nExamples\n\n`M412 S1` Enable filament runout detection\n\n`M412 S0` Disable filament runout detection\n\n`M412` Report the current filament runout detection state"
   },
   "M413":{
      "prefix":"M413",
      "body":"",
      "description":"M413: Power-Loss RecoveryEnable or disable the Power-loss Recovery feature. When this feature is enabled, the state of the current print job (SD card only) will be saved to a file on the SD card. If the machine crashes or a power outage occurs, the firmware will present an option to Resume the interrupted print job. In Marlin 2.0 the POWER_LOSS_RECOVERY option must be enabled.\n\nThis feature operates without a power-loss detection circuit by writing to the recovery file periodically (e.g., once per layer), or if a POWER_LOSS_PIN is configured then it will write the recovery info only when a power-loss is detected. The latter option is preferred, since constant writing to the SD card can shorten its life, and the print will be resumed where it was interrupted rather than repeating the last layer. (Future implementations may allow use of the EEPROM or the on-board SD card.)\n\nUsage: M413 S[on|off]\n\nIf no 'S' parameter if given, this command reports the current state of Power-loss Recovery.\n\n\n\nExamples\n\n`M413 S1` Enable power-loss recovery\n\n`M413 S0` Disable power-loss recovery\n\n`M413` Report the current power-loss recovery state"
   },
   "M415":{
      "prefix":"M415",
      "body":"",
      "description":"M415: Host RescueThe host rescue G-code is essential to enabling host software to recover from a lost connection or power loss. With this solution the firmware stores the last received coordinate and current position in EEPROM. Once the host reconnects, the firmware reports this recovery information. From the last-received coordinate the host can determine the last line that was processed. Firmware should move the extruder to a parking position if commands stop arriving during an active print job (with heaters still on). Once the host starts sending new commands the firmware should restore the last position. Host and firmware developers can work together to optimize this solution.\n\nIf the firmware supports this solution it should announce it with the capability:\n\nCap:HOST_RESCUE:1\n\n\n\nExamples\n\n\n\nM415 S1 Enable host rescue system\n\n\n\nM415 S0 Disable host rescue system\n\n\n\nM415 Z[zpos] Set Z position as if homed\n\n\n\nM415 Report rescue stateEvery call to M415 reports the state. Answers are\n\nRESCUE_STATE: OFF\n\nNothing stored. Print finished.\n\nRESCUE_STATE: LX:121.97 LY:143.33 LZ:3.30 LE:1.84 LT:0 X:0.00 Y:240.00 Z:13.30 E:1.84\n\nPrint was interrupted. Coordinates with leading L are last received positions, LT is active extruder. Normal coordinates are current position and can be omitted, if the move did not finish due to power loss.\n\nOn a power loss the firmware should respond with POWERLOSS_DETECTED as early as possible to give host time to flush log as it is likely host will also go down very soon.\n\nSupport is available in Repetier-Firmware 1.0.4 or higher. Repetier-Server 0.91.0 is the first to use this concept and can be used to validate implementation.\n\n"
   },
   "M416":{
      "prefix":"M416",
      "body":"",
      "description":"M416: Power lossHost tells firmware that it will loose power. This is the solution in case a connected host has a power loss detection and firmware does not. Firmware should return\n\nthe message POWERLOSS_DETECTED and do whatever firmware is supposed to do in that case. In combination with host rescue it should store positions, disable heaters, go to park position.\n\n"
   },
   "M420":{
      "prefix":"M420",
      "body":"",
      "description":"M420: Leveling On/Off/Fade (Marlin)Enable/Disable Bed Leveling (using the current stored grid or mesh).\n\n\n\nUsage\n\n`M420 S[bool] Z[float]`\n\nExamples\n\nM420 S1 ; Enable compensation using current grid/mesh\n\nM420 Z10; Gradually reduce compensation until Z=10\n\nMarlin 1.1.0 adds the Z parameter to set the \"fade\" height. This requires the ENABLE_LEVELING_FADE_HEIGHT option.\n\nWhen the Z fade height value is set non-zero, bed compensation will gradually reduce up to the given height, and cease completely above that height.\n\n"
   },
   "M421":{
      "prefix":"M421",
      "body":"",
      "description":"M421: Set a Mesh Bed Leveling Z coordinateSet a single Z coordinate in the Mesh, Bilinear or UBL Leveling grid. Requires MESH_BED_LEVELING or AUTO_BED_LEVELING_BILINEAR or AUTO_BED_LEVELING_UBL.\n\nI & J are the index for the X and Y axis respectively.\n\n\n\nUsage\n\n`M421 I[index] J[index] Z[float]` to set an absolute value to a mesh pointor\n\n`M421 I[index] J[index] Q[float]` to offset a mesh point by a specified value"
   },
   "M425":{
      "prefix":"M425",
      "body":"",
      "description":"M425: Backlash Correction\n\nParameters\n\n`Fnnn` Enable/disable/fade-out backlash correction (0.0 = none to 1.0 = 100%)\n\n`Snnn` Distance over which backlash correction is spread1 (mm)\n\n`Xnnn` Set the backlash distance on X (mm; 0 to disable)\n\n`Ynnn` Set the backlash distance on Y (mm; 0 to disable)\n\n`Znnn` Set the backlash distance on Z (mm; 0 to disable)\n\n`X` Use measured value for backlash on X (if available)\n\n`Y` Use measured value for backlash on Y (if available)\n\n`Z` Use measured value for backlash on Z (if available)\n\nExamples (Marlin)\n\nM425               ; Report current state\n\nM425 Z             ; Use measured value of backlash on Z\n\nM425 F1 S3         ; Full backlash compensation while smoothing over 3mm.\n\nM425 F0.5 S0.0     ; Compensate for 50% of the backlash with no smoothing\n\nM425 X0.1 Y0.2 Z0.3; Set backlash to specific values for all axis\n\n\n\nNotes1 In Marlin, backlash compensation works by adding extra steps to one or more\n\nsegments after a motor direction reversal. With smoothing off, this can cause\n\nblemishes on the print. Enabling smoothing will cause those extra steps to\n\nbe spread over multiple segments, minimizing artifacts.\n\n"
   },
   "M450":{
      "prefix":"M450",
      "body":"",
      "description":"M450: Report Printer Mode\n\nUsage\n\n`M450`\n\nExample\n\n> M450\n\n> PrinterMode:FFF\n\nPrinters can be used for different task by exchanging the toolhead. Depending on the\n\ntool, a different behavior of some commands can be expected. This command reports\n\nthe current working mode. Possible answers are:\n\nPrinterMode:FFF\n\nPrinterMode:Laser\n\nPrinterMode:CNC"
   },
   "M451":{
      "prefix":"M451",
      "body":"",
      "description":"M451: Select FFF Printer Mode\n\nUsage\n\n`M451`\n\nExample\n\n> M451\n\n> PrinterMode:FFF\n\nSwitches to FFF mode for filament printing.\n\n"
   },
   "M452":{
      "prefix":"M452",
      "body":"",
      "description":"M452: Select Laser Printer Mode\n\nUsage\n\n`M452`\n\nExample\n\n> M452\n\n> PrinterMode:Laser\n\nSwitches to laser mode. This mode enables handling of a laser pin and makes sure that the laser is only activated during G1 moves if laser was enabled or E is increasing. G0 moves should never enable the laser. M3/M5 can be used to enable/disable the laser for moves.\n\n"
   },
   "M453":{
      "prefix":"M453",
      "body":"",
      "description":"M453: Select CNC Printer Mode\n\nUsage\n\n`M453`\n\nParameters (RepRapFirmware only)\n\n Snnn (optional) Spindle index, defaults to 0. Duet 2 supports 4 spindles max\n\n Pfff:rrr Logical pin numbers used to drive the spindle motor in clockwise and counterclockwise directions. Omit the \":rrr\" part if the spindle turns clockwise only.\n\n In Invert (I1) or don't invert (I0, default) the output polarity\n\n Rnnn Spindle RPM that is achieved at full PWM. Used to convert the S parameter in M3 and M4 commands to a PWM value.\n\n Fnnn (optional) The PWM frequency to use\n\n Tnnn (optional) Assign spindle to a tool allowing better control in DWC\n\n\n\nExample\n\n> M453\n\n> PrinterMode:CNC\n\nSwitches to CNC mode. In this mode M3/M4/M5 control the pins defined for the milling device.\n\nNotes for RepRapFirmware: By default, no output is assigned to the spindle motor. Logical pin numbers for the P parameters are as defined for the M42 and M208 commands. If you wish to assign a heater or fan output to control the spindle motor as in the above example, you must first disable the corresponding heater (see M307) or fan (see M106).\n\n"
   },
   "M460":{
      "prefix":"M460",
      "body":"",
      "description":"M460: Define temperature range for thermistor-controlled fan\n\nUsage\n\n`M460 X[minTemp] Y[maxTemp]`\n\nExample\n\nM460 X50 Y60\n\nIf the firmware has a thermistor controlled fan defined, you can set at which temperature the fan starts and from which temperature on it should run with maximum speed.\n\n"
   },
   "M470":{
      "prefix":"M470",
      "body":"",
      "description":"M470: Create Directory on SD-Card\n\nParameters\n\n`P\"name\"` Name of directory to create\n\nUsage\n\n`M470 P\"directory/to/create\"`\n\nExample\n\nM470 P\"/sys/config.d\"\n\nThis will create a new directory on the SD-Card. If not otherwise specified the default root should be the first/internal SD-Card.\n\n"
   },
   "M471":{
      "prefix":"M471",
      "body":"",
      "description":"M471: Rename File/Directory on SD-Card\n\nParameters\n\n`S\"name\"` Name of existing file/directory\n\n`T\"name\"` New name of file/directory\n\n`Dnnn` Setting this to 1 will delete an existing file that matches the T parameter value\n\nUsage\n\n`M471 S\"source/name\" T\"dest/name\" D1`\n\nExample\n\nM471 S\"/sys/config-override.g\" T\"/sys/config-override.g.bak\"\n\nRename or move a file or directory. Using the D parameter can delete a file with the target name.\n\nRenaming or moving across directories is possible though not from one SD-Card to another.\n\n"
   },
   "M486":{
      "prefix":"M486",
      "body":"",
      "description":"M486: Cancel ObjectThe M486 G-code provides an interface to identify objects on the print bed and cancel them. Basic usage: Use M486 T to tell the firmware how many objects there are, so it can provide an LCD interface. (Otherwise the firmware counts them up in the first layer.) In every layer of your G-code, you must preface each object's layer slice with M486 S[index] to indicate which object is being printed. The index should be zero-based. To cancel the first object, use M486 P0; to cancel the 5th object use M486 P4; and so on. The \"current\" object is canceled with M486 C.\n\nG-codes associated with the canceled objects are no longer printed. Firmware supports this feature by ignoring G0-G3/G5 moves in XYZ while updating F and keeping the E coordinate up-to-date without extruding.\n\nSlicers should number purge towers and other global features with a negative index (or other flag) to distinguish them from regular print objects, since it is important to preserve color changes, purge towers, and brims.\n\nHost software (such as OctoPrint) may be able to cancel individual objects through a plugin, and in this case they should not use M486 P to cancel objects (although doing so should cause no harm).\n\n\n\nUsage\n\nM486 T12              ; Total of 12 objects (otherwise the firmware must count)\n\nM486 S3               ; Indicate that the 4th object is starting now\n\nM486 S3 A\"cube copy 3\"; Indicate that the 4th object is starting now and name it (RepRapFirmware)\n\nM486 S-1              ; Indicate a non-object, purge tower, or other global feature\n\nM486 P10              ; Cancel object with index 10 (the 11th object)\n\nM486 U2               ; Un-cancel object with index 2 (the 3rd object)\n\nM486 C                ; Cancel the current object (use with care!)\n\nM486                  ; List the objects on the build plate (RepRapFirmware)\n\n\n\nM486 implementation in RepRapFirmware\n\n\n\nIf the GCode file being printed contains object label comments (e.g. using the \"Label objects\" option in PrusaSlicer) then it is not necessary to use M486 S commands to indicate which object is being printed. Objects on the build plate will be numbered from 0 in the order in which their labels first appear in the file.\n\nIf you do use M486 S commands in the GCode file instead of object label comments, then RepRapFirmware provides an optional A parameter to the M486 S command to allow objects to be named. The name of each object need only be specified once.\n\nM486 without parameters lists the names and approximate locations of known objects on the build plate. For the benefit of user interfaces, this information may also be retrieved from the object model using M409."
   },
   "M500":{
      "prefix":"M500",
      "body":"",
      "description":"M500: Store parameters in non-volatile storage\n\nExample\n\nM500\n\nSave current parameters to EEPROM, SD card or other non-volatile storage.\n\nIn Redeem any parameters set through G/M-codes which is different than what is read from the config files, are stored back to the local config. For instance setting stepper current and microstepping through M906 and M907 followed by M500 will update /etc/redeem/local.cfg.\n\n"
   },
   "M501":{
      "prefix":"M501",
      "body":"",
      "description":"M501: Read parameters from EEPROM\n\nParameters\n\n`Snnn` Enable auto-save (only RepRapFirmware)\n\nExample\n\nM501\n\nSet the active parameters to those stored in the EEPROM, SD card or other non-volatile storage. This is useful to revert parameters after experimenting with them.\n\nRepRapFirmware versions prior to 1.17 allows \"S1\" to be passed, which forces parameters to be automatically saved to EEPROM when they are changed.\n\nIn RepRapFirmware 1.17 and later, the parameters are saved in file sys/config-override.g on the SD card.\n\n"
   },
   "M502":{
      "prefix":"M502",
      "body":"",
      "description":"M502: Restore Default Settings\n\nExample\n\nM502\n\nThis command resets all tunable parameters to their default values, as set in the firmware's configuration files. This doesn't reset any parameters stored in the EEPROM, so it must be followed with M500 to reboot with default settings.\n\n"
   },
   "M503":{
      "prefix":"M503",
      "body":"",
      "description":"M503: Report Current Settings\n\nExamples\n\nM503; Output current settings\n\nM503 S0; Settings as G-code only (Marlin 1.1)\n\nThis command asks the firmware to reply with the current print settings as set in memory. Settings will differ from EEPROM contents if changed since the last load / save. The reply output includes the G-Code commands to produce each setting. For example, Steps-Per-Unit values are displayed as an M92 command.\n\nRepRapFirmware outputs the content of the configuration file, but note that it may be truncated if it is too long.\n\n"
   },
   "M504":{
      "prefix":"M504",
      "body":"",
      "description":"M504: Validate EEPROM\n\nExamples\n\nM504; Check EEPROM\n\nThis command checks the contents of EEPROM for correct version, size, and checksum and reports the result.\n\n"
   },
   "M505":{
      "prefix":"M505",
      "body":"",
      "description":"M505: Firmware dependentM505: Clear EEPROM and RESET PrinterThis command erase all EEPROM and reset the board.\n\nM505: Set configuration file folder\n\nParameters\n\nP\"name\"; name of folder, default path is /sys/ if it is a relative path\n\n\n\nExample\n\nM505 P\"experimental\"; change config file path from /sys/ to /sys/experimental/Following this command, files that would normally be fetched from /sys/ (for example, homing files and system macro files in RepRapFirmware) are fetched from the specified folder instead. Any such files that are already being executed will continue to run.\n\nThis command can be used to allow multiple configurations to be maintained easily. In RepRapFirmware the file /sys/config/g can contain just these two lines:\n\n\n\nM505 P\"config1\"\n\nM98 P\"config.g\"\n\nThe first line changes the config file folder to /sys/config1 and the second one executes file config.g in that folder. To select an alternative configuration, only the first line needs to be edited.\n\n"
   },
   "M509":{
      "prefix":"M509",
      "body":"",
      "description":"M509: Force language selectionResets the language to English.\n\nOnly on Original Prusa i3 MK2.5/s and MK3/s with multiple languages.\n\n"
   },
   "M510":{
      "prefix":"M510",
      "body":"",
      "description":"M510: Lock MachineLock the machine. When the machine is locked a passcode is required to unlock it. Use M511 P with your passcode to unlock the machine. In Marlin this feature is enabled with the PASSWORD_FEATURE option.\n\n"
   },
   "M511":{
      "prefix":"M511",
      "body":"",
      "description":"M511: Unlock Machine with PasscodeCheck the given passcode and unlock the machine if it is correct. Otherwise, delay for a period of time before allowing another attempt. In Marlin this feature is enabled with the PASSWORD_FEATURE option.\n\n\n\nParameters\n\nP\"passcode\"; a numeric passcode to try"
   },
   "M512":{
      "prefix":"M512",
      "body":"",
      "description":"M512: Set PasscodeCheck the given passcode (P) and if it is correct clear the passcode. If S is given, set a new passcode. In Marlin this feature is enabled with the PASSWORD_CHANGE_GCODE option.\n\n\n\nParameters\n\nP\"oldpass\"; the current numeric passcode\n\nS\"newpass\"; a new numeric passcode"
   },
   "M524":{
      "prefix":"M524",
      "body":"",
      "description":"M524: Abort SD Printing\n\nExample\n\nM524\n\nIf an SD print is in progress, this command aborts the print, just as if you had selected \"Stop print\" from the LCD menu.\n\n"
   },
   "M530":{
      "prefix":"M530",
      "body":"",
      "description":"M530: Enable printing mode\n\nExample\n\nM530 S1 L270\n\nThis command tells the firmware that a print has started (S1) or ended (S0). The L parameter sets the number of layers. L0 denotes unknown layer count. This enables the firmware to switch into a special print display mode to show print progress. Firmware should indicate the presence of this feature by responding to M115 with an additional line:\n\n\n\nCap:PROGRESS:1\n\n\n\nNotes1In MK4duo this command starts print counters for statistics. It also turns off a 30-minute timer for the heaters. If the timer reaches 30, turn off all the heaters.\n\n"
   },
   "M531":{
      "prefix":"M531",
      "body":"",
      "description":"M531: Set print name\n\nExample\n\nM531 Demo Model\n\nSets the name of the currently printed object. Should follow M530 S1 for correct display.\n\n"
   },
   "M532":{
      "prefix":"M532",
      "body":"",
      "description":"M532: Set print progress\n\nExample\n\nM532 X23.7 L56\n\nSets the print progress (X = 0..100) and currently printed layer (L). Should be send every 0.1% progress change on every layer change.\n\n"
   },
   "M540":{
      "prefix":"M540",
      "body":"",
      "description":"M540: Set MAC address\n\nParameters\n\n`Pnnn` The MAC address\n\n\n\nExamples\n\nM540 P0xBE:0xEF:0xDE:0xAD:0xFE:0xED\n\nM540 PDE:AD:BE:EF:CA:FE\n\nSets the MAC address of the RepRap. This should be done before any other network commands. The MAC address is six one-byte hexadecimal numbers separated by colons. The 0x prefix is optional in later firmware revisions.\n\nAll devices running on the same network shall all have different MAC addresses. For your printers, changing the last digit is sufficient.\n\nThis command is only needed when using older electronics that doesn't provide a unique MAC address, for example Duet 0.6 and Duet 0.8.5.\n\n"
   },
   "M540 in Marlin":{
      "prefix":"M540 in Marlin",
      "body":"",
      "description":"M540 in Marlin: Enable/Disable \"Stop SD Print on Endstop Hit\"\n\nParameters\n\n`Snnn` state, S1=enable, S0=disable\n\n\n\nExample\n\nM540 S1\n\n\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "M550":{
      "prefix":"M550",
      "body":"",
      "description":"M550: Set Name\n\nParameters\n\n`Pnnn` Machine name\n\n\n\nExample\n\nM550 PGodzilla\n\nSets the name of the RepRap to (in this case) Godzilla. The name can be any string of printable characters except ';', which still means start comment.\n\n"
   },
   "M551":{
      "prefix":"M551",
      "body":"",
      "description":"M551: Set Password\n\nParameters\n\n`Pnnn` Password\n\n\n\nExample\n\nM551 Pmy-very-secret-word\n\nOn machines that need a password to activate them, set that password. The code 'P' is not part of the password. Note that as this is sent in clear it does not (nor is it intended to) offer a very high level of security. But on machines that are (say) on a network, it prevents idle messing about by the unauthorised. The password can contain any printable characters except ';', which still means start comment.\n\nNote for RepRapFirmware: If the specified password differs from the default one (i.e. reprap), the user will be asked to enter it when a connection is established via HTTP or Telnet. For FTP, the password must always be passed explicitly.\n\n"
   },
   "M552":{
      "prefix":"M552",
      "body":"",
      "description":"M552: Set IP address, enable/disable network interface\n\nParameters\n\n`Innn` (Optional) Number of the network interface to manage (defaults to 0)\n\n`Pnnn` IP address, 0.0.0.0 means acquire an IP address using DHCP\n\n`Snnn` (optional) -1 = reset network interface, 0 = disable networking, 1 = enable networking as a client, 2 = enable networking as an access point (WiFi-enabled electronics only)\n\n`Rnnn` (optional, RepRapFirmware 1.17 and earlier only) HTTP port, default 80\n\n\n\nExample\n\nM552 P192.168.1.14\n\nSets the IP address of the machine to (in this case) 192.168.1.14. If the S parameter is not present then the enable/disable state of the network interface is not changed.\n\nIn RepRapFirmware 1.18 and later the HTTP port address is set using the M586 command, so the R parameter of this command is no longer supported.\n\nM552 with no parameters reports the current network state and IP address.\n\n"
   },
   "M553":{
      "prefix":"M553",
      "body":"",
      "description":"M553: Set Netmask\n\nParameters\n\n`Innn` (Optional) Number of the network interface to manage (defaults to 0)\n\n`Pnnn` Net mask\n\n\n\nExample\n\nM553 P255.255.255.0\n\nSets the network mask of the RepRap machine to (in this case) 255.255.255.0. A restart may be required before the new network mask is used. If no 'P' field is specified, this echoes the existing network mask configured.\n\nRecent RepRapFirmware versions allow the IP configuration to be changed without a restart.\n\n"
   },
   "M554":{
      "prefix":"M554",
      "body":"",
      "description":"M554: Set Gateway and/or DNS server\n\nParameters\n\n`Innn` (Optional) Number of the network interface to manage (defaults to 0)\n\n`Pnnn` Gateway\n\n`Snnn` (Optional) DNS server (only supported by DSF 3.3 with DuetPi system config plugin)\n\n\n\nExample\n\nM554 P192.168.1.1\n\nSets the Gateway IP address of the RepRap machine to (in this case) 192.168.1.1. A restart may be required before the new gateway IP address is used. If no 'P' field is specified, this echoes the existing Gateway IP address configured.\n\nRecent RepRapFirmware versions allow the IP configuration to be changed without a restart.\n\n"
   },
   "M555":{
      "prefix":"M555",
      "body":"",
      "description":"M555: Set compatibility\n\nParameters\n\n`Pnnn` Emulation type\n\n\n\nExample\n\nM555 P1\n\nFor firmware that can do it, the firmware is set to a mode where its input and (especially) output behaves exactly like other established firmware. The value of the 'P' argument is:\n\n\n\n\n\nP value        \n\n Firmware\n\n\n\n\n\n0 \n\n Native (i.e. whatever the firmware actually is)\n\n\n\n\n\n 1 \n\n RepRapFirmware\n\n\n\n\n\n 2 \n\n Marlin\n\n\n\n\n\n 3 \n\n Teacup\n\n\n\n\n\n 4 \n\n Sprinter\n\n\n\n\n\n 5 \n\n Repetier\n\n\n\n\n\n 6 \n\n Marlin with changes for nanoDLP\n\n"
   },
   "M556":{
      "prefix":"M556",
      "body":"",
      "description":"M556: Axis compensation\n\nParameters\n\n`Snnn` Height of the measured distances\n\n`Xnnn` Deviation in X direction\n\n`Ynnn` Deviation in Y direction\n\n`Znnn` Deviation in Z direction\n\n`Pnnn` Apply XY compensation to Y axis instead of X (defaults to 0, requires RRF 3.2-b4 or newer)\n\n\n\nExample\n\nM556 S100 X0.7 Y-0.2 Z0.6\n\nThough with care and adjustment a RepRap can be set up with its axes at right-angles to each other within the accuracy of the machine, who wants to bother with care and adjustment when the problem\n\ncan be solved by software?  This tells software the tangents of the angles between the axes of the machine obtained by printing then measuring a test part. The S parameter (100 here) is the length of a triangle along each axis in mm. The X, Y and Z figures are the number of millimeters of the short side of the triangle that represents how out of true a pair of axes is. The X figure is the error between X and Y, the Y figure is the error between Y and Z, and the Z figure is the error between X and Z. Positive values indicate that the angle between the axis pair is obtuse, negative acute.\n\n"
   },
   "M557":{
      "prefix":"M557",
      "body":"",
      "description":"M557: Set Z probe point or define probing grid\n\nParameters to define G32 probe points (Cartesian/CoreXY printers only, no longer supported in RepRapFirmware)\n\n`Pnnn` Probe point number\n\n`Xnnn` X coordinate\n\n`Ynnn` Y coordinate\n\n\n\nExample\n\nM557 P1 X30 Y40.5\n\n\n\nParameters to define G29 probe grid (all values in mm)\n\n`Xaaa:bbb` Minimum and maximum X coordinates to probe\n\n`Yaaa:bbb` Minimum and maximum Y coordinates to probe\n\n`Rnnn` Radius to probe\n\n`Snn` or `Sxx:yy` Probe point spacing\n\n`Pnn` or `Pxx:yy` Number of probe points in each direction (RepRapFirmware 2.02 and later) - use instead of specifying the spacing\n\n\n\nExamples\n\nM557 X0:200 Y0:220 S20\n\nM557 R150 S15\n\nSet the points at which the bed will be probed to compensate for its plane being slightly out of horizontal.\n\nThe first form defines the points for for G32 bed probing. The P value is the index of the point (indices start at 0) and the X and Y values are the position to move extruder 0 to to probe the bed. An implementation should allow a minimum of three points (P0, P1 and P2). This just records the point coordinates; it does not actually do the probing. See G32. Defining the probe points in this way is no longer supported by RepRapFirmware, you should define them in a bed.g file instead.\n\nThe second form defines the grid for G29 bed probing. For Cartesian printers, specify minimum and maximum X and Y values to probe and the probing interval. For Delta printers, specify the probing radius. If you define both, the probing area will be the intersection of the rectangular area and the circle. There is a firmware-dependent maximum number of probe points supported, which may be as low as 100.\n\n"
   },
   "M558":{
      "prefix":"M558",
      "body":"",
      "description":"M558: Set Z probe type\n\nParameters\n\n`Pnnn` Z probe type\n\n`Fnnn` Feed rate (i.e. probing speed, mm/min)\n\n`Hnnn` Dive height (mm)\n\n`Innn` Invert (I1) or do not invert (I0) the Z probe reading (RepRapFirmware 1.16 and later)\n\n`Rnnn` Z probe recovery time after triggering, default zero (seconds) (RepRapFirmware 1.17 and later)1\n\n`Tnnn` Travel speed to and between probe points (mm/min)\n\n`Annn` Maximum number of times to probe each point, default 1 (RepRapFirmware 1.21 and later)\n\n`Snnn` Tolerance when probing multiple times, default 0.03 (RepRapFirmware 1.21 and later)\n\n`Bn` B1 turns off all heaters during probing moves and during the probe recovery time (RepRapFirmware 1.21 and later)\n\n\n\nObsolete parameters\n\n`Xnnn` If nonzero, use probe for homing X axis (RepRapFirmware 1.19 and earlier only)\n\n`Ynnn` If nonzero, use probe for homing Y axis (RepRapFirmware 1.19 and earlier only)\n\n`Znnn` If nonzero, use probe for homing Z axis (RepRapFirmware 1.19 and earlier only)\n\n\n\nExample\n\nM558 P1 F500 T5000 H3\n\nA Z probe may be a switch, an IR proximity sensor, or some other device. This selects which to use:\n\nP0 indicates that no Z probe is present\n\nP1 indicates an unmodulated IR probe, or any other probe type that emulates an unmodulated IR probe (probe output is an analog signal that rises with decreasing nozzle height above the bed). If there is a control signal to the probe, it is driven high when the probe type is P1\n\nP2 specifies a modulated IR probe, where the modulation is commanded directly by the main board firmware using the control signal to the probe\n\nP3 selects an alternative Z probe similar to P1 but the control signal to the probe low\n\nP4 selects a switch for bed probing (on the Duet, this must be connected to the E0 endstop pins)\n\nP5 (from RepRapFirmware 1.14) selects a switch or a digital output device to the In pin of the Z-probe connector\n\nP6 is as P4 but the switch is connected to  and alternative connector (on the Duet series, the E1 endstop connector)\n\nP7 is as P4 but the switch is connected to  and alternative connector (on the Duet series, the Z endstop connector)\n\nP8 is as P5 but the signal is unfiltered for faster response\n\nP9 is as P5 but the probe is deployed and retracted at every probe point. This is intended for BLTouch.Related codes: G29, G30, G31, G32, M401, M402.\n\n"
   },
   "M559":{
      "prefix":"M559",
      "body":"",
      "description":"M559: Upload configuration file\n\nExample\n\nM559\n\nIf the RepRap supports it, this uploads a file that is run on re-boot to configure the machine. This file usually is a special G Code file. After sending M559, the file should be sent, ending with an M29 (q.v.).\n\n"
   },
   "M560":{
      "prefix":"M560",
      "body":"",
      "description":"M560: Upload web page file\n\nExample\n\nM560\n\n`M560`\n\n<!-- **EoF** -->\n\n"
   },
   "M561":{
      "prefix":"M561",
      "body":"",
      "description":"M561: Set Identity Transform\n\nExample\n\nM561\n\nThis cancels any bed-plane fitting as the result of probing (or anything else) and returns the machine to moving in the user's coordinate system.\n\n"
   },
   "M562":{
      "prefix":"M562",
      "body":"",
      "description":"M562: Reset temperature fault\n\nParameters\n\n`Pnnn` Heater number\n\n\n\nExample\n\nM562 P2\n\nReset a temperature fault on heater/sensor 2. If the RepRap has switched off and locked a heater because it has detected a fault, this will reset the fault condition and allow you to use the heater again. Obviously to be used with caution. If the fault persists it will lock out again after you have issued this command. P0 is the bed; P1 the first extruder, and so on.\n\nLater versions of RepRapFirmware support M562 without the P parameter, which will reset all heater faults.\n\n"
   },
   "M563":{
      "prefix":"M563",
      "body":"",
      "description":"M563: Define or remove a tool\n\nParameters\n\n`Pnnn` Tool number\n\n`S\"name\"` Tool name (optional)\n\n`Dnnn` Extruder drive(s)\n\n`Hnnn` Heater(s)\n\n`Fnnn` Fan(s) to map the print cooling fan to (RepRapFirmware 1.16 and later)\n\n`Xnnn` Axis or axes to map X movement to (RepRapFirmware 1.16 and later)\n\n`Ynnn` Axis or axes to map Y movement to\n\n`Lnnn` Drive to use for filament mapping. By default RRF will use the first and only extruder drive if this parameter is not specified (supported by RRF >= 2.02)\n\n\n\nExamples\n\nM563 P0 D0:2:3 H1:3                ; create a tool using extruder drives 0, 2 and 3 and heaters 1 and 3\n\nM563 P1 D1 H2 X3                   ; create a tool using extruder drive 1 and heater 2 with X movement mapped to the U axis\n\nM563 P2 D0:1 H1:2 X0:3 F0:2        ; create a tool using extruder drives 0 and 1, heaters 1 and 2,\n\n                                   ; with X movement mapped to both X and U axes and fan 0 mapped to fan 0 and fan 2\n\nM563 P3 D0 H1 S\"Chocolate extruder\"; create a named tool using extruder drive 0 and heater 1\n\nTools are usually (though not necessarily) extruders. The 'P' field specifies the tool number. Tool numbers can have any positive integer value and 0. The 'D' field specifies the drive(s) used by the tool - in the first example drives 0, 2 and 3. Drive 0 is the first drive in the machine after the movement drives (usually X, Y and Z). If there is no 'D' field the tool has no drives. The 'H' field specifies the tool's heaters - in the first example heaters 1 and 3. Heater 0 is usually the hot bed (if any) so the first extruder heater is usually 1. If there is no H field the tool has no heaters.\n\nTools are driven using multiple values in the 'E' field of G1 commands, each controlling the corresponding drive in the 'D' field above, as follows:\n\n\n\nG1 X90.6 Y13.8 E2.24:2.24:15.89\n\nG1 X70.6 E0:0:42.4\n\nThe first line moves straight to the point (90.6, 13.8) extruding a total of 2.24mm of filament from both drives 0 and 2 and 15.98mm of filament from drive 3. The second line moves back 20mm in X extruding 42.4mm of filament from drive 3.\n\nAlternatively, if the slicer does not support generating G1 commands with multiple values for the extrusion amount, the M567 command can be used to define a tool mix ratio.\n\nNormally an M563 command is immediately followed by a G10 command to set the tool's offsets and temperatures.\n\nIt is permissible for different tools to share some (or all) of their drives and heaters. So, for example, you can define two tools with identical hardware, but that just operate at different temperatures.\n\nThe X mapping option is used to create tools on machines with multiple independent X carriages. The additional carriages are set up as axes U, V etc. (see M584) and the X mapping option in M563 defines which carriage or carriages are used.\n\nIf you use the M563 command with a P value for a tool that has already been defined, that tool is redefined using the new values you provide.\n\nRepRapFirmware supports an additional form of the M563 command. The command:\n\n\n\nM563 S1\n\nmeans add 1 (the value of the S parameter) to all tool numbers found in the remainder of the current input stream (e.g. the current file if the command is read from a file on the SD card), or until a new M563 command of this form is executed. The purpose of this is to provide compatibility between systems in which tool numbers start at 1, and programs such as slic3r that assume tools are numbered from zero.\n\nRecent versions of RepRapFirmware allow the deletion of existing tools if M563 is called in this way:\n\n\n\nM563 P1 D-1 H-1\n\n"
   },
   "M564":{
      "prefix":"M564",
      "body":"",
      "description":"M564: Limit axes\n\nParameters\n\n`Hnnn` H1 = forbid movement of axes that have not been homed, H0 = allow movement of axes that have not been homed (RepRapFirmware 1.21 and later)\n\n`Snnn` S1 = limit movement within axis boundaries, S0 = allow movement outside boundaries\n\n\n\nExample\n\nM564 S0 H0Allow moves outside the print volume and before homing, or not. If the S parameter is 0, then you can send G codes to drive the RepRap outside its normal working volume, and it will attempt to do so. Likewise if the H parameter is 0 you can move the head or bed along axes that have not been homed. The default behaviour is S1 H1. On some types of printer (e.g. Delta and SCARA), movement before homing is prohibited regardless of the H parameter.\n\n"
   },
   "M565":{
      "prefix":"M565",
      "body":"",
      "description":"M565: Set Z probe offset\n\nExample\n\nM565 X3 Y4.5 Z-2.37\n\nSet the offset from the extruder tip to the probe position. The X, Y, and Z values are the delta between the extruder and the actual trigger position of the probe. If the probe trigger point is below the extruder (typical) the Z offset will be negative. This just records the point offset; it does not actually do the probing. See G32.\n\n"
   },
   "M566":{
      "prefix":"M566",
      "body":"",
      "description":"M566: Set allowable instantaneous speed change\n\nParameters\n\n`Xnnn` Maximum instantaneous speed change of the X axis (mm/min)\n\n`Ynnn` Maximum instantaneous speed change of the Y axis\n\n`Znnn` Maximum instantaneous speed change of the Z axis\n\n`Ennn` Maximum instantaneous speed change of the extruder drives\n\n\n\nExample\n\nM566 X20 Y20 Z2 E10\n\nSets the maximum allowable speed change (sometimes called 'jerk speed') of each motor when changing direction.\n\nThe model files and gcode files used by repraps generally render circles and other curves shapes as a sequence of straight line segments. If the motors were not allowed any instantaneous speed change, they would have to come to a stop at the junction between each pair of line segments. By allowing a certain amount of instantaneous speed change, printing speed can be maintained when the angle between the two line segments is small enough.\n\nIf you set these X and Y values too low, then the printer will be slow at printing curves. If they are too high then the printer may be noisy when cornering and you may suffer ringing and other print artefacts, or even missed steps.\n\nOn very old versions of RepRapFirmware (prior to 1.09), these were also the minimum speeds of each axis.\n\n"
   },
   "M567":{
      "prefix":"M567",
      "body":"",
      "description":"M567: Set tool mix ratios\n\nParameters\n\n`Pnnn` Tool number\n\n`Ennn` Mix ratios\n\n\n\nExample\n\nM567 P2 E0.1:0.2:0.1:0.6\n\nThis example sets the mix ratio for tool 2 (the P value). When mixing is then turned on (see M568), only single E values need to be sent on a G1 command (any extra E values will be ignored, but are not illegal):\n\n\n\nG1 X20 E1.3\n\nThis will move to X=20 extruding a total length of filament of 1.3mm. The first drive of tool 2 will extrude 0.1*1.3mm, the second 0.2*1.3mm and so on. The ratios don't have to add up to 1.0 - the calculation done is as just described. But it is best if they do.\n\nSee also M568.\n\n"
   },
   "M568":{
      "prefix":"M568",
      "body":"",
      "description":"M568: Turn off/on tool mix ratios (obsolete)This command is obsolete. When using a tool defined as a mixing extruder, RepRapFirmware applies the mix ratio defined by M567 whenever only one E parameter is provided in G1 commands. When multiple colon-separated E values are provided in the G1 command, they will be used as the individual amounts to extrude.\n\n"
   },
   "M569":{
      "prefix":"M569",
      "body":"",
      "description":"M569: Stepper driver control\n\nParameters\n\n`Pnn` Motor driver number\n\n`Sn` Direction of movement of the motor(s) attached to this driver: 0 = backwards, 1 = forwards (default 1)\n\n`Rn` Driver enable polarity: 0 = active low, 1 = active high (default 0)\n\n`Tnn` Minimum driver step pulse width and interval in microseconds (RepRapFirmware 1.14 and later)\n\n`Taa:bb:cc:dd` Minimum driver step pulse width, step pulse interval, direction-to-step setup time and step-to-direction hold time, in microseconds (RepRapFirmware 1.21 and later)\n\n`Dnn` Stepper driver mode (RepRapFirmware 2.0 and later): 0=constant off time, 1=random off time, 2=spread cycle, 3=stealthChop \n\n`Fnn` (firmware 2.02 and later) Off-time in the chopper control register, 1 to 15\n\n`Bnn` (firmware 2.02 and later) Blanking time (tbl) in the chopper control register, 0 to 3. See the TMC driver datasheet.\n\n`Yaa:bb` or `Yaa:bb:cc` (firmware 2.02 and later) Hysteresis start, end and decrement values in the chopper control register. See the TMC driver datasheet for the meaning.\n\n`Cnnn` Custom chopper control register value (RepRapFirmware 2.0 and later). Do not change this value without having a good understanding of the stepper driver driver chip!\n\n`Hnn` (firmware 2.02 and later) t_high parameter for those stepper driver chips that support it (e.g. TMC2208, 2224). Send M569 P# (where # is the driver number) with no additional parameters to see how this translates into mm/sec. See also the V parameter.\n\n`Vnnn` (firmware 2.02 and later) tpwmthrs parameter for those stepper driver chips that support it (e.g. TMC2208, 2224). This is the interval in clock cycles between 1/256 microsteps below which the drivers will switch from stealthChop to to spreadCycle mode. Only applies when the driver is configured in stealthChop mode. Typical value are from 100 (high speed) to 4000 (low speed). Send M569 P# (where # is the driver number) with no additional parameters to see how this translates into axis speed in mm/sec.\n\n\n\nExample\n\nM569 P0 S0              ; reverse the direction of the motor attached to driver 0\n\nM569 P5 R1 T2.5:2.5:5:0 ; driver 5 requires an active high enable, 2.5us minimum step pulse, 2.5us minimum step interval, 5us DIR setup time and no hold time\n\n\n\nNotesAll parameters except P are optional. For any parameter that is not provided, the corresponding value will not be changed.\n\nThe T parameters are intended for use with external stepper drivers. Currently, RepRapFirmware only remembers the highest T parameters seen in any M569 command, and applies those values to all drivers for which any nonzero T parameters were specified.\n\nThe modes (D parameter) supported by various stepper driver chips are:\n\nTMC2130, TMC2160, TMC5160: modes 0,1,2,3\n\nTMC2660: modes 0,1,2\n\nTMC2208/2209/2224: modes 2,3 (mode 3 is stealthChop 2)Some versions of RepRapFirmware prior to 1.14 also provided X, Y, Z and E parameters to allow the mapping from axes and extruders to stepper driver numbers to be changed. From 1.14 onward, this functionality is provided by M584 instead.\n\n"
   },
   "M569.1":{
      "prefix":"M569.1",
      "body":"",
      "description":"M569.1: Stepper driver closed loop control\n\nParameters\n\n`Pn` or `Pn.n` Motor driver number, or board address and driver number\n\n`Sn` Mode: 0=open loop (default), 1=closed loop (requires an encoder to be selected, see the T parameter)\n\n`Tn` Encoder type: 0=none, 1=linear quadrature encoder on axis, 2=quadrature encoder on motor shaft, 3=AS5047D encoder on motor shaft, 4=TLI5012B encoder on motor shaft\n\n`En.n` Encoder counts per mm (linear encoder) or per rotation (rotary encoder). Only used if the encoder type is 1 or 2.\n\n`Rn.n` Proportional constant\n\n`In.n` Integral constant\n\n`Dn.n` Derivative constantSupported by RepRapFirmware on boards using closed loop drivers.\n\n"
   },
   "M570":{
      "prefix":"M570",
      "body":"",
      "description":"M570: Configure heater fault detection\n\nParameters for RepRapFirmware 1.14 and earlier\n\n`Snnn` Heater timeout (in seconds)\n\n\n\nExample\n\nM570 S120\n\nAfter a heater has been switched on, wait 120 seconds for it to get close to the set temperature. If it takes longer than this, raise a heater fault.\n\n\n\nParameters for RepRapFirmware 1.15e and later\n\n`Hnnn` Heater number\n\n`Pnnn` Time in seconds for which a temperature anomaly must persist on this heater before raising a heater fault (default 5 seconds)\n\n`Tnnn` Permitted temperature excursion from the setpoint for this heater (default 10C)\n\n`Snnn` Time in seconds after a heater fault is raised after which the print will be abandoned, default 10 minutes (RepRapFirmware 1.20 and later)\n\n\n\nExample\n\nM570 H1 P4 T15\n\nWarning! Heating fault detection is provided to reduce the risk of starting a fire if a dangerous fault occurs, for example if the heater cartridge or thermistor falls out of the heater block. You should not increase the detection time or permitted temperature excursion without good reason, because doing so will reduce the protection.\n\n"
   },
   "M571":{
      "prefix":"M571",
      "body":"",
      "description":"M571: Set output on extrude\n\nParameters\n\n`Snnn` Output value\n\n`Fnnn` Output PWM frequency (RepRapFirmware 1.17 and later)\n\n`Pnnn` Logical pin number (RepRapFirmware 1.17 and later), defaults to the FAN0 output until `M571` with a `P` parameter has been seen\n\n\n\nExample\n\nM571 P3 F200\n\nM571 S0.5\n\nThis turns the controlled pin output on whenever extrusion is being done, and turns it off when the extrusion is finished. The output could control a fan or a stirrer or anything else that needs to work just when extrusion is happening. It also can be used to control a laser beam. The S parameter sets the value of the PWM to the output. 0.0 is off; 1.0 is fully on.\n\nIn RepRapFirmware 1.17 and later you can use the P parameter to change the pin used and you can also set the PWM frequency. Pin numbers are the same as in the M42 and M280 commands. The pin you specify must not be in use for anything else, so if it is normally used as a heater you must disable the heater first using M307, or if it is used for a fan you must disable the fan using M106 with the I-1 parameter.\n\n"
   },
   "M572":{
      "prefix":"M572",
      "body":"",
      "description":"M572: Set or report extruder pressure advance\n\nParameters\n\n`Dnnn` Extruder number\n\n`Snnn` Pressure advance amount (in seconds)\n\n\n\nExample\n\nM572 D0 S0.1\n\nThis sets the pressure advance coefficient (S parameter) for the specified extruder (D parameter). Supported by RepRapFirmware-dc42, -ch and -dn.\n\nPressure advance causes the extruder drive position to be advanced or retarded during printing moves by an additional amount proportional to the rate of extrusion. At the end of a move when the extrusion rate is decreasing, this may result in the extruder drive moving backwards (i.e. retracting). Therefore, if you enable this feature, you may need to reduce the amount of retraction you use in your slicing program to avoid over-retraction.\n\nWith Bowden extruders, an S value between 0.1 and 0.2 usually gives the best print quality.\n\nOlder versions of RepRapFirmware used the P parameter to specify the drive number, instead of using D to specify the extruder number.\n\n"
   },
   "M573":{
      "prefix":"M573",
      "body":"",
      "description":"M573: Report heater PWM\n\nParameters\n\n`Pnnn` Heater number\n\n\n\nExample\n\nM573 P1\n\nThis gives a running average (usually taken over about five seconds) of the PWM to the heater specified by the P field. If you know the voltage of the supply and the resistance of the heater this allows you to work out the power going to the heater. Scale: 0 to 1.\n\n"
   },
   "M574":{
      "prefix":"M574",
      "body":"",
      "description":"M574: Set endstop configuration\n\nParameters\n\n Xnnn Switch position for X axis\n\n Ynnn Switch position for Y axis\n\n Znnn Switch position for Z axis\n\n Snnn Endstop type: 0 = active low endstop input, 1 = active high endstop input, 2 = Z probe, 3 = motor load detection\n\n\n\n Example\n\n M574 X1 Y2 Z0 S1 ; X endstop at low end, Y endstop at high end, no Z endstop, all active highThis defines the position of  endstop sensor that the printer has for each axis: 0 = none, 1 = low end, 2 = high end. The optional S parameter defines whether the endstop input is active high (S1, the default), low (S0), or the axes listed use the Z probe for homing that axis (S2), or motor stall detection (S3). A normally-closed endstop switch wired in the usual way produces an active high output (S1). If different axes use different types of endstop sensing, you can use more than one M574 command.\n\nOn delta printers the XYZ parameters refer to the towers, and the endstops should normally all be high end (i.e. at the top of the towers).\n\nThe S2 and S3 options are supported in RepRapFirmware 1.20 and later.\n\nIn RepRapFirmware 1.16 and earlier, the M574 command with E parameter was used to specify whether a Z probe connected to the E0 endstop input produces an active high (S1) or active low (S0) output. In RepRapFirmware 1.17 and later, use the I parameter of the M558 command instead.\n\n"
   },
   "M575":{
      "prefix":"M575",
      "body":"",
      "description":"M575: Set serial comms parameters\n\nParameters\n\n`Pnnn` Serial channel number\n\n`Bnnn` Baud rate\n\n`Snnn` Whether checksums should be used\n\n\n\nExample\n\nM575 P1 B57600 S1\n\nThis sets the communications parameters of the serial comms channel specified by the P parameter. P0 specifies the main serial interface (typically a USB port, or serial-over-USB), while P1 specifies an auxiliary serial port (for example, the port used to connect a PanelDue). The B parameter is the required baud rate (this parameter is typically ignored if the port is a true USB port). The S parameter is a bitmap of features. The lowest bit, if set, specifies that only commands that include a valid checksum should be accepted from this comms channel.\n\n"
   },
   "M577":{
      "prefix":"M577",
      "body":"",
      "description":"M577: Wait until endstop is triggered\n\nParameters\n\n`Snnn` Desired endstop level\n\n`Xnnn` Select X axis endstop\n\n`Ynnn` Select Y axis endstop\n\n`Znnn` Select Z axis endstop\n\n`Ennn` Select extruder drive endstop\n\n\n\nExample\n\nM577 E0 S1\n\nWait for an endstop switch to be pressed. The example above will wait until the first extruder endstop is triggered.\n\nThe following trigger types may be used using the 'S' parameter:\n\n0: Endstop not hit\n\n1: Low endstop hit\n\n2: High endstop hit\n\n3: Near endstop (only Z probe)\n\n"
   },
   "M578":{
      "prefix":"M578",
      "body":"",
      "description":"M578: Fire inkjet bits\n\nParameters\n\n`Pnnn` Inkjet head number\n\n`Snnn` Bit pattern\n\n\n\nExample\n\nM578 P3 S5\n\nThis fires inkjet head 3 (the P field) using the bit pattern specified by the S field. The example shown would fire bits 101. If the P parameter is ommitted inkjet 0 is assumed.\n\nThis is a version of the M700 command used by the Inkshield, but unfortunately M700 is already taken so cannot be used for that in the standard.\n\n"
   },
   "M579":{
      "prefix":"M579",
      "body":"",
      "description":"M579: Scale Cartesian axes\n\nParameters\n\n`Xnnn` Scale factor for X axis\n\n`Ynnn` Scale factor for Y axis\n\n`Znnn` Scale factor for Z axis\n\n\n\nExample\n\nM579 X1.0127 Y0.998\n\nOn a Cartesian RepRap you can get prints exactly the right size by tweaking the axis steps/mm using the M92 G Code above. But this does not work so easily for Delta and other RepRaps for which there is cross-talk between the axes. This command allows you to adjust the X, Y, and Z axis scales directly. So, if you print a part for which the Y length should be 100mm and measure it and find that it is 100.3mm long then you set Y0.997 (= 100/100.3).\n\n"
   },
   "M580":{
      "prefix":"M580",
      "body":"",
      "description":"M580: Select Roland\n\nParameters\n\n`Rnnn` Whether Roland mode should be activated\n\n`Pnnn` Initial text to send to the Roland controller\n\n\n\nExample\n\nM580 R1 PVS4;!VZ2;!MC1;\n\nThis is not really anything to do with RepRap, but it is convenient. The little Roland mills are very widely available in hackerspaces and maker groups, but annoyingly they don't speak G Codes. As all RepRap firmware includes a G-Code interpreter, it is often easy to add functions to convert G Codes to Roland RML language. M580 selects a Roland device for output if the R field is 1, and returns to native mode if the R field is 0. The optional P string is sent to the Roland if R is 1. It is permissible to call this repeatedly with R set to 1 and different strings in the P field to communicate directly with a Roland.\n\n"
   },
   "M581":{
      "prefix":"M581",
      "body":"",
      "description":"M581: Configure external trigger\n\nParameters\n\n`Tnn` Logical trigger number to associate the endstop input(s) with, from zero up to a firmware-specific maximum (e.g. 9 for RepRapFirmware)\n\n`X, Y, Z, E` Selects endstop input(s) to monitor\n\n`P` Reserved, may be used in future to allow general I/O pins to cause triggers\n\n`S` Whether trigger occurs on a rising edge of that input (S1, default), falling edge (S0), or ignores that input (S-1). By default, all triggers ignore all inputs.\n\n`C` Condition: whether to trigger at any time (C0, default) or only when printing a file from SD card (C1)\n\n\n\nExample\n\nM581 E1:2 S1 T2 C1  ; invoke trigger 2 when a rising edge is detected on the E1 or E2 endstop input and a file is being printed from SD card\n\nWhen M581 is executed, if the T parameter is present but the other parameters are omitted, the trigger inputs and edge polarities for that trigger number are reported. Otherwise, the specified inputs and their polarities are added to the conditions that cause that trigger. Using S-1 with no X, Y, Z or E parameters sets the trigger back to ignoring all inputs.\n\nIn RepRapFirmware, trigger number 0 causes a full (emergency) stop as if M112 had been received. Trigger number 1 causes the print to be paused as if M25 had been received. Any trigger number # greater then 1 causes the macro file sys/trigger#.g to be executed. Polling for further trigger conditions is suspended until the trigger macro file has been completed. RepRapFirmware does not wait for all queued moves to be completed before executing the macro, so you may wish to use the M400 command at the start of your macro file. If several triggers are pending, the one with the lowest trigger number takes priority.\n\n"
   },
   "M582":{
      "prefix":"M582",
      "body":"",
      "description":"M582: Check external trigger\n\nParameters\n\nT Trigger number to poll\n\n\n\nExample\n\nM582 T2; check levels of inputs that give rise to trigger #2\n\nTriggers set up by the M581 command are normally activated only when the specified inputs change state. This command provides a way of causing the trigger to be executed if the input is at a certain level. For each of the inputs associated with the trigger, the trigger condition will be checked as if the input had just changed from the opposite state to the current state.\n\nFor example, if you use M581 to support an out-of-filament sensor, then M582 allows you to check for out-of-filament just before starting a print.\n\n"
   },
   "M584":{
      "prefix":"M584",
      "body":"",
      "description":"M584: Set drive mapping\n\nParameters\n\n`Xnnn` Driver number(s) for X motor(s)\n\n`Ynnn` Driver number(s) for Y motor(s)\n\n`Znnn` Driver number(s) for Z motor(s)\n\n`U,V,W, A, B, Cnnn` Driver number(s) for additional axes U, V, W, A, B and C (UVW RepRapFirmware 1.16 and later; ABC RepRapFirmware 1.19 and later)\n\n`Ennn` Driver number(s) for E motor(s)\n\n`Pnnn` Number of visible axes, defaults to the total number of axes configured.\n\n\n\nExample\n\nM584 X0 Y1 Z2:3 E4:5:6; Driver 0 controls the X motor, 1 controls Y, 2 and 3 control Z motors, 4 and 5 control E motorsAssigning a drive using M584 does not remove its old assignment. Therefore, if you assign a drive that defaults to being an extruder drive, you should also assign the extruder drives explicitly as in the above example. Failure to do so may result in unexpected behaviour.\n\nYou can use M584 to create additional axes - for example, to represent additional carriages on a machine with multiple independent X carriages. Additional axes must be created in the order UVWABC. You can hide some of the last axes you create using the P parameter. Hidden axes have no homing buttons or jog controls in the user interface.\n\nOn the Duet WiFi and Duet Ethernet, if you configure multiple drivers for an axis, either all of them must be TMC2660 drivers on the Duet or a Duet expansion board, or none of them must be. This is to facilitate dynamic microstepping and other features of the TMC2660.\n\n"
   },
   "M585":{
      "prefix":"M585",
      "body":"",
      "description":"M585: Probe ToolIn machines with a tool probe this probes the currently selected tool against it and corrects the offsets set by the G10 command (q.v.).\n\n\n\nParameter must be only one of\n\n\n\n`Xnnn`\n\n`Y-nnn`\n\n`Znnn`Where the absolute value of nnn is the radius of the tool plus the radius of the probe in that direction. So M585 X1.5 will set the X offset of a 1mm diameter tool against a 2mm diameter probe, etc. If the value of nnn is positive the tool is moved in the positive direction towards the probe until it touches. If it is negative, the tool moves the other way.\n\nSo the process should be:\n\nSet the values as closely as known in the `G10` command.\n\nMove to a position slightly offset from the probe then execute `M585`s in X, Y and Z in the tool selection macro to set them precisely.After this, the G10 command on its own can be used to report the values.\n\n"
   },
   "M586":{
      "prefix":"M586",
      "body":"",
      "description":"M586: Configure network protocols\n\nParameters\n\n`Pnn` Protocol: 0 = HTTP or HTTPS, 1 = FTP or SFTP, 2 = Telnet or SSH (which of the two choices depends on the `T` parameter)\n\n`Snn` 0 = disable this protocol, 1 = enable this protocol\n\n`Rnn` TCP port number to use for the specified protocol. Ignored unless S = 1. If this parameter is not provided then the default port for that protocol and TLS setting is used.\n\n`Tnn` 0 = don't use TLS, 1 = use TLS. Ignored unless `S` = 1. If this parameter is not provided, then TLS will be used if the firmware supports it and a security certificate has been configured. If `T1` is given but the firmware does not support TLS or no certificate is available, then the protocol will not be enabled and an error message will be returned.\n\n`C\"site\"` Set or reset allowed site for cross-orgin HTTP requests (RRF > 3.2-b4.1)M586 with no S parameter reports the current support for the available protocols.\n\nRepRapFirmware 1.18 and later enable only HTTP (or HTTPS if supported) protocol by default. If you wish to enable FTP and/or Telnet, enable them using this command once or twice in config.g.\n\n"
   },
   "M587":{
      "prefix":"M587",
      "body":"",
      "description":"M587: Store WiFi host network in list, or list stored networks\n\nParameters\n\n`Sccc` Network SSID\n\n`Pccc` Network password\n\n`Inn.nn.nn.nn` (optional) IP address to use when connected to this network. If zero or not specified then an IP address will be acquired via DHCP.\n\n`Jnn.nn.nn.nn` (optional) Gateway IP address to use when connected to this network.\n\n`Knn.nn.nn.nn` (optional) Netmask to use when connected to this network\n\n`Lnn.nn.nn.nn` (optional, supported only by DuetPi + DSF v3.3 or newer) DNS server to use\n\n`Cnnn` (supported only by DuetPi + DSF v3.3 or newer) Country code for the WiFi adapter, only required if not set beforeIf a password or SSID includes space or semicolon characters then it must be enclosed in double quotation marks. For security, do not use this command in the config.g file, or if you do then remove it after running it once so that the network password is not visible in the file.\n\nM587 with no parameters lists all stored SSIDs, but not the stored passwords.\n\n"
   },
   "M588":{
      "prefix":"M588",
      "body":"",
      "description":"M588: Forget WiFi host network\n\nParameters\n\n`Sccc` SSID to remove from the networks listThe specified SSID will be removed from the networks list and the associated password cleared out of EEPROM. If the SSID is given as * then all stored networks will be forgotten.\n\n"
   },
   "M589":{
      "prefix":"M589",
      "body":"",
      "description":"M589: Configure access point parameters\n\nParameters\n\n`Sccc` The SSID that the WiFi interface should use when it is commanded to run as an access point\n\n`Pccc` The WiFi password\n\n`Inn.nn.nn.nn` The IP address to useNote: WPA2 security will be used by default.\n\n"
   },
   "M590":{
      "prefix":"M590",
      "body":"",
      "description":"M590: Report current tool type and indexReport the current tool type, which may be \"Extruder,\" \"Picker,\" \"Laser,\" \"Foam Cutter,\" \"Milling,\" or any others implemented by the machine. Also report the tool index, such as \"0x01\" for the second extruder.\n\n\n\nExample\n\n> M590\n\n> echo: Extruder 0x00\n\n"
   },
   "M591":{
      "prefix":"M591",
      "body":"",
      "description":"M591: Configure filament monitoringThis configures filament sensing for the specified extruder. The sensor may be a simple filament presence detector, or a device that measures movement of filament, or both. The action on detecting a filament error is firmware-dependent, but would typically be to run a macro and/or to pause the print and display a message.\n\n\n\nParameters\n\nCnn Which input the filament sensor is connected to. On Duet electronics: 0=X endstop input, 1=Y endstop input, 2=Z endstop input, 3=E0 endstop input etc.\n\nDnn Extruder drive number (0, 1, 2...),\n\nPnn Type of sensor: 0=none, 1=simple sensor (low signal when filament present), 2=simple sensor (high signal when filament present), 3=Duet3D rotating magnet sensor, 4=Duet3D rotating magnet sensor with microswitch,:Snn S0 = disable filament monitoring, S1 = enable filament monitoring. Calibration data may be collected while printing even when filament monitoring is disabled.5=Duet3D laser filament monitor, 6=Duet3D laser filament monitor with microswitch, 7=pulse-generating sensor\n\n\n\nAdditional parameters for Duet3D laser filament monitor\n\nRaa:bb Allow the filament movement reported by the sensor to be between aa% and bb% of the commanded values; if it is outside these values and filament monitoring is enabled, the print will be paused\n\nEnn minimum extrusion length before a commanded/measured comparison is done, default 3mm\n\nAdditional parameters for Duet3D rotating magnet filament monitor\n\nLnn Filament movement per complete rotation of the sense wheel, in mm\n\nR, E As for Duet3D laser filament monitor\n\nAdditional parameters for a pulse generating filament monitor\n\nLnn Filament movement per pulse in mm\n\nR, E As for Duet3D laser filament monitor\n\nExamples\n\nM591 D0 C3 P5 S1 R70:130 L24.8 E6.0  ; Duet3D laser sensor for extruder drive 0 is connected to E0 endstop input, 24.8mm/rev, 70% to 130% tolerance, 6mm detection length\n\nM591 D1   ; display filament sensor parameters for extruder drive 1Note: RepRapFirmware 1.19 and 1.20 also supported filament monitors via M591, but some of the parameters were different.\n\n"
   },
   "M592":{
      "prefix":"M592",
      "body":"",
      "description":"M592: Configure nonlinear extrusion\n\nParameters\n\nDnn Extruder drive number (0, 1, 2...)\n\nAnnn A coefficient in the extrusion formula, default zero\n\nBnnn B coefficient in the extrusion formula, default zero\n\nLnnn Upper limit of the nonlinear extrusion compensation, default 0.2\n\nT nnn Reserved for future use, for the temperature at which these values are valid\n\n\n\nExample\n\nM592 D0 A0.01 B0.0005; set parameters for extruder drive 0\n\nM592 D0; report parameters for drive 0Most extruder drives use toothed shafts to grip the filament and drive it through the hot end. As the extrusion speed increases, so does the back pressure from the hot end, and the increased back pressure causes the amount of filament extruded per step taken by the extruder stepper motor to reduce. This may be because at high back pressures, each tooth compresses and skates over the surface of the filament for longer before it manages to bite. See forum post http://forums.reprap.org/read.php?262,802277 and the graph at http://forums.reprap.org/file.php?262,file=100851,filename=graph.JPG for an example.\n\nNonlinear extrusion compensates for this effect. The amount of extrusion requested is multiplied by (1 + MIN(L, A*v + B*v^2)) where v is the requested extrusion speed (calculated from the actual speed at which the move will take place) in mm/sec.\n\nNonlinear extrusion is not applied to extruder-only movements such as retractions and filament loading.\n\n"
   },
   "M593":{
      "prefix":"M593",
      "body":"",
      "description":"M593: Configure Dynamic Acceleration Adjustment\n\nParameters\n\nFnnn Frequency of ringing to cancel in Hz. Zero or negative values disable the feature.\n\n\n\nExample\n\nM593 F40.5This is an experimental feature of RepRapFirmware. By default, Dynamic Acceleration Adjustment (DAA) is disabled. If it is enabled, then acceleration and deceleration rates will be adjusted separately per-move to cancel out ringing at the specified frequency. Any acceleration values set using M204 will be saved but ignored until DAA is disabled, but acceleration limits set by M201 will still be honoured.\n\nDAA is most useful to avoid exciting low-frequency ringing, for which S-curve acceleration is ineffective and may make the ringing worse. High-frequency ringing is better countered by using S-curve acceleration.\n\nTo measure the ringing frequency, take a print that exhibits ringing on the perimeters (for example a cube), preferably printed single-wall or external-perimeters-first. Divide the speed at which the outer perimeter was printed (in mm/sec) by the distance between adjacent ringing peaks (in mm), measured away from the corner so that the head has reached the full printing speed.\n\nCartesian and CoreXY printers will typically have different frequencies of ringing for the X and Y axes. In this case it is is usually best to aim to cancel the lower ringing frequency, because the higher frequency will be less strongly excited. If the frequencies are not much different, in a moving-bed cartesian printer you could reduce the higher ringing frequency by adding mass to that axis. Note that X axis ringing causes artefacts predominantly on the Y face of the test cube, and vice versa.\n\n"
   },
   "M594":{
      "prefix":"M594",
      "body":"",
      "description":"M594: Enter/Leave Height Following mode\n\nParameters\n\nPn P1 = enter height following mode, P0 = leave height following modeHeight following mode allows the Z position of the tool to be controlled by a PID controller using feedback from a sensor. See also M951.\n\nIf a movement command (e.g. G1) explicitly mentions the Z axis while height following mode is active, existing moves in the pipeline will be allowed to complete and the machine allowed to come to a standstill. Then height following mode will be terminated and the new move executed.\n\n"
   },
   "M595":{
      "prefix":"M595",
      "body":"",
      "description":"M595: Set movement queue length\n\nParameters\n\nPnn Maximum number of moves held in the movement queue. RepRapFirmware uses this value to determine how many DDA objects to allocate.\n\nSnn (optional) Number of pre-allocated per-motor movement objects. If the number of pre-allocated objects is insufficient, RepRapFirmware will attempt to allocate additional omnes dynamically when they are needed.Different features of motion control firmware may have competing demands on microcontroller RAM. In particular, operations that use many short segments (e.g. laser rastering) need longer movement queues than typical 3D printing, but have fewer motors to control. This command allows the movement queue parameters to be adjusted so that the queue can be lengthened if necessary, or kept short if a long movement queue is not needed and there are other demands on RAM.\n\nM595 without any parameters reports the length of the movement queue and the number of per-motor movement objects allocated.\n\n"
   },
   "M600":{
      "prefix":"M600",
      "body":"",
      "description":"M600: Filament change pausePause for filament change.\n\n\n\nParameters\n\n`X[pos]`\n\n`Y[pos]`\n\n`Z[relative lift]`\n\n`E[initial retract]`\n\n`L[later retract distance for removal]`\n\n`AUTO` Automatically (only Prusa Firmware with MMU connected)1\n\nExample\n\nM600\n\nIn SmoothieWare:\n\nThe variable \"after_suspend_gcode\" is run after M600. \n\nFor example:\n\nafter_suspend_gcode   G91_G0E-5_G0Z10_G90_G0X-50Y-50   # gcode to run after suspend, retract then get head out of way\n\nIn RepRapFirmware, M600 causes macro file filament-change.g to be run if it exists, otherwise it falls back to pause.g. The parameters in the M600 command are ignored.\n\n\n\nNotesIn Prusa Firmware this command is also used when the Filament Runout Sensor triggers. To prevent filament blobs it will raise to 25 mm if it has been triggered below 25 mm layer height. Default are X=211 mm, Y=0 mm, Z=2 mm, E=-2 mm, L=-80 mm1\n\n"
   },
   "M601":{
      "prefix":"M601",
      "body":"",
      "description":"M601: Pause printPauses print on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n"
   },
   "M602":{
      "prefix":"M602",
      "body":"",
      "description":"M602: Resume printResumes print on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n"
   },
   "M603":{
      "prefix":"M603",
      "body":"",
      "description":"M603: Stop printStops print on Prusa i3 MK2/s,MK2.5/s,MK3/s.\n\n(In development)\n\nPrusa-mini specific: M603 Configure filament change\n\n\n\nParameters\n\n`T[toolhead]` Select extruder to configure, active extruder if not specified (not used yet)\n\n`U[distance]` Retract distance for removal, for the specified extruder.\n\n`L[distance]` Extrude distance for insertion, for the specified extruder."
   },
   "M605":{
      "prefix":"M605",
      "body":"",
      "description":"M605: Set dual x-carriage movement modeSet Dual X-Carriage movement mode.\n\n\n\nParameters\n\n`S[mode]` Mode (see below)\n\n`X[duplication x-offset]` Optional X offset for Mode 2\n\n`R[duplication temp offset]` Optional temperature difference for Mode 2\n\nExample\n\nM605 S1; Set mode to auto-park\n\nM605 S0: Full control mode. The slicer has full control over x-carriage movement\n\nM605 S1: Auto-park mode. The inactive head will auto park/unpark without slicer involvement\n\nM605 S2 [Xnnn] [Rmmm]: Duplication mode. The second extruder will duplicate the first with nnn millimeters x-offset and an optional differential hotend temperature of mmm degrees. E.g., with \"M605 S2 X100 R2\" the second extruder will duplicate the first with a spacing of 100mm in the x direction and 2 degrees hotter.\n\nRepRapFirmware does not implement M605 because it supports dual carriage mode, duplication mode, auto park, different temperatures etc. using the M563 tool definition command and the tool change macro files.\n\n"
   },
   "M650":{
      "prefix":"M650",
      "body":"",
      "description":"M650: Set peel move parametersThis command is sent by nanoDLP to set the parameters for the peel move used after curing a layer. RepRapFirmware 2.02 ignores it. If using RepRapFirmware 2.03 or later you can create a empty file M650.g to cause it to be ignored.\n\n"
   },
   "M651":{
      "prefix":"M651",
      "body":"",
      "description":"M651: execute peel moveThis command is sent by nanoDLP to execute a peel move after curing a layer. RepRapFirmware 2.02 executes macro /sys/peel-move.g in response to this command. For RepRapFirmware 2.03 and later, create a macro file M651.g containing the commands required to execute the peel move.\n\n"
   },
   "M665":{
      "prefix":"M665",
      "body":"",
      "description":"M665: Set delta configuration\n\nParameters\n\n`Lnnn` Diagonal rod length\n\n`Rnnn` Delta radius\n\n`Snnn` Segments per second1\n\n`Bnnn` Safe probing radius2,3\n\n`Hnnn` Delta height defined as nozzle height above the bed when homed after allowing for endstop corrections 2`Xnnn` X tower position correction2,4\n\n`Ynnn` Y tower position correction2,4\n\n`Znnn` Z tower position correction2,4`Annn` X tower diagonal rod trim.1 (Marlin 2.0.6+)\n\n`Bnnn` Y tower diagonal rod trim.1 (Marlin 2.0.6+)\n\n`Cnnn` Z tower diagonal rod trim.1 (Marlin 2.0.6+)\n\nExamples\n\nM665 L250 R160 S200; (Marlin)\n\nM665 L250 R160 B80 H240 X0 Y0 Z0; (RepRapFirmware and Marlin 1.1.0)\n\nSet the delta calibration variables. (See the discussion page for notes on this implementation.)\n\n\n\nNotes1Only supported on Marlin.\n\n2Only supported in RepRapFirmware and Marlin 1.1.0.\n\n3 In Marlin 1.1.0 sets the radius on which the probe points are taken for the delta auto calibration routine G33 as well as for the manual LCD calibration menu.\n\n4X, Y and Z tower angular offsets from the ideal (i.e. equilateral triangle) positions, in degrees, measured anti-clockwise looking down on the printer.\n\nIn Marlin 1.1.0 X,Y and Z tower angular offsets will be rotated so the Z tower angular offset is zero.\n\n"
   },
   "M666":{
      "prefix":"M666",
      "body":"",
      "description":"M666: Set delta endstop adjustment\n\nParameters\n\n`Xnnn` X axis endstop adjustment\n\n`Ynnn` Y axis endstop adjustment\n\n`Znnn` Z axis endstop adjustment\n\n`Annn` X bed tilt in percent1\n\n`Bnnn` Y bed tilt in percent1\n\n\n\nExample\n\nM666 X-0.1 Y+0.2 Z0\n\nSets delta endstops adjustments.\n\nIn RepRapFirmware and Repetier, positive endstop adjustments move the head closer to the bed when it is near the corresponding tower. In Marlin and Smoothieware, negative endstop corrections move the head closer to the bed when it is near the corresponding tower.\n\nIn Marlin, only negative endstop corrections are allowed.\n\nFrom version 1.1.0 onward positive endstops are allowed to be entered but the endstops will be normalized to zero or negative and the residue will be subtracted from the delta height defined in M665.\n\nIn Repetier the endstop corrections are expressed in motor steps. In other firmwares they are expressed in mm.\n\n1RepRapFirmware 1.16 and later.\n\n"
   },
   "M667":{
      "prefix":"M667",
      "body":"",
      "description":"M667: Select CoreXY mode\n\nParameters\n\n`Snnn` CoreXY mode\n\n`Xnnn` X axis scale factor (RepRapFirmware 2.02 and earlier)\n\n`Ynnn` Y axis scale factor (RepRapFirmware 2.02 and earlier)\n\n`Znnn` Z axis scale factor (RepRapFirmware 2.02 and earlier)\n\n\n\nExample\n\nM667 S1\n\nM667 S0 selects Cartesian mode (unless the printer is configured as a delta using the M665 command). Forward motion of the X motor moves the head in the +X direction. Similarly for the Y motor and Y axis, and the Z motor and Z axis. This is the default state of the firmware on power up.\n\nM667 S1 selects CoreXY mode. Forward movement of the X motor moves the head in the +X and +Y directions. Forward movement of the Y motor moves the head in the -X and +Y directions.\n\nM667 S2 selects CoreXZ mode. Forward movement of the X motor moves the head in the +X and +Z directions. Forward movement of the Z motor moves the head in the -X and +Z directions.\n\nRepRapFirmware 2.03 and earlier support additional parameters X, Y and Z may be given to specify factors to scale the motor movements by for the corresponding axes. For example, to specify a CoreXZ machine in which the Z axis moves 1/3 of the distance of the X axis for the same motor movement, use M667 S2 Z3. The default scaling factor after power up is 1.0 for all axes. In RepRapFirmware 2.03 and later, this functionality is moved to the movement matrix that you can define or alter using the M669 command.\n\nTo change the motor directions, see the M569 command.\n\n"
   },
   "M668":{
      "prefix":"M668",
      "body":"",
      "description":"M668: Set Z-offset compensations polynomialPolynomial compensation is an experimental method to compensate for geometric distortion of a delta machine Z-plane. After the bed is compensated with the set of G30 points, there remains error. This method fits a 6th degree polynomial with independent origins for each order to the residual error data (using a simulated annealing technique on the host). The polynomial is communicated and controlled through M668. Because the polynomial takes many floating point operations to compute each point, the firmware builds a grid of values, and used bi-linear interpolation to adjust the actual Z-axis offset error estimate.\n\nFor the polynomial used, 40 parameters are specified. The I parameter allows the coefficients to be loaded a few at a time, which limits the size of the G-code string. The index starts with 1, not with 0.\n\nM668 Ix S[list of values] sets the polynomial parameters starting at index x, if index present and!= 0.\n\nM668 R recomputes the grid based on the current parameters.\n\nM668 P[0|1] turns off or on the polynomial compensation.\n\n\n\nTypical usage\n\n\n\nM668 I1 S4.882E-17:0.0\n\nM668 I3 ...\n\n...\n\nM668 R P1\n\nWhich sets the list, computes the interpolation grid, and then enables compensation.\n\n"
   },
   "M669":{
      "prefix":"M669",
      "body":"",
      "description":"M669: Set kinematics type and kinematics parameters\n\nParameters\n\nKnnn Kinematics type: 0 = Cartesian, 1 = CoreXY, 2 = CoreXZ, 3 = linear delta, 4 = serial SCARA, 5 = CoreXYU, 6 = Hangprinter, 7 = polar, 8 = CoreXYUV, 9 = linear delta + Z axis, 10 = rotary delta, 11 = MarkForged, 12 = reserved for Collinear TripteronSelects the specified kinematics, then uses the other parameters to configure it. If the K parameter is missing then the other parameters are used to update the configuration data for the current kinematics. If no parameters are given then the current kinematics and configuration parameters are reported\n\n\n\n Parameters for generalised Cartesian kinematics (including CoreXY, CoreXZ, MarkForged, CoreXYU etc.)\n\n Xnnn, Ynnn, Znnn, Unnn etc. (optional) Movement matrix coefficients. For example. `X1:-1:0` tells the firmware that to move the X axis one unit, the first motor must be moved 1 unit in the forwards direction, the second motor 1 unit in the reverse direction, and the third motor not at all. Using these coefficients, you can specify the kinematics equations for any printer with up to 10 axes for which the movement of each axis is a linear combination of the movements of the individual motors. If these parameters are omitted, the defaults for the specified kinematics (K parameter) will be used.\n\n Parameters for serial SCARA kinematics \n\nPnnn Proximal arm length (mm)\n\nDnnn Distal arm length (mm)\n\nAnnn:nnn Proximal arm joint movement minimum and maximum angles, in degrees anticlockwise seen from above relative to the X axis \n\nBnnn:nnn Proximal-to-distal arm joint movement minimum and maximum angles, in degrees anticlockwise seen from above relative to both arms in line\n\nCnnn:nnn:nnn Crosstalk factors. The first component is the proximal motor steps to equivalent distal steps factor, the second is the proximal motor steps to equivalent Z motor steps factor, and the third component is the distal motor steps to equivalent Z motor steps factor.\n\nSnnn Segments per second if smooth XY motion is approximated by means of segmentation\n\nTnnn Minimum segment length (mm) if smooth XY motion is approximated by means of segmentation\n\nXnnn X offset of bed origin from proximal joint\n\nYnnn Y offset of bed origin from proximal joint\n\n\n\nExamples\n\nM669 K4 P300 D250 A-90:90 B-135:135 C0:0:0 S200 X300 Y0\n\nThe minimum and maximum arm angles are also the arm angles assumed by the firmware when the homing switches are triggered. The P, D, A and B parameters are mandatory. The C and F parameters default to zero, and the segmentation parameters default to firmware-dependent values.\n\n\n\nParameters for Polar kinematics\n\nRaaa:bbb Minimum and maximum radius in mm. If only one value it given it will be used as the maximum radius, and the minimum radius will be assumed to be zero.\n\nHnnn Radius in mm at which the homing switch is triggered during a homing move. If this parameter is not present, the homing switch is assumed to trigger at the minimum radius.\n\nFnnn Maximum turntable speed in degrees per second\n\nAnnn Maximum turntable acceleration in degrees per second per second\n\nSnnn, Tnnn As for serial SCARA kinematics"
   },
   "M670":{
      "prefix":"M670",
      "body":"",
      "description":"M670: Set IO port bit mapping\n\nParameters\n\nPnn:nn:nn... List of logical port numbers that bits 0, 1, 2... control\n\nTnnn port switching time advance in millisecondsRepRapFirmware 1.19 and later provides an optional P parameter on the G1 command to allow I/O ports to be set to specified states for the duration of the move. The argument to the P parameter is a bitmap giving the required state of each port. The M669 command specifies the mapping between the bits of that argument and logical port numbers. Optionally, the T parameter can be used to advance the I/O port switching a short time before the corresponding move begins.\n\n"
   },
   "M671":{
      "prefix":"M671",
      "body":"",
      "description":"M671: Define positions of Z leadscrews or bed leveling screws\n\nParameters\n\nXnn:nn:nn... List of between 2 and 4 X coordinates of the leadscrews that drive the Z axis or the bed leveling screws\n\nYnn:nn:nn... List of between 2 and 4 Y coordinates of the leadscrews that drive the Z axis or the bed leveling screws\n\nSnn Maximum correction to apply to each leadscrew in mm (optional, default 1.0)\n\nPnnn Pitch of the bed leveling screws (not used when bed leveling using independently-driven leadscrews). Defaults to 0.5mm which is correct for M3 bed leveling screws.\n\n\n\nExample\n\nM671 X-15.0:100.0:215.0 Y220.0:-20.0:220.0 ; Z leadscrews are at (-15,220), (100,-20) and (215,220)Informs the firmware of the positions of the leadscrews used to raise/lower the bed or gantry. The numbers of X and Y coordinates must both be equal to the number of drivers used for the Z axis (see the M584 command). This allows the firmware to perform bed leveling by adjusting the leadscrew motors individually after bed probing.\n\nFor machines without multiple independently-driven Z leadscrews, this command can be used to define the positions of the bed leveling screws instead. Then bed probing can be used to calculate and display the adjustment required to each screw to level the bed. The thread pitch (P parameter) is used to translate the height adjustment needed to the number of turns of the leveling screws.\n\n"
   },
   "M672":{
      "prefix":"M672",
      "body":"",
      "description":"M672: Program Z probe\n\nParameters\n\nSnn:nn:nn... Sequence of 8-bit unsigned values to send to the currently-selected Z probe\n\n\n\nExample\n\nM671 S50:205This command is for sending configuration data to programmable Z probes such as the Duet3D delta effector. The specified command bytes are sent to the probe. The Duet3D probe stores the configuration data in non-volatile memory, so there is no need to send this command every time the probe is used.\n\n"
   },
   "M673":{
      "prefix":"M673",
      "body":"",
      "description":"M673: Align plane on rotary axis\n\n Parameters\n\nU,V,W,A,B,C Rotary axis letter on which the plane is mounted\n\nPnnn Factor to multiply the correction angle (degrees) with (defaults to 1)\n\n\n\nExample\n\nM673 AThis code is intended to align a plane that is mounted on a rotary axis. To make use of this code it is required to take two probe points via G30 P first.\n\nSupported in RepRapFirmware 2.02 and later.\n\n"
   },
   "M674":{
      "prefix":"M674",
      "body":"",
      "description":"M674: Set Z to center pointThis code is intended to determine the Z center point of a stash that is mounted on a rotary axis. This code is yet to be implemented.\n\n"
   },
   "M675":{
      "prefix":"M675",
      "body":"",
      "description":"M675: Find center of cavity\n\n Parameters\n\nX,Y,Z Axis to probe on\n\nFnnnn Probing feedrate\n\nRnnn Distance to move away from the lower endstop before the next probing move starts\n\n\n\n Example\n\n M675 X R2 F1200This code is intended to find the center of a cavity that can be measured using the configured axis endstop. If using a Z probe for this purpose, make sure the endstop type for the corresponding axis is updated before this code is run. Once this code starts, RepRapFirmware will move to the lower end looking for an endstop to be triggered. Once it is triggered, the lower position is saved and the axis maximum is probed. As soon as both triggers have been hit, the center point is calculated and the machine moves to the calculated point.\n\n"
   },
   "M700":{
      "prefix":"M700",
      "body":"",
      "description":"M700: Level plate\n\nExample\n\nM700\n\nScript to adjust the plate level.\n\n"
   },
   "M701":{
      "prefix":"M701",
      "body":"",
      "description":"M701: Load filamentInitiate a filament load. This command can be used without any additional parameters.\n\n\n\nParameters\n\n`Snn` Filament to load (RepRapFirmware)\n\n`Tnn` Tool to load (Marlin)\n\n`Lnn` Length to use for load (Marlin)\n\n`Znn` Z raise to perform (Marlin)\n\nWith no parameters\n\n\n\n RepRapFirmware will report the name of the loaded filament (if any).\n\n Marlin Firmware initiates a Filament Load.\n\n\n\nExamples\n\nM701\n\nM701 S\"PLA\"; Only in RepRapFirmware\n\nM701 T0    ; Only in Marlin.\n\nRepRapFirmware 1.19 and later implement a filament management mechanism to load and unload different materials. This code may be used to load a material for the active tool, however be aware that this code will work only for tools that have exactly one extruder assigned. When called RepRapFirmware will...\n\n Run the macro file \"load.g\" in the subdirectory of the given material (e.g. /filaments/PLA/load.g)\n\n Change the filament name of the associated tool, so it can be reported back to Duet Web Control"
   },
   "M702":{
      "prefix":"M702",
      "body":"",
      "description":"M702: Unload filamentInitiate a filament unload. This command can be used without any additional parameters. In contrast to M701 this code is intended to unload the previously loaded filament from the selected tool.\n\n\n\nParameters\n\n`Tnn` Tool to load (Marlin)\n\n`Unn` Length to use for unload (Marlin)\n\n`Znn` Z raise to perform (Marlin)In response to M702 RepRapFirmware will do the following:\n\n Run the macro file \"unload.g\" in the subdirectory of the given material (e.g. /filaments/PLA/unload.g)\n\n Change the filament name of the current tool, so it can be reported back to Duet Web Control\n\nExamples\n\nM702        ; Unload filament as previously configured\n\nM702 U420 Z2; Unload 420mm (Marlin) with a Z raise of 2mm\n\n"
   },
   "M703":{
      "prefix":"M703",
      "body":"",
      "description":"M703: Configure Filament In RepRapFirmware this code is used to apply the configuration of a previously loaded filament (see M701). All it does is run /filaments/<loaded filament>/config.g which may contain codes to set parameters like extrusion factor, retraction distances and temperatures. If no filament is assigned to the current tool, this code will not generate a warning.If the filaments feature is used, it is recommended to put this code into tpost*.g to ensure the right filament parameters are set. Supported in RepRapFirmware 2.02 and newer.\n\n"
   },
   "M710":{
      "prefix":"M710",
      "body":"",
      "description":"M710: Firmware dependentM710: Controller Fan settings\n\n\n\nParameters\n\nWith no parameters, report current settings.\n\n`A[bool]` Turn Auto Mode on or off.\n\n`Snnn` Set the Active Speed (0-255) used when motors are enabled.\n\n`Innn` Set the Idle Speed (0-255) used when motors are disabled.\n\n`Dnnn` Set the Idle Duration (seconds) to keep the fan running after motors are disabled.\n\n`R` Reset to defaults.\n\nExample\n\nM710 S200; Set \"active\" fan speed to 200\n\nM710: Erase the EEPROM and reset the boardThis command only exists in a defunct bq fork of Marlin Firmware.\n\n\n\nExample\n\nM710\n\n"
   },
   "M750":{
      "prefix":"M750",
      "body":"",
      "description":"M750: Enable 3D scanner extension\n\nExample\n\nM750\n\nThis code may be used as an OEM extension to enable scanner functionality in the firmware. After a regular start of RepRapFirmware, the 3D scan extension is disabled by default, but if additional scanner components are attached, this code may be used to enable certain OEM functions.\n\n"
   },
   "M751":{
      "prefix":"M751",
      "body":"",
      "description":"M751: Register 3D scanner extension over USB\n\nExample\n\nM751\n\nWhen a 3D scanner board is attached to the USB port, this code is used to turn on communication between the 3D printing and the scanner board. If the USB connection is removed while the 3D scanner configuration is active, the firmware will disable it again and restore the default communication parameters.\n\n"
   },
   "M752":{
      "prefix":"M752",
      "body":"",
      "description":"M752: Start 3D scan\n\nParameters\n\n`Snnn`: Length/degrees of the scan\n\n`Rnnn`: Resolution (new in RRF 2.0) [optional, defaults to 100]\n\n`Nnnn`: Scanner mode (new in RRF 2.0) [optional, 0=Linear (default), 1=Rotary]\n\n`Pnnn`: Filename for the scan\n\n\n\nExample\n\nM752 S300 Pmyscan\n\nInstruct the attached 3D scanner to initiate a new 3D scan and to upload it to the board's SD card (i.e. in the \"scans\" directory). Before the SCAN command is sent to the scanner, the macro file \"scan_pre.g\" is executed and when the scan has finished, the macro file \"scan_post.g\" is run. Be aware that both files must exist to avoid error messages.\n\n"
   },
   "M753":{
      "prefix":"M753",
      "body":"",
      "description":"M753: Cancel current 3D scanner action\n\nExample\n\nM753\n\nInstruct the attached 3D scanner to cancel the current operation. Cancelling uploads is not supported.\n\n"
   },
   "M754":{
      "prefix":"M754",
      "body":"",
      "description":"M754: Calibrate 3D scanner\n\nParameters\n\nNnnn Calibration mode (0=linear [default], 1=rotary)\n\nExample\n\nM754\n\nCalibrates the attached 3D scanner. Before the calibration is performed by the external scanner, \"calibrate_pre.g\" is run and when it is complete, \"calibrate_post.g\" is executed.\n\n"
   },
   "M755":{
      "prefix":"M755",
      "body":"",
      "description":"M755: Set alignment mode for 3D scanner\n\nParameters\n\n`Pnnn` Whether to turn on (> 0) or off (<= 0) the alignment feature\n\n\n\nExamples\n\nM755 P1\n\nM755 P0\n\nSends the ALIGN ON/OFF command the attached 3D scanner. Some devices turn on a laser when this command is received. If the 'P' parameter is missing, equal to, or less than 0, the alignment feature is turned off. Depending on whether the alignment is turned on or off, either align_on.g or align_off.g is executed before the ALIGN command is sent to the scanner.\n\n"
   },
   "M756":{
      "prefix":"M756",
      "body":"",
      "description":"M756: Shutdown 3D scanner\n\nExample\n\nM756\n\nSends the SHUTDOWN command the attached 3D scanner.\n\n"
   },
   "M800":{
      "prefix":"M800",
      "body":"",
      "description":"M800: Fire start print procedure1 only in bq-Marlin Firmware\n\n\n\nExample\n\nM800\n\n"
   },
   "M801":{
      "prefix":"M801",
      "body":"",
      "description":"M801: Fire end print procedure1 only in bq-Marlin Firmware\n\n\n\nExample\n\nM801\n\n"
   },
   "M808":{
      "prefix":"M808",
      "body":"",
      "description":"M808: Set or Goto Repeat MarkerThe M808 L[count] command is used in a G-code file to set a Repeat Marker beginning at the start of the following line. For an SD print, the firmware will save a marker with the file's byte position and the count given by the L parameter. To set an infinite loop use L0. To terminate an infinite loop from the host, M808 K will cancel all current loops.\n\nThe M808 command (no parameters) will cause G-code processing to loop back to the previous Repeat Marker as many times as specified. Ideally, each instance of M808 L should have a corresponding M808.\n\nThe number of nested M808 L commands is limited to the depth set in the firmware. To enable this feature in Marlin, define GCODE_REPEAT_MARKERS. Hosts should look for Cap:REPEAT. At this time the feature only applies to printing direct from media and otherwise M808 is ignored, so host developers are free to come up with their own approach to these codes with no nesting limit and make it work with any old firmware.\n\n\n\nExample\n\nM808 L10       ; Set Marker to repeat 10 times\n\nM300 P100 S440 ; Beep!\n\nM300 P10 S0    ; Silence\n\nM808           ; End Marker\n\nRepRapFirmware processes M808 as follows:\n\n - M808 S{ccc} translates into while ccc followed by block begin. ccc must yield true or false. For more on while-loops and expressions in RepRapFirmware, see https://duet3d.dozuki.com/Wiki/GCode_Meta_Commands.\n\n - M808 Lnn is equivalent to M808 S{nn == 0 || iterations < nn}.\n\n - M808 without S or L parameter ends the block.\n\n - As usual, predefined constant iterations reports the number of completed iterations of the innermost loop.\n\n - M808 without S or L parameter when not inside a loop, or any M808 command in an input stream other than a SD print file, gives rise to an error message.M808 in Marlin 2.0.8\n\nM808 L        ; Set marker to repeat infinitely\n\nM300 P100 S440; Beep!\n\nM300 P10 S0   ; Silence\n\nM808          ; End marker\n\nM808 K        ; Sent from host to cancel the loop\n\n"
   },
   "M851":{
      "prefix":"M851",
      "body":"",
      "description":"M851: Set Z-Probe OffsetSets the Z-probe Z offset. This offset is used to determine the actual Z position of the nozzle when using a probe to home Z with G28. This value may also be used by G29 to apply correction to the Z position.\n\nThis value represents the distance from nozzle to the bed surface at the point where the probe is triggered. This value will be negative for typical switch probes, inductive probes, and setups where the nozzle makes a circuit with a raised metal contact. This setting will be greater than zero on machines where the nozzle itself is used as the probe, pressing down on the bed to press a switch (this is a common setup on Delta machines).\n\nThis setting is saved in the EEPROM by M500 and restored by M501. The default (as reset by M502) is set by the Z_PROBE_OFFSET_FROM_EXTRUDER setting in Configuration.h.\n\nNote that in Marlin 1.1.0 and later M851 sets the value literally as given, while Marlin 1.0.2 negates the absolute value.\n\nThe examples below will set the Z-probe Z offset to -4mm (below the nozzle):\n\nM851 in Marlin 1.0.2\n\nM851 Z4; Set the Z probe offset to -4\n\nM851 in Marlin 1.1.0\n\nM851 Z-4; Set the Z probe offset to -4\n\nM851 in Marlin 2.0.0\n\nM851 X-22 Y3 Z-4; Set the probe XYZ offsets\n\nM851 in MK4duo 4.3.25\n\nM851 X2 Y-5 Z-4; Set the probe offset to X=2, Y=-5 and Z=-4\n\nM851 in RepRapFirmware 2.02 and laterM851 Znn is implemented for backwards compatibility with other firmwares. It sets the Z probe trigger in the same way as G31 Z-nn (note the sign reversal). It also flags the Z-probe G31 parameters as to be saved in config-override.g if the M500 command is used.\n\n"
   },
   "M860":{
      "prefix":"M860",
      "body":"",
      "description":"M860 Wait for Probe Temperature\n\nParameters\n\n`Snnnn` Target temperature\n\nNotesIn Prusa Firmware this command will wait for the PINDA thermistor to reach a target temperature.\n\n"
   },
   "M861":{
      "prefix":"M861",
      "body":"",
      "description":"M861 Set Probe Thermal Compensation\n\nParameters\n\n`?` Print current EEPROM offset values\n\n`!` Set factory default values\n\n`Z` Set all values to 0 (effectively disabling PINDA temperature compensation)\n\n`S` Microsteps\n\n`I` Table index\n\nExample\n\nM861?\n\nResults\n\n\n\nPINDA cal status: 1\n\nindex, temp, ustep, um\n\nn/a, 35, 0, 0.00\n\n0, 40, 0, 0.00\n\n1, 45, 0, 0.00\n\n2, 50, 0, 0.00\n\n3, 55, 0, 0.00\n\n4, 60, 0, 0.00\n\n\n\nNotesIn Prusa Firmware this command will set / read the PINDA temperature compensation offsets.\n\n"
   },
   "M862":{
      "prefix":"M862",
      "body":"",
      "description":"M862: Print checkingChecks the parameters of the printer and gcode and performs compatibility check\n\nM862.1: Check nozzle diameter\n\nParameters\n\n`Pnnnn` nnnn = Nozzle diameter 0.25 /0.40 /0.60\n\n`Q` Current nozzle diameterWhen run with P<> argument, the check is performed against the input value.\n\nWhen run with Q argument, the current value is shown.\n\n\n\nExample messages\n\n`warn` Printer nozzle diameter differs from the G-code. Continue?\n\n`strict` Printer nozzle diameter differs from the G-code. Please check the value in settings. Print cancelled.M862.2: Check model code\n\nParameters\n\n`Pnnnn` nnnn = Prusa model\n\n`Q` Current modelWhen run with P<> argument, the check is performed against the input value.\n\nWhen run with Q argument, the current value is shown.\n\nAccepted printer type identifiers and their numeric counterparts:\n\n\n\n     - MK1         (100)\n\n     - MK2         (200)       \n\n     - MK2MM       (201)     \n\n     - MK2S        (202)      \n\n     - MK2SMM      (203)    \n\n     - MK2.5       (250)     \n\n     - MK2.5MMU2   (20250) \n\n     - MK2.5S      (252)    \n\n     - MK2.5SMMU2S (20252)\n\n     - MK3         (300)\n\n     - MK3MMU2     (20300)\n\n     - MK3S        (302)\n\n     - MK3SMMU2S   (20302)\n\n\n\nExample messages\n\n`warn` G-code sliced for a different printer type. Continue?\n\n`strict` G-code sliced for a different printer type. Please re-slice the model again. Print cancelled.M862.3: Model name\n\nParameters\n\n`P\"nnnn\"` nnnn = Prusa model name\n\n`Q` Current model nameWhen run with P<> argument, the check is performed against the input value.\n\nWhen run with Q argument, the current value is shown.\n\nIt accepts text identifiers of printer types too.\n\nThe syntax of M862.3 is (note the quotes around the type):\n\n`M862.3 P \"MK3S\"`\n\nExample messages\n\n`warn` G-code sliced for a different printer type. Continue?\n\n`strict` G-code sliced for a different printer type. Please re-slice the model again. Print cancelled.M862.4: Firmware version\n\nParameters\n\n`Pnnnn` nnnn = Prusa firmware version\n\n`Q` Current firmware versionWhen run with P<> argument, the check is performed against the input value.\n\nWhen run with Q argument, the current value is shown.\n\n\n\nExample messages\n\n`warn` G-code sliced for a newer firmware. Continue?\n\n`strict` G-code sliced for a newer firmware. Please update the firmware. Print cancelled.M862.5: Gcode level\n\nParameters\n\n`Pnnnn` nnnn = Gcode level\n\n`Q` Current Gcode levelWhen run with P<> argument, the check is performed against the input value.\n\nWhen run with Q argument, the current value is shown.\n\n\n\nExample messages\n\n`warn` G-code sliced for a different level. Continue?\n\n`strict` G-code sliced for a different level. Please re-slice the model again. Print cancelled."
   },
   "M871":{
      "prefix":"M871",
      "body":"",
      "description":"M871: PTC ConfigurationM871 allows you to modify the Z adjustments corresponding to temperatures.\n\n\n\nParameters\n\n`B` Set the Z adjustment for bed temperature\n\n`P` Set the Z adjustment for probe temperature\n\n`E` Set the Z adjustment for extruder temperature\n\nExamples\n\nM871 B V0.1 I3 ; Set Z adjustment for bed temp index 3 to 0.1\n\nM871 E V-1 I2  ; Set Z adjustment for extruder temp index 3 to -1\n\n"
   },
   "M876":{
      "prefix":"M876",
      "body":"",
      "description":"M876: Dialog handling\n\nParameters\n\n`Pnnn` signal support for dialog creation on the host = 1, disable = 0\n\n`Snnn` select dialog option nnn (0 based)\n\n\n\nExample\n\nM876 P1\n\nM876 S1\n\nM876 S<n> allows selecting an option of a prompt on a connected host created by the firmware through the corresponding action commands, see G-code#Action_commands. The S parameter is the 0-based index of the chosen option - 0 for the first option provided by the firmware, 1 for the second and so on.\n\nExample: A prompt with three options defined via the firmware and completed by the host by selecting the second option (\"Home X/Y and pause print\")\n\n\n\n <<< //action:prompt_begin Filament runout detected. Please choose how to proceed:\n\n <<< //action:prompt_choice Swap filament\n\n <<< //action:prompt_choice Home X/Y and pause print\n\n <<< //action:prompt_choice Abort print\n\n <<< //action:prompt_show\n\n >>> M876 S1\n\nTo indicate the availability of this function, M115 will add an extra line:\n\n\n\nCap:PROMPT_SUPPORT:1\n\nso hosts know about the presence of the function.\n\n"
   },
   "M890":{
      "prefix":"M890",
      "body":"",
      "description":"M890 Run User Gcode\n\nParameters\n\n`Snnn` select 1 - 5 User Gcode defined in configuration.\n\n\n\nExample\n\nM890 S2 ; Start User Gcode 2\n\n"
   },
   "M900":{
      "prefix":"M900",
      "body":"",
      "description":"M900 Set Linear Advance Scaling FactorsSets the advance extrusion factors for Linear Advance. If any of the R, W, H, or D parameters are set to zero the ratio will be computed dynamically during printing.\n\n\n\nParameters\n\n`K[factor]` Advance K factor\n\n`R[ratio]` Set ratio directly (overrides WH/D)\n\n`W[width]` `H[height]` `D[diam]` Set ratio from WH/D\n\n\n\nExamples\n\nM900 K0.7 W0.4 H0.1 D1.75; Set K and WH/D ratio\n\nM900 R0.025  ; Set the WH/D ratio directly\n\nM900 R0; Set to \"auto ratio\"\n\nRequires enabling the LIN_ADVANCE feature in Marlin 1.1.\n\nThe K factor in the M900 command supported by early versions of Marlin is related to the S factor in the long-established M572 command supported by RepRapFirmware by the following formula:\n\n\n\nK = S * extruder_steps_per_mm\n\nMore recent versions of Marlin appear to have removed the steps/mm dependency, so now K = S.\n\n"
   },
   "M905":{
      "prefix":"M905",
      "body":"",
      "description":"M905: Set local date and time\n\nParameters\n\n`Pnnn` Current date in the format YYYY-MM-DD\n\n`Snnn` Current time in the format HH:MM:SS\n\n\n\nExample\n\nM905 P2016-10-26 S00:23:12\n\nUpdates the machine's local date and time or reports them if no parameters are specified. The time should be specified in 24-hours format as in \"13:45\" instead of 1:45PM.\n\n"
   },
   "M906":{
      "prefix":"M906",
      "body":"",
      "description":"M906: Set motor currents\n\nParameters\n\n`Xnnn` X drive motor current\n\n`Ynnn` Y drive motor current\n\n`Znnn` Z drive motor current\n\n`Ennn` E drive(s) motor current(s)\n\n`Innn` Motor idle current in percent (0..100)\n\n\n\nExample\n\nM906 X300 Y500 Z200 E350:350\n\nSets the currents to send to the stepper motors for each axis. The values are the peak current per phase in milliamps.\n\nThe I parameter is the percentage of normal that the motor currents should be reduced to when the printer becomes idle but the motors have not been switched off. The default value is 30%. On delta printers in particular you may need to increase it to e.g. 60% to prevent the carriages from dropping when the current is reduced to the idle value.\n\n"
   },
   "M907":{
      "prefix":"M907",
      "body":"",
      "description":"M907: Set digital trimpot motorSet digital trimpot motor current using axis codes (X, Y, Z, E, B, S). In Repetier, it sets the current in Percent. In Redeem, it sets the current in Amps (whereas M906 uses milliamps).\n\n"
   },
   "M908":{
      "prefix":"M908",
      "body":"",
      "description":"M908: Control digital trimpot directlyM908 P<pin> S<current>\n\n\n\nNotesIn Prusa Firmware this G-code is deactivated by default, must be turned on in the source code.1\n\n"
   },
   "M909":{
      "prefix":"M909",
      "body":"",
      "description":"M909: Set microstepping\n\nExample\n\nM909 X3 Y5 Z2 E3\n\nSet the microstepping value for each of the steppers.\n\nIn Redeem this is implemented as powers of 2 so\u2026\n\n\n\nM909 X2; set microstepping on X-axis to 2^2 = 4\n\nM909 Y3; set microstepping on Y-axis to 2^3 = 8 etc.\n\n"
   },
   "M910":{
      "prefix":"M910",
      "body":"",
      "description":"M910: TMC2130 initNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M911":{
      "prefix":"M911",
      "body":"",
      "description":"M911: Set TMC2130 holding currentsNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M912":{
      "prefix":"M912",
      "body":"",
      "description":"M912: Set TMC2130 running currentsNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M913":{
      "prefix":"M913",
      "body":"",
      "description":"M913: Print TMC2130 currentsNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M914":{
      "prefix":"M914",
      "body":"",
      "description":"M914: Set TMC2130 normal modeNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M915":{
      "prefix":"M915",
      "body":"",
      "description":"M915: Set TMC2130 silent modeNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M916":{
      "prefix":"M916",
      "body":"",
      "description":"M916: Set TMC2130 Stallguard sensitivity thresholdNot active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M917":{
      "prefix":"M917",
      "body":"",
      "description":"M917: Set TMC2130 PWM amplitude offset (pwm_ampl)Not active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M918":{
      "prefix":"M918",
      "body":"",
      "description":"M918: Set TMC2130 PWM amplitude gradient (pwm_grad)Not active in default, only if TMC2130_SERVICE_CODES_M910_M918 is defined in source code."
   },
   "M928":{
      "prefix":"M928",
      "body":"",
      "description":"M928: Start SD logging\n\nExample\n\nM928 filename.g\n\nStop SD logging with M29.\n\n"
   },
   "M929":{
      "prefix":"M929",
      "body":"",
      "description":"M929: Start/stop event logging to SD card\n\nParameters\n\nP\"filename\" The name of the file to log to. Only used if the S1 parameter is used. A default filename will be used if this parameter is missing.\n\nSn S1 = start logging, S0 = stop logging\n\n\n\nExample\n\nM929 P\"eventlog.txt\" S1 ; start logging to file eventlog.txt\n\nM929 S0 ; stop loggingWhen event logging is enabled, important events such as power up, start/finish printing, most error messages and (if possible) power down will be logged to the SD card. Each log entry is a single line of text, starting with the date and time if available, or the elapsed time since power up if not. If the log file already exists, new log entries will be appended to the existing file.\n\n"
   },
   "M950":{
      "prefix":"M950",
      "body":"",
      "description":"M950: Create heater, fan or GPIO/servo device\n\nParameters\n\nHnn Heater number\n\nFnn Fan number\n\nPnn or Snn GPIO or Servo number (the only difference is the default PWM frequency)\n\nC\"name\" Pin name(s) and optional inversion status. Pin name \"nil\" frees up the pin. A leading '!' character inverts the output. A leading '^' character enables the pullup resistor. The '^' and '!' characters may be placed in either order.\n\nQnn PWM frequency in Hz (optional)\n\nTnn Temperature sensor number, required only when creating a heater.\n\nExamples\n\nM950 H1 C\"out1\" Q100 T1; create heater 1 using temperature sensor 1\n\nM950 H2 C\"nil\"; disable heater 2 and free up the associated pin\n\nM950 H2 C\"1.out0\" T2; create heater 2 using pin out0 on expansion board 1 and temperature sensor 2\n\nM950 F3 C\"heater2\" Q100; Fan 3 is connected to heater 2 pin, PWM at 100Hz\n\nM950 P0 C\"exp.heater3\"; create GPIO port 0 attached to heater 3 pin on expansion connector\n\nM950 F2 C\"!fan2+^pb6\"; Fan 2 uses the Fan2 output, but we are using a PWM fan so the output needs to be inverted, also we are using PB6 as a tacho input with pullup resistor enabledM950 is used to create heaters, fans and GPIO ports and to assign pins to them. Each M950 command assigns a pin or pins to a single device. So every M950 command must have exactly one of the H, F, P or S parameters.\n\nIf a M950 command has C and/or Q parameters, then the pin allocation and/or frequency of the existing device will be configured accordingly. Otherwise, the current configuration will be reported.\n\nWhen using M950 to create a heater, you must first use M308 to define a temperature sensor to control that heater, and specify its number in the T parameter of the M950 command.\n\n"
   },
   "M951":{
      "prefix":"M951",
      "body":"",
      "description":"M951: Set height following mode parameters\n\nParameters\n\n\n\nSnn or Hnn Sensor number\n\nPnn.n Proportional factor, in mm per sensor unit\n\nInn.n Integral factor, in mm per sensor unit per second\n\nDnn.n Derivative factor, in mm per rate of change of sensor units (change in sensor unit per second)\n\nFnn.n (optional) Sample and correction frequency (Hz), default 5Hz\n\nZnn.n:nn.n Minimum and maximum permitted Z valuesHeight following mode allows the Z position of the tool to be controlled by a PID controller using feedback from a sensor. See also M594.\n\nIf commanding the motors to increase Z causes the sensor value to increase, then all of P, I and D must be positive. If commanding the motors to increase Z causes the sensor value to decrease, then all of P, I and D must be negative.\n\n"
   },
   "M952":{
      "prefix":"M952",
      "body":"",
      "description":"M952: Set CAN expansion board address and/or normal data rate\n\nParameters\n\nBn Existing CAN address of expansion board to be changed, 1 to 125.\n\nAn New CAN address of that expansion board, 1 to 125.\n\nSn.n Requested bit rate in Kbits/second (1K = 1000)\n\nT0.n Fraction of the bit time between the bit start and the sample point (optional)\n\nJ0.n Maximum jump time as a fraction of the bit time (optional)\n\n\n\nExample\n\nM952 B120 A11  ; change the CAN address of expansion board 101 to 11\n\nM952 B11 S500  ; change the CAN bit rate or expansion board 11 to 500kbpsSome CAN-connected expansion boards are too small to carry address selection switches. Such boards default to a standard address, which can be changed using this command.\n\nThis command can also be used to change the normal data rate, for example if the printer has CAN bus cables that are too long to support the standard data rate (1Mbits/sec in RepRapFirmware). All boards in the system on the same CAN bus must use the same CAN data rate. The procedure for changing the data rate is:\n\n\n\n Use M952 to change the data rate on all the expansion boards, one at a time. After changing the data rate on each expansion board, you will no longer be able to communicate with it, and you may need to power it down or disconnect it from the CAN bus to prevent it interfering with subsequent CAN communications.\n\n Change the data rate of the main board last. Then the main board should be able to communicate with all the expansion boards again.\n\n"
   },
   "M953":{
      "prefix":"M953",
      "body":"",
      "description":"M953: Set CAN-FD bus fast data rate\n\nParameters\n\nSn.n Requested bit rate in Kbits/second (1K = 1000). Ignored if it is lower than the bit rate for the negotiation phase.\n\nT0.n Fraction of the bit time between the bit start and the sample point (optional)\n\nJ0.n Maximum jump time as a fraction of the bit time (optional)\n\nCaa:bb Transceiver delay compensation offset and minimum, in nanoseconds (optional)\n\n\n\nExample\n\nM953 S4000 T0.6 J0.2This command allows the bandwidth of the CAN bus to be optimised, by increasing the data rate during transmission of CAN-FD data packets using the BRS (bit rate switch) feature. The maximum speed supported by CAN-FD is 8Mbits/sec but the practical limit depends on the cable length, cable quality, number of devices on the bus and CAN interface hardware used. The rate specified will be rounded down to the nearest achievable rate.\n\nThe optional C parameter allows fine-tuning of the transmitter delay compensation. The first parameter is the offset added to the measured transmitter delay. The optional second value, which must be greater than the first, is the minimum delay compensation applied. Glitches seen by the receiver while the transceiver delay is being measured will be ignored if they would result in a transceiver delay compensation lower than this value. When CAN is implemented on Microchip SAME5x and SAMC21 processors, these values are converted from nanoseconds into time quanta and stored in the TDCO and TDCF fields of the transceiver delay compensation register.\n\n"
   },
   "M954":{
      "prefix":"M954",
      "body":"",
      "description":"M954: Configure as CAN expansion board\n\nParameters\n\nAnn CAN address to use (required)This command is used to reconfigure the board it is executed on as a CAN-connected expansion board. It would typically be the only command in the config.g file. When it is executed, the board changes its CAN address to the one specified in the A parameter, stops sending CAN time sync messages, and responds to requests received via CAN just like a regular expansion board. A few GCode commands can still be executed locally for diagnostic purposes, for example M111 and M122.\n\n"
   },
   "M955":{
      "prefix":"M955",
      "body":"",
      "description":"M955: Configure Accelerometer\n\nParameters (provisional)\n\nPnn or Pbb.nn Accelerometer to use (required)\n\nInn Accelerometer orientation\n\nSnnn Sample rate (Hz)\n\nRnn Resolution (bits), typically 8, 10 or 12This command configures an accelerometer.\n\nThe P parameter selects which accelerometer to use and is mandatory. To use an accelerometer on a CAN-connected expansion board, use the form Pboard-address.device-number for example P22.0.\n\nIf none of the other parameters are provided, the current configuration of the specified accelerometer is reported. Otherwise the configuration of that accelerometer is adjusted according to the I, S, and R parameters. These configuration settings persist until they are changed.\n\nThe I (orientation) parameter tells the firmware which of the 24 possible orientations the accelerometer chip is in relative to the printer axes. It is expressed as a 2-digit number. The first digit specifies which machine direction the Z axis of the accelerometer chip (usually the top face of the chip) faces, as follows: 0 = +X, 1 = +Y, 2 = +Z, 4 = -X, 5 = -Y, 6 = -Z. The second digit expresses which direction the X axis of the accelerometer chip faces, using the same code. If the accelerometer chip axes line up with the machine axis, the orientation is 21. This is the default orientation if no orientation has been specified.\n\nThe S and R parameters control how the accelerometer is programmed. The R parameter is ignored unless the S parameter is also provided. If S is provided but R is missing, a default resolution is used. The sensor resolution will be adjusted to be no greater than the value of the R parameter (or the minimum supported resolution if greater), then the sensor sampling rate will be adjusted to a value supported at that resolution that is close to the S parameter. The actual rate and resolution selected can be found by using M955 with just the P parameter.\n\n"
   },
   "M956":{
      "prefix":"M956",
      "body":"",
      "description":"M956: Collect accelerometer data and write to file\n\nParameters (provisional)\n\nPnn or Pbb.nn Accelerometer to use (required)\n\nSnnn Number of samples to collect (required)\n\nX and/or Y and/or Z Machine axes to collect data for. If no axes are specified, data is collected for all three axes.\n\nAn (required) 0 = activate immediately, 1 = activate just before the start of the next move, 2 = activate just before the start of the deceleration segment of the next move\n\nKn (optional, default 0) Skip the specified number of moves before activating (use with A1 or A2)This command causes the specified number of accelerometer samples to be collected and saved to a .csv file on the SD card.\n\nThe P parameter selects which accelerometer to use and is mandatory. To use an accelerometer on a CAN-connected expansion board, use the form Pboard-address.device-number for example P22.0.\n\n"
   },
   "M995":{
      "prefix":"M995",
      "body":"",
      "description":"M995: Calibrate Touch Screen"
   },
   "M997":{
      "prefix":"M997",
      "body":"",
      "description":"M997: Perform in-application firmware update\n\nParameters\n\n`Snnn` Firmware module number(s), default 0\n\n`Bnnn` Expansion board address, default 0 (i.e. main controller board)\n\n\n\nExample\n\nM997 S0:1; update firmware modules 0 and 1 on the main controller board\n\nM997 B3; update firmware module 0 on the expansion board with address 3\n\nThis command triggers a firmware update if the necessary files are present on the SD card. In RepRapFirmware on the Duet series, module numbers are as follows:\n\n0 - main firmware. The firmware filename depends on the controller electronics, e.g.sys/RepRapFirmware.bin (Duet 06/085), sys/Duet2CombinedFirmware (Duet WiFi/Ethernet), sys/DuetMaestroFirmware.bin (Duet Maestro). File sys/iap.bin (Duet), sys/iap4e.bin (Duet WiFi/Ethernet) or sys/iap4s.bin (Duet Maestro) must also be present.\n\n1 - WiFi module firmware, filename sys/DuetWiFiServer.bin\n\n2 - Reserved (on Duet WiFi running RepRapFirmware 1.18 and earlier, was web server file system) \n\n3 - Duet WiFi main boards: put the WiFi module into bootloader mode so that firmware can be uploaded directly via its serial port. Duet 3 expansion boards: update the bootloader (RepRapFirmware 3.2 and later).\n\n4 - Updates the firmware on an attached PanelDue v3 or later touch screen (supported in RRF 3.2 and later)\n\n"
   },
   "M998":{
      "prefix":"M998",
      "body":"",
      "description":"M998: Request resend of line\n\nParameters\n\n`Pnnn` Line number\n\n\n\nExample\n\nM998 P34\n\nRequest a resend of line 34. In some implementations the input-handling code overwrites the incoming G Code with this when it detects, for example, a checksum error. Then it leaves it up to the G-code interpreter to request the resend.\n\n"
   }
}